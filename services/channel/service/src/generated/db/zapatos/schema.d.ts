/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.6.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: app_hidden === */

  /* --- enums --- */


  /* --- tables --- */



  /* === schema: app_private === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace messaging_counter {
    export type Table = 'messaging_counter';
    export interface Selectable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter: number | null;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date: Date;
    }
    export interface JSONSelectable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter: number | null;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date: db.DateString;
    }
    export interface Whereable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'messaging_counter_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }


  /* === schema: app_public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace channel_image_type {
    export type Table = 'channel_image_type';
    export interface Selectable {
      /**
      * **channel_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **channel_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **channel_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **channel_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **channel_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channel_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **channel_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **channel_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **channel_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **channel_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'channel_image_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace channel_images {
    export type Table = 'channel_images';
    export interface Selectable {
      /**
      * **channel_images.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id: string;
      /**
      * **channel_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **channel_images.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **channel_images.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **channel_images.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **channel_images.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **channel_images.image_type**
      * - `channel_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'LOGO'::text`
      */
      image_type: c.ChannelImageTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **channel_images.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id: string;
      /**
      * **channel_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **channel_images.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **channel_images.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **channel_images.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **channel_images.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **channel_images.image_type**
      * - `channel_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'LOGO'::text`
      */
      image_type: c.ChannelImageTypeEnum;
    }
    export interface Whereable {
      /**
      * **channel_images.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channel_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channel_images.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channel_images.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channel_images.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channel_images.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channel_images.image_type**
      * - `channel_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'LOGO'::text`
      */
      image_type?: c.ChannelImageTypeEnum | db.Parameter<c.ChannelImageTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.ChannelImageTypeEnum | db.Parameter<c.ChannelImageTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **channel_images.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **channel_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **channel_images.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **channel_images.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **channel_images.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **channel_images.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **channel_images.image_type**
      * - `channel_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'LOGO'::text`
      */
      image_type?: c.ChannelImageTypeEnum | db.Parameter<c.ChannelImageTypeEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **channel_images.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **channel_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **channel_images.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **channel_images.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **channel_images.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **channel_images.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **channel_images.image_type**
      * - `channel_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'LOGO'::text`
      */
      image_type?: c.ChannelImageTypeEnum | db.Parameter<c.ChannelImageTypeEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.ChannelImageTypeEnum | db.Parameter<c.ChannelImageTypeEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'channel_id_image_type_are_unique' | 'channel_images_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace channels {
    export type Table = 'channels';
    export interface Selectable {
      /**
      * **channels.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **channels.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **channels.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **channels.is_drm_protected**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_drm_protected: boolean;
      /**
      * **channels.placeholder_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      placeholder_video_id: string | null;
      /**
      * **channels.dash_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      dash_stream_url: string | null;
      /**
      * **channels.hls_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      hls_stream_url: string | null;
      /**
      * **channels.key_id**
      * - `text` in database
      * - Nullable, no default
      */
      key_id: string | null;
      /**
      * **channels.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **channels.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **channels.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **channels.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **channels.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **channels.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **channels.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state: c.PublicationStateEnum;
    }
    export interface JSONSelectable {
      /**
      * **channels.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **channels.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **channels.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **channels.is_drm_protected**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_drm_protected: boolean;
      /**
      * **channels.placeholder_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      placeholder_video_id: string | null;
      /**
      * **channels.dash_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      dash_stream_url: string | null;
      /**
      * **channels.hls_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      hls_stream_url: string | null;
      /**
      * **channels.key_id**
      * - `text` in database
      * - Nullable, no default
      */
      key_id: string | null;
      /**
      * **channels.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **channels.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **channels.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **channels.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **channels.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **channels.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **channels.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state: c.PublicationStateEnum;
    }
    export interface Whereable {
      /**
      * **channels.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.is_drm_protected**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_drm_protected?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.placeholder_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      placeholder_video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.dash_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      dash_stream_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.hls_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      hls_stream_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.key_id**
      * - `text` in database
      * - Nullable, no default
      */
      key_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **channels.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state?: c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **channels.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **channels.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **channels.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **channels.is_drm_protected**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_drm_protected?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **channels.placeholder_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      placeholder_video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **channels.dash_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      dash_stream_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **channels.hls_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      hls_stream_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **channels.key_id**
      * - `text` in database
      * - Nullable, no default
      */
      key_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **channels.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **channels.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **channels.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **channels.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **channels.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **channels.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **channels.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state?: c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **channels.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **channels.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.is_drm_protected**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_drm_protected?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.placeholder_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      placeholder_video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.dash_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      dash_stream_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.hls_stream_url**
      * - `text` in database
      * - Nullable, no default
      */
      hls_stream_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.key_id**
      * - `text` in database
      * - Nullable, no default
      */
      key_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **channels.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state?: c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'channels_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace cue_point_schedule_type {
    export type Table = 'cue_point_schedule_type';
    export interface Selectable {
      /**
      * **cue_point_schedule_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **cue_point_schedule_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **cue_point_schedule_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **cue_point_schedule_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **cue_point_schedule_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedule_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **cue_point_schedule_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cue_point_schedule_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **cue_point_schedule_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cue_point_schedule_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'cue_point_schedule_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace cue_point_schedules {
    export type Table = 'cue_point_schedules';
    export interface Selectable {
      /**
      * **cue_point_schedules.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **cue_point_schedules.program_cue_point_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_cue_point_id: string;
      /**
      * **cue_point_schedules.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index: number;
      /**
      * **cue_point_schedules.video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_id: string | null;
      /**
      * **cue_point_schedules.duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      duration_in_seconds: number;
      /**
      * **cue_point_schedules.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **cue_point_schedules.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **cue_point_schedules.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **cue_point_schedules.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **cue_point_schedules.type**
      * - `cue_point_schedule_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT NULL'::text`
      */
      type: c.CuePointScheduleTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **cue_point_schedules.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **cue_point_schedules.program_cue_point_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_cue_point_id: string;
      /**
      * **cue_point_schedules.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index: number;
      /**
      * **cue_point_schedules.video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_id: string | null;
      /**
      * **cue_point_schedules.duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      duration_in_seconds: number;
      /**
      * **cue_point_schedules.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **cue_point_schedules.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **cue_point_schedules.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **cue_point_schedules.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **cue_point_schedules.type**
      * - `cue_point_schedule_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT NULL'::text`
      */
      type: c.CuePointScheduleTypeEnum;
    }
    export interface Whereable {
      /**
      * **cue_point_schedules.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.program_cue_point_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_cue_point_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      duration_in_seconds?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cue_point_schedules.type**
      * - `cue_point_schedule_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT NULL'::text`
      */
      type?: c.CuePointScheduleTypeEnum | db.Parameter<c.CuePointScheduleTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.CuePointScheduleTypeEnum | db.Parameter<c.CuePointScheduleTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **cue_point_schedules.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **cue_point_schedules.program_cue_point_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_cue_point_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cue_point_schedules.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **cue_point_schedules.video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **cue_point_schedules.duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      duration_in_seconds: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **cue_point_schedules.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **cue_point_schedules.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **cue_point_schedules.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **cue_point_schedules.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **cue_point_schedules.type**
      * - `cue_point_schedule_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT NULL'::text`
      */
      type?: c.CuePointScheduleTypeEnum | db.Parameter<c.CuePointScheduleTypeEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **cue_point_schedules.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **cue_point_schedules.program_cue_point_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_cue_point_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cue_point_schedules.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **cue_point_schedules.video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **cue_point_schedules.duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      duration_in_seconds?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **cue_point_schedules.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **cue_point_schedules.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **cue_point_schedules.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **cue_point_schedules.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **cue_point_schedules.type**
      * - `cue_point_schedule_type_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT NULL'::text`
      */
      type?: c.CuePointScheduleTypeEnum | db.Parameter<c.CuePointScheduleTypeEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.CuePointScheduleTypeEnum | db.Parameter<c.CuePointScheduleTypeEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'cue_point_schedules_pkey' | 'cue_point_schedules_sort_index_is_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace entity_type {
    export type Table = 'entity_type';
    export interface Selectable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'entity_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace playlists {
    export type Table = 'playlists';
    export interface Selectable {
      /**
      * **playlists.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **playlists.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id: string;
      /**
      * **playlists.start_date_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date_time: Date;
      /**
      * **playlists.calculated_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      calculated_duration_in_seconds: number;
      /**
      * **playlists.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **playlists.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **playlists.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **playlists.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **playlists.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **playlists.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **playlists.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state: c.PublicationStateEnum;
    }
    export interface JSONSelectable {
      /**
      * **playlists.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **playlists.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id: string;
      /**
      * **playlists.start_date_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date_time: db.DateString;
      /**
      * **playlists.calculated_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      calculated_duration_in_seconds: number;
      /**
      * **playlists.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **playlists.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **playlists.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **playlists.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **playlists.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **playlists.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **playlists.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state: c.PublicationStateEnum;
    }
    export interface Whereable {
      /**
      * **playlists.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.start_date_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date_time?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.calculated_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      calculated_duration_in_seconds?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **playlists.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state?: c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **playlists.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **playlists.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **playlists.start_date_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date_time: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment;
      /**
      * **playlists.calculated_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      calculated_duration_in_seconds: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **playlists.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **playlists.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **playlists.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **playlists.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **playlists.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **playlists.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **playlists.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state?: c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **playlists.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **playlists.channel_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      channel_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **playlists.start_date_time**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date_time?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment>;
      /**
      * **playlists.calculated_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      calculated_duration_in_seconds?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **playlists.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **playlists.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **playlists.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **playlists.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **playlists.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **playlists.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **playlists.publication_state**
      * - `publication_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publication_state?: c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PublicationStateEnum | db.Parameter<c.PublicationStateEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'playlists_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace program_break_type {
    export type Table = 'program_break_type';
    export interface Selectable {
      /**
      * **program_break_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **program_break_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **program_break_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **program_break_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **program_break_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_break_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **program_break_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **program_break_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **program_break_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **program_break_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'program_break_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace program_cue_points {
    export type Table = 'program_cue_points';
    export interface Selectable {
      /**
      * **program_cue_points.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **program_cue_points.program_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_id: string;
      /**
      * **program_cue_points.time_in_seconds**
      * - `numeric` in database
      * - Nullable, no default
      */
      time_in_seconds: number | null;
      /**
      * **program_cue_points.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
      /**
      * **program_cue_points.video_cue_point_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_cue_point_id: string | null;
      /**
      * **program_cue_points.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **program_cue_points.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **program_cue_points.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **program_cue_points.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **program_cue_points.type**
      * - `program_break_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.ProgramBreakTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **program_cue_points.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **program_cue_points.program_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_id: string;
      /**
      * **program_cue_points.time_in_seconds**
      * - `numeric` in database
      * - Nullable, no default
      */
      time_in_seconds: number | null;
      /**
      * **program_cue_points.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
      /**
      * **program_cue_points.video_cue_point_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_cue_point_id: string | null;
      /**
      * **program_cue_points.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **program_cue_points.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **program_cue_points.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **program_cue_points.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **program_cue_points.type**
      * - `program_break_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.ProgramBreakTypeEnum;
    }
    export interface Whereable {
      /**
      * **program_cue_points.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.program_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.time_in_seconds**
      * - `numeric` in database
      * - Nullable, no default
      */
      time_in_seconds?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.video_cue_point_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_cue_point_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **program_cue_points.type**
      * - `program_break_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type?: c.ProgramBreakTypeEnum | db.Parameter<c.ProgramBreakTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.ProgramBreakTypeEnum | db.Parameter<c.ProgramBreakTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **program_cue_points.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.program_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **program_cue_points.time_in_seconds**
      * - `numeric` in database
      * - Nullable, no default
      */
      time_in_seconds?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.video_cue_point_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_cue_point_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **program_cue_points.type**
      * - `program_break_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.ProgramBreakTypeEnum | db.Parameter<c.ProgramBreakTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **program_cue_points.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.program_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      program_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **program_cue_points.time_in_seconds**
      * - `numeric` in database
      * - Nullable, no default
      */
      time_in_seconds?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.video_cue_point_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      video_cue_point_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **program_cue_points.type**
      * - `program_break_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type?: c.ProgramBreakTypeEnum | db.Parameter<c.ProgramBreakTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.ProgramBreakTypeEnum | db.Parameter<c.ProgramBreakTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'idx_program_cue_points_type_mt_unique' | 'program_cue_points_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace programs {
    export type Table = 'programs';
    export interface Selectable {
      /**
      * **programs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **programs.playlist_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      playlist_id: string;
      /**
      * **programs.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index: number;
      /**
      * **programs.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **programs.image_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      image_id: string | null;
      /**
      * **programs.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
      /**
      * **programs.video_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      video_duration_in_seconds: number;
      /**
      * **programs.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **programs.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum;
      /**
      * **programs.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **programs.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **programs.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **programs.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface JSONSelectable {
      /**
      * **programs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id: string;
      /**
      * **programs.playlist_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      playlist_id: string;
      /**
      * **programs.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index: number;
      /**
      * **programs.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **programs.image_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      image_id: string | null;
      /**
      * **programs.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
      /**
      * **programs.video_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      video_duration_in_seconds: number;
      /**
      * **programs.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **programs.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum;
      /**
      * **programs.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **programs.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **programs.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **programs.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface Whereable {
      /**
      * **programs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.playlist_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      playlist_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.image_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.video_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      video_duration_in_seconds?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type?: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **programs.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **programs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **programs.playlist_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      playlist_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **programs.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **programs.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **programs.image_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      image_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **programs.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **programs.video_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      video_duration_in_seconds: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **programs.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **programs.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment;
      /**
      * **programs.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **programs.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **programs.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **programs.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **programs.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **programs.playlist_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      playlist_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **programs.sort_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **programs.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **programs.image_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      image_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **programs.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **programs.video_duration_in_seconds**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      video_duration_in_seconds?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **programs.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **programs.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type?: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment>;
      /**
      * **programs.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **programs.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **programs.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **programs.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'programs_pkey' | 'programs_sort_index_is_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace publication_state {
    export type Table = 'publication_state';
    export interface Selectable {
      /**
      * **publication_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **publication_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **publication_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **publication_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **publication_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **publication_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **publication_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **publication_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **publication_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **publication_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'publication_state_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }


  /* === schema: ax_utils === */

  /* --- enums --- */


  /* --- tables --- */



  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */


  /* === cross-table types === */

  export type Table = channel_image_type.Table | channel_images.Table | channels.Table | cue_point_schedule_type.Table | cue_point_schedules.Table | entity_type.Table | messaging_counter.Table | playlists.Table | program_break_type.Table | program_cue_points.Table | programs.Table | publication_state.Table;
  export type Selectable = channel_image_type.Selectable | channel_images.Selectable | channels.Selectable | cue_point_schedule_type.Selectable | cue_point_schedules.Selectable | entity_type.Selectable | messaging_counter.Selectable | playlists.Selectable | program_break_type.Selectable | program_cue_points.Selectable | programs.Selectable | publication_state.Selectable;
  export type JSONSelectable = channel_image_type.JSONSelectable | channel_images.JSONSelectable | channels.JSONSelectable | cue_point_schedule_type.JSONSelectable | cue_point_schedules.JSONSelectable | entity_type.JSONSelectable | messaging_counter.JSONSelectable | playlists.JSONSelectable | program_break_type.JSONSelectable | program_cue_points.JSONSelectable | programs.JSONSelectable | publication_state.JSONSelectable;
  export type Whereable = channel_image_type.Whereable | channel_images.Whereable | channels.Whereable | cue_point_schedule_type.Whereable | cue_point_schedules.Whereable | entity_type.Whereable | messaging_counter.Whereable | playlists.Whereable | program_break_type.Whereable | program_cue_points.Whereable | programs.Whereable | publication_state.Whereable;
  export type Insertable = channel_image_type.Insertable | channel_images.Insertable | channels.Insertable | cue_point_schedule_type.Insertable | cue_point_schedules.Insertable | entity_type.Insertable | messaging_counter.Insertable | playlists.Insertable | program_break_type.Insertable | program_cue_points.Insertable | programs.Insertable | publication_state.Insertable;
  export type Updatable = channel_image_type.Updatable | channel_images.Updatable | channels.Updatable | cue_point_schedule_type.Updatable | cue_point_schedules.Updatable | entity_type.Updatable | messaging_counter.Updatable | playlists.Updatable | program_break_type.Updatable | program_cue_points.Updatable | programs.Updatable | publication_state.Updatable;
  export type UniqueIndex = channel_image_type.UniqueIndex | channel_images.UniqueIndex | channels.UniqueIndex | cue_point_schedule_type.UniqueIndex | cue_point_schedules.UniqueIndex | entity_type.UniqueIndex | messaging_counter.UniqueIndex | playlists.UniqueIndex | program_break_type.UniqueIndex | program_cue_points.UniqueIndex | programs.UniqueIndex | publication_state.UniqueIndex;
  export type Column = channel_image_type.Column | channel_images.Column | channels.Column | cue_point_schedule_type.Column | cue_point_schedules.Column | entity_type.Column | messaging_counter.Column | playlists.Column | program_break_type.Column | program_cue_points.Column | programs.Column | publication_state.Column;
  export type AllTables = [channel_image_type.Table, channel_images.Table, channels.Table, cue_point_schedule_type.Table, cue_point_schedules.Table, entity_type.Table, messaging_counter.Table, playlists.Table, program_break_type.Table, program_cue_points.Table, programs.Table, publication_state.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    channel_image_type: channel_image_type.Selectable;
    channel_images: channel_images.Selectable;
    channels: channels.Selectable;
    cue_point_schedule_type: cue_point_schedule_type.Selectable;
    cue_point_schedules: cue_point_schedules.Selectable;
    entity_type: entity_type.Selectable;
    messaging_counter: messaging_counter.Selectable;
    playlists: playlists.Selectable;
    program_break_type: program_break_type.Selectable;
    program_cue_points: program_cue_points.Selectable;
    programs: programs.Selectable;
    publication_state: publication_state.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    channel_image_type: channel_image_type.JSONSelectable;
    channel_images: channel_images.JSONSelectable;
    channels: channels.JSONSelectable;
    cue_point_schedule_type: cue_point_schedule_type.JSONSelectable;
    cue_point_schedules: cue_point_schedules.JSONSelectable;
    entity_type: entity_type.JSONSelectable;
    messaging_counter: messaging_counter.JSONSelectable;
    playlists: playlists.JSONSelectable;
    program_break_type: program_break_type.JSONSelectable;
    program_cue_points: program_cue_points.JSONSelectable;
    programs: programs.JSONSelectable;
    publication_state: publication_state.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    channel_image_type: channel_image_type.Whereable;
    channel_images: channel_images.Whereable;
    channels: channels.Whereable;
    cue_point_schedule_type: cue_point_schedule_type.Whereable;
    cue_point_schedules: cue_point_schedules.Whereable;
    entity_type: entity_type.Whereable;
    messaging_counter: messaging_counter.Whereable;
    playlists: playlists.Whereable;
    program_break_type: program_break_type.Whereable;
    program_cue_points: program_cue_points.Whereable;
    programs: programs.Whereable;
    publication_state: publication_state.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    channel_image_type: channel_image_type.Insertable;
    channel_images: channel_images.Insertable;
    channels: channels.Insertable;
    cue_point_schedule_type: cue_point_schedule_type.Insertable;
    cue_point_schedules: cue_point_schedules.Insertable;
    entity_type: entity_type.Insertable;
    messaging_counter: messaging_counter.Insertable;
    playlists: playlists.Insertable;
    program_break_type: program_break_type.Insertable;
    program_cue_points: program_cue_points.Insertable;
    programs: programs.Insertable;
    publication_state: publication_state.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    channel_image_type: channel_image_type.Updatable;
    channel_images: channel_images.Updatable;
    channels: channels.Updatable;
    cue_point_schedule_type: cue_point_schedule_type.Updatable;
    cue_point_schedules: cue_point_schedules.Updatable;
    entity_type: entity_type.Updatable;
    messaging_counter: messaging_counter.Updatable;
    playlists: playlists.Updatable;
    program_break_type: program_break_type.Updatable;
    program_cue_points: program_cue_points.Updatable;
    programs: programs.Updatable;
    publication_state: publication_state.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    channel_image_type: channel_image_type.UniqueIndex;
    channel_images: channel_images.UniqueIndex;
    channels: channels.UniqueIndex;
    cue_point_schedule_type: cue_point_schedule_type.UniqueIndex;
    cue_point_schedules: cue_point_schedules.UniqueIndex;
    entity_type: entity_type.UniqueIndex;
    messaging_counter: messaging_counter.UniqueIndex;
    playlists: playlists.UniqueIndex;
    program_break_type: program_break_type.UniqueIndex;
    program_cue_points: program_cue_points.UniqueIndex;
    programs: programs.UniqueIndex;
    publication_state: publication_state.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    channel_image_type: channel_image_type.Column;
    channel_images: channel_images.Column;
    channels: channels.Column;
    cue_point_schedule_type: cue_point_schedule_type.Column;
    cue_point_schedules: cue_point_schedules.Column;
    entity_type: entity_type.Column;
    messaging_counter: messaging_counter.Column;
    playlists: playlists.Column;
    program_break_type: program_break_type.Column;
    program_cue_points: program_cue_points.Column;
    programs: programs.Column;
    publication_state: publication_state.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    channel_image_type: channel_image_type.SQL;
    channel_images: channel_images.SQL;
    channels: channels.SQL;
    cue_point_schedule_type: cue_point_schedule_type.SQL;
    cue_point_schedules: cue_point_schedules.SQL;
    entity_type: entity_type.SQL;
    messaging_counter: messaging_counter.SQL;
    playlists: playlists.SQL;
    program_break_type: program_break_type.SQL;
    program_cue_points: program_cue_points.SQL;
    programs: programs.SQL;
    publication_state: publication_state.SQL;
  }[T];

}
