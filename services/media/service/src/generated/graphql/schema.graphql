"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection

  """Reads and enables pagination through a set of `Collection`."""
  collections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionFilter
  ): CollectionsConnection

  """Reads and enables pagination through a set of `CollectionsImage`."""
  collectionsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsImageFilter
  ): CollectionsImagesConnection

  """Reads and enables pagination through a set of `CollectionsTag`."""
  collectionsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsTagFilter
  ): CollectionsTagsConnection

  """Reads and enables pagination through a set of `Episode`."""
  episodes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodeFilter
  ): EpisodesConnection

  """Reads and enables pagination through a set of `EpisodesCast`."""
  episodesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesCastFilter
  ): EpisodesCastsConnection

  """Reads and enables pagination through a set of `EpisodesImage`."""
  episodesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesImageFilter
  ): EpisodesImagesConnection

  """Reads and enables pagination through a set of `EpisodesLicense`."""
  episodesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesLicenseFilter
  ): EpisodesLicensesConnection

  """
  Reads and enables pagination through a set of `EpisodesLicensesCountry`.
  """
  episodesLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesLicensesCountry`."""
    orderBy: [EpisodesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesLicensesCountryFilter
  ): EpisodesLicensesCountriesConnection

  """
  Reads and enables pagination through a set of `EpisodesProductionCountry`.
  """
  episodesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesProductionCountryFilter
  ): EpisodesProductionCountriesConnection

  """Reads and enables pagination through a set of `EpisodesTag`."""
  episodesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTagFilter
  ): EpisodesTagsConnection

  """Reads and enables pagination through a set of `EpisodesTrailer`."""
  episodesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTrailerFilter
  ): EpisodesTrailersConnection

  """Reads and enables pagination through a set of `EpisodesTvshowGenre`."""
  episodesTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTvshowGenreFilter
  ): EpisodesTvshowGenresConnection

  """Reads and enables pagination through a set of `IngestDocument`."""
  ingestDocuments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IngestDocument`."""
    orderBy: [IngestDocumentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngestDocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IngestDocumentFilter
  ): IngestDocumentsConnection

  """Reads and enables pagination through a set of `IngestItemStep`."""
  ingestItemSteps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IngestItemStep`."""
    orderBy: [IngestItemStepsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngestItemStepCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IngestItemStepFilter
  ): IngestItemStepsConnection

  """Reads and enables pagination through a set of `IngestItem`."""
  ingestItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IngestItem`."""
    orderBy: [IngestItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngestItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IngestItemFilter
  ): IngestItemsConnection

  """Reads and enables pagination through a set of `MovieGenre`."""
  movieGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MovieGenreFilter
  ): MovieGenresConnection

  """Reads and enables pagination through a set of `Movie`."""
  movies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MovieCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MovieFilter
  ): MoviesConnection

  """Reads and enables pagination through a set of `MoviesCast`."""
  moviesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesCastFilter
  ): MoviesCastsConnection

  """Reads and enables pagination through a set of `MoviesImage`."""
  moviesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesImageFilter
  ): MoviesImagesConnection

  """Reads and enables pagination through a set of `MoviesLicense`."""
  moviesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesLicenseFilter
  ): MoviesLicensesConnection

  """Reads and enables pagination through a set of `MoviesLicensesCountry`."""
  moviesLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesLicensesCountry`."""
    orderBy: [MoviesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesLicensesCountryFilter
  ): MoviesLicensesCountriesConnection

  """Reads and enables pagination through a set of `MoviesMovieGenre`."""
  moviesMovieGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesMovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesMovieGenreFilter
  ): MoviesMovieGenresConnection

  """
  Reads and enables pagination through a set of `MoviesProductionCountry`.
  """
  moviesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesProductionCountryFilter
  ): MoviesProductionCountriesConnection

  """Reads and enables pagination through a set of `MoviesTag`."""
  moviesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTagFilter
  ): MoviesTagsConnection

  """Reads and enables pagination through a set of `MoviesTrailer`."""
  moviesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTrailerFilter
  ): MoviesTrailersConnection

  """Reads and enables pagination through a set of `Review`."""
  reviews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReviewFilter
  ): ReviewsConnection

  """Reads and enables pagination through a set of `Season`."""
  seasons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonFilter
  ): SeasonsConnection

  """Reads and enables pagination through a set of `SeasonsCast`."""
  seasonsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsCastFilter
  ): SeasonsCastsConnection

  """Reads and enables pagination through a set of `SeasonsImage`."""
  seasonsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsImageFilter
  ): SeasonsImagesConnection

  """Reads and enables pagination through a set of `SeasonsLicense`."""
  seasonsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsLicenseFilter
  ): SeasonsLicensesConnection

  """
  Reads and enables pagination through a set of `SeasonsLicensesCountry`.
  """
  seasonsLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsLicensesCountry`."""
    orderBy: [SeasonsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsLicensesCountryFilter
  ): SeasonsLicensesCountriesConnection

  """
  Reads and enables pagination through a set of `SeasonsProductionCountry`.
  """
  seasonsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsProductionCountryFilter
  ): SeasonsProductionCountriesConnection

  """Reads and enables pagination through a set of `SeasonsTag`."""
  seasonsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTagFilter
  ): SeasonsTagsConnection

  """Reads and enables pagination through a set of `SeasonsTrailer`."""
  seasonsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTrailerFilter
  ): SeasonsTrailersConnection

  """Reads and enables pagination through a set of `SeasonsTvshowGenre`."""
  seasonsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTvshowGenreFilter
  ): SeasonsTvshowGenresConnection

  """Reads and enables pagination through a set of `Snapshot`."""
  snapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Snapshot`."""
    orderBy: [SnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SnapshotFilter
  ): SnapshotsConnection

  """Reads and enables pagination through a set of `TvshowGenre`."""
  tvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowGenreFilter
  ): TvshowGenresConnection

  """Reads and enables pagination through a set of `Tvshow`."""
  tvshows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowFilter
  ): TvshowsConnection

  """Reads and enables pagination through a set of `TvshowsCast`."""
  tvshowsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsCastFilter
  ): TvshowsCastsConnection

  """Reads and enables pagination through a set of `TvshowsImage`."""
  tvshowsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsImageFilter
  ): TvshowsImagesConnection

  """Reads and enables pagination through a set of `TvshowsLicense`."""
  tvshowsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsLicenseFilter
  ): TvshowsLicensesConnection

  """
  Reads and enables pagination through a set of `TvshowsLicensesCountry`.
  """
  tvshowsLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsLicensesCountry`."""
    orderBy: [TvshowsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsLicensesCountryFilter
  ): TvshowsLicensesCountriesConnection

  """
  Reads and enables pagination through a set of `TvshowsProductionCountry`.
  """
  tvshowsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsProductionCountryFilter
  ): TvshowsProductionCountriesConnection

  """Reads and enables pagination through a set of `TvshowsTag`."""
  tvshowsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTagFilter
  ): TvshowsTagsConnection

  """Reads and enables pagination through a set of `TvshowsTrailer`."""
  tvshowsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTrailerFilter
  ): TvshowsTrailersConnection

  """Reads and enables pagination through a set of `TvshowsTvshowGenre`."""
  tvshowsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTvshowGenreFilter
  ): TvshowsTvshowGenresConnection
  collectionRelation(id: Int!): CollectionRelation
  collection(id: Int!): Collection
  collectionByExternalId(externalId: String!): Collection
  collectionsTag(collectionId: Int!, name: String!): CollectionsTag
  episode(id: Int!): Episode
  episodeByExternalId(externalId: String!): Episode
  episodesCast(episodeId: Int!, name: String!): EpisodesCast
  episodesLicense(id: Int!): EpisodesLicense
  episodesLicensesCountry(episodesLicenseId: Int!, code: IsoAlphaTwoCountryCodes!): EpisodesLicensesCountry
  episodesProductionCountry(episodeId: Int!, name: String!): EpisodesProductionCountry
  episodesTag(episodeId: Int!, name: String!): EpisodesTag
  episodesTrailer(episodeId: Int!, videoId: UUID!): EpisodesTrailer
  episodesTvshowGenre(episodeId: Int!, tvshowGenresId: Int!): EpisodesTvshowGenre
  ingestDocument(id: Int!): IngestDocument
  ingestItemStep(id: UUID!): IngestItemStep
  ingestItem(id: Int!): IngestItem
  movieGenre(id: Int!): MovieGenre
  movie(id: Int!): Movie
  movieByExternalId(externalId: String!): Movie
  moviesCast(movieId: Int!, name: String!): MoviesCast
  moviesLicense(id: Int!): MoviesLicense
  moviesLicensesCountry(moviesLicenseId: Int!, code: IsoAlphaTwoCountryCodes!): MoviesLicensesCountry
  moviesMovieGenre(movieId: Int!, movieGenresId: Int!): MoviesMovieGenre
  moviesProductionCountry(movieId: Int!, name: String!): MoviesProductionCountry
  moviesTag(movieId: Int!, name: String!): MoviesTag
  moviesTrailer(movieId: Int!, videoId: UUID!): MoviesTrailer
  review(id: Int!): Review
  season(id: Int!): Season
  seasonByExternalId(externalId: String!): Season
  seasonsCast(seasonId: Int!, name: String!): SeasonsCast
  seasonsLicense(id: Int!): SeasonsLicense
  seasonsLicensesCountry(seasonsLicenseId: Int!, code: IsoAlphaTwoCountryCodes!): SeasonsLicensesCountry
  seasonsProductionCountry(seasonId: Int!, name: String!): SeasonsProductionCountry
  seasonsTag(seasonId: Int!, name: String!): SeasonsTag
  seasonsTrailer(seasonId: Int!, videoId: UUID!): SeasonsTrailer
  seasonsTvshowGenre(seasonId: Int!, tvshowGenresId: Int!): SeasonsTvshowGenre
  snapshot(id: Int!): Snapshot
  tvshowGenre(id: Int!): TvshowGenre
  tvshow(id: Int!): Tvshow
  tvshowByExternalId(externalId: String!): Tvshow
  tvshowsCast(tvshowId: Int!, name: String!): TvshowsCast
  tvshowsLicense(id: Int!): TvshowsLicense
  tvshowsLicensesCountry(tvshowsLicenseId: Int!, code: IsoAlphaTwoCountryCodes!): TvshowsLicensesCountry
  tvshowsProductionCountry(tvshowId: Int!, name: String!): TvshowsProductionCountry
  tvshowsTag(tvshowId: Int!, name: String!): TvshowsTag
  tvshowsTrailer(tvshowId: Int!, videoId: UUID!): TvshowsTrailer
  tvshowsTvshowGenre(tvshowId: Int!, tvshowGenresId: Int!): TvshowsTvshowGenre
  getCollectionsTagsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetCollectionsTagsValuesConnection
  getEpisodesCastsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetEpisodesCastsValuesConnection
  getEpisodesProductionCountriesValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetEpisodesProductionCountriesValuesConnection
  getEpisodesTagsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetEpisodesTagsValuesConnection
  getMoviesCastsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetMoviesCastsValuesConnection
  getMoviesProductionCountriesValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetMoviesProductionCountriesValuesConnection
  getMoviesTagsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetMoviesTagsValuesConnection
  getSeasonsCastsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetSeasonsCastsValuesConnection
  getSeasonsProductionCountriesValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetSeasonsProductionCountriesValuesConnection
  getSeasonsTagsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetSeasonsTagsValuesConnection
  getTvshowsCastsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetTvshowsCastsValuesConnection
  getTvshowsProductionCountriesValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetTvshowsProductionCountriesValuesConnection
  getTvshowsTagsValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): GetTvshowsTagsValuesConnection
}

"""
A connection to a list of `CollectionRelation` values.
@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type CollectionRelationsConnection {
  """A list of `CollectionRelation` objects."""
  nodes: [CollectionRelation!]!

  """
  A list of edges which contains the `CollectionRelation` and cursor to aid in pagination.
  """
  edges: [CollectionRelationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionRelation` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN"""
type CollectionRelation {
  id: Int!
  collectionId: Int!
  sortOrder: Int!
  movieId: Int
  tvshowId: Int
  seasonId: Int
  episodeId: Int

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode
}

"""@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN"""
type Collection {
  id: Int!
  title: String!
  externalId: String
  synopsis: String
  description: String
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  publishStatus: PublishStatus!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!

  """Reads and enables pagination through a set of `CollectionsTag`."""
  collectionsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsTagFilter
  ): CollectionsTagsConnection!

  """Reads and enables pagination through a set of `CollectionsImage`."""
  collectionsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsImageFilter
  ): CollectionsImagesConnection!

  """Reads and enables pagination through a set of `CollectionsSnapshot`."""
  collectionsSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsSnapshot`."""
    orderBy: [CollectionsSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsSnapshotFilter
  ): CollectionsSnapshotsConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

enum PublishStatus {
  """Not published"""
  NOT_PUBLISHED

  """Published"""
  PUBLISHED

  """Changed"""
  CHANGED
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `CollectionRelation`."""
enum CollectionRelationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  SORT_ORDER_ASC
  SORT_ORDER_DESC
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  SEASON_ID_ASC
  SEASON_ID_DESC
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionRelation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionRelationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """Checks for equality with the object’s `sortOrder` field."""
  sortOrder: Int

  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int
}

"""
A filter to be used against `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input CollectionRelationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `sortOrder` field."""
  sortOrder: IntFilter

  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """A related `movie` exists."""
  movieExists: Boolean

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """A related `tvshow` exists."""
  tvshowExists: Boolean

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """A related `season` exists."""
  seasonExists: Boolean

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """A related `episode` exists."""
  episodeExists: Boolean

  """Checks for all expressions in this list."""
  and: [CollectionRelationFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionRelationFilter!]

  """Negates the expression."""
  not: CollectionRelationFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against `Collection` object types. All fields are combined with a logical ‘and.’
"""
input CollectionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: CollectionToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `collectionsTags` relation."""
  collectionsTags: CollectionToManyCollectionsTagFilter

  """Some related `collectionsTags` exist."""
  collectionsTagsExist: Boolean

  """Filter by the object’s `collectionsImages` relation."""
  collectionsImages: CollectionToManyCollectionsImageFilter

  """Some related `collectionsImages` exist."""
  collectionsImagesExist: Boolean

  """Filter by the object’s `collectionsSnapshots` relation."""
  collectionsSnapshots: CollectionToManyCollectionsSnapshotFilter

  """Some related `collectionsSnapshots` exist."""
  collectionsSnapshotsExist: Boolean

  """Checks for all expressions in this list."""
  and: [CollectionFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionFilter!]

  """Negates the expression."""
  not: CollectionFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against PublishStatus fields. All fields are combined with a logical ‘and.’
"""
input PublishStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: PublishStatus

  """Not equal to the specified value."""
  notEqualTo: PublishStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: PublishStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: PublishStatus

  """Included in the specified list."""
  in: [PublishStatus!]

  """Not included in the specified list."""
  notIn: [PublishStatus!]

  """Less than the specified value."""
  lessThan: PublishStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: PublishStatus

  """Greater than the specified value."""
  greaterThan: PublishStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: PublishStatus
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `CollectionsTag` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyCollectionsTagFilter {
  """
  Every related `CollectionsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionsTagFilter

  """
  Some related `CollectionsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionsTagFilter

  """
  No related `CollectionsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionsTagFilter
}

"""
A filter to be used against `CollectionsTag` object types. All fields are combined with a logical ‘and.’
"""
input CollectionsTagFilter {
  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Checks for all expressions in this list."""
  and: [CollectionsTagFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionsTagFilter!]

  """Negates the expression."""
  not: CollectionsTagFilter
}

"""
A filter to be used against many `CollectionsImage` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyCollectionsImageFilter {
  """
  Every related `CollectionsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionsImageFilter

  """
  Some related `CollectionsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionsImageFilter

  """
  No related `CollectionsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionsImageFilter
}

"""
A filter to be used against `CollectionsImage` object types. All fields are combined with a logical ‘and.’
"""
input CollectionsImageFilter {
  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: UUIDFilter

  """Filter by the object’s `imageType` field."""
  imageType: CollectionImageTypeFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Checks for all expressions in this list."""
  and: [CollectionsImageFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionsImageFilter!]

  """Negates the expression."""
  not: CollectionsImageFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against CollectionImageType fields. All fields are combined with a logical ‘and.’
"""
input CollectionImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: CollectionImageType

  """Not equal to the specified value."""
  notEqualTo: CollectionImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CollectionImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CollectionImageType

  """Included in the specified list."""
  in: [CollectionImageType!]

  """Not included in the specified list."""
  notIn: [CollectionImageType!]

  """Less than the specified value."""
  lessThan: CollectionImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CollectionImageType

  """Greater than the specified value."""
  greaterThan: CollectionImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CollectionImageType
}

enum CollectionImageType {
  """Cover"""
  COVER
}

"""
A filter to be used against many `CollectionsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyCollectionsSnapshotFilter {
  """
  Every related `CollectionsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionsSnapshotFilter

  """
  Some related `CollectionsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionsSnapshotFilter

  """
  No related `CollectionsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionsSnapshotFilter
}

"""
A filter to be used against `CollectionsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input CollectionsSnapshotFilter {
  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: IntFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Filter by the object’s `snapshot` relation."""
  snapshot: SnapshotFilter

  """Checks for all expressions in this list."""
  and: [CollectionsSnapshotFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionsSnapshotFilter!]

  """Negates the expression."""
  not: CollectionsSnapshotFilter
}

"""
A filter to be used against `Snapshot` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `entityId` field."""
  entityId: IntFilter

  """Filter by the object’s `publishId` field."""
  publishId: StringFilter

  """Filter by the object’s `jobId` field."""
  jobId: StringFilter

  """Filter by the object’s `snapshotNo` field."""
  snapshotNo: IntFilter

  """Filter by the object’s `entityTitle` field."""
  entityTitle: StringFilter

  """Filter by the object’s `entityType` field."""
  entityType: EntityTypeFilter

  """Filter by the object’s `validationStatus` field."""
  validationStatus: SnapshotValidationStatusFilter

  """Filter by the object’s `snapshotState` field."""
  snapshotState: SnapshotStateFilter

  """Filter by the object’s `scheduledDate` field."""
  scheduledDate: DatetimeFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `unpublishedDate` field."""
  unpublishedDate: DatetimeFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `isListSnapshot` field."""
  isListSnapshot: BooleanFilter

  """Filter by the object’s `snapshotValidationResults` relation."""
  snapshotValidationResults: SnapshotToManySnapshotValidationResultFilter

  """Some related `snapshotValidationResults` exist."""
  snapshotValidationResultsExist: Boolean

  """Filter by the object’s `moviesSnapshots` relation."""
  moviesSnapshots: SnapshotToManyMoviesSnapshotFilter

  """Some related `moviesSnapshots` exist."""
  moviesSnapshotsExist: Boolean

  """Filter by the object’s `tvshowsSnapshots` relation."""
  tvshowsSnapshots: SnapshotToManyTvshowsSnapshotFilter

  """Some related `tvshowsSnapshots` exist."""
  tvshowsSnapshotsExist: Boolean

  """Filter by the object’s `seasonsSnapshots` relation."""
  seasonsSnapshots: SnapshotToManySeasonsSnapshotFilter

  """Some related `seasonsSnapshots` exist."""
  seasonsSnapshotsExist: Boolean

  """Filter by the object’s `episodesSnapshots` relation."""
  episodesSnapshots: SnapshotToManyEpisodesSnapshotFilter

  """Some related `episodesSnapshots` exist."""
  episodesSnapshotsExist: Boolean

  """Filter by the object’s `collectionsSnapshots` relation."""
  collectionsSnapshots: SnapshotToManyCollectionsSnapshotFilter

  """Some related `collectionsSnapshots` exist."""
  collectionsSnapshotsExist: Boolean

  """Checks for all expressions in this list."""
  and: [SnapshotFilter!]

  """Checks for any expressions in this list."""
  or: [SnapshotFilter!]

  """Negates the expression."""
  not: SnapshotFilter
}

"""
A filter to be used against EntityType fields. All fields are combined with a logical ‘and.’
"""
input EntityTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: EntityType

  """Not equal to the specified value."""
  notEqualTo: EntityType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: EntityType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: EntityType

  """Included in the specified list."""
  in: [EntityType!]

  """Not included in the specified list."""
  notIn: [EntityType!]

  """Less than the specified value."""
  lessThan: EntityType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: EntityType

  """Greater than the specified value."""
  greaterThan: EntityType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: EntityType
}

enum EntityType {
  """Movie"""
  MOVIE

  """Movie Genre"""
  MOVIE_GENRE

  """Tvshow"""
  TVSHOW

  """Tvshow Genre"""
  TVSHOW_GENRE

  """Season"""
  SEASON

  """Episode"""
  EPISODE

  """Collection"""
  COLLECTION
}

"""
A filter to be used against SnapshotValidationStatus fields. All fields are combined with a logical ‘and.’
"""
input SnapshotValidationStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: SnapshotValidationStatus

  """Not equal to the specified value."""
  notEqualTo: SnapshotValidationStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: SnapshotValidationStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: SnapshotValidationStatus

  """Included in the specified list."""
  in: [SnapshotValidationStatus!]

  """Not included in the specified list."""
  notIn: [SnapshotValidationStatus!]

  """Less than the specified value."""
  lessThan: SnapshotValidationStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: SnapshotValidationStatus

  """Greater than the specified value."""
  greaterThan: SnapshotValidationStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: SnapshotValidationStatus
}

enum SnapshotValidationStatus {
  """OK"""
  OK

  """Warnings"""
  WARNINGS

  """Errors"""
  ERRORS
}

"""
A filter to be used against SnapshotState fields. All fields are combined with a logical ‘and.’
"""
input SnapshotStateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: SnapshotState

  """Not equal to the specified value."""
  notEqualTo: SnapshotState

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: SnapshotState

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: SnapshotState

  """Included in the specified list."""
  in: [SnapshotState!]

  """Not included in the specified list."""
  notIn: [SnapshotState!]

  """Less than the specified value."""
  lessThan: SnapshotState

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: SnapshotState

  """Greater than the specified value."""
  greaterThan: SnapshotState

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: SnapshotState
}

enum SnapshotState {
  """Initialization"""
  INITIALIZATION

  """Validation"""
  VALIDATION

  """Invalid"""
  INVALID

  """Ready"""
  READY

  """Scheduled"""
  SCHEDULED

  """Published"""
  PUBLISHED

  """Unpublished"""
  UNPUBLISHED

  """Version Mismatch"""
  VERSION_MISMATCH

  """Error"""
  ERROR
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
A filter to be used against many `SnapshotValidationResult` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotToManySnapshotValidationResultFilter {
  """
  Every related `SnapshotValidationResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SnapshotValidationResultFilter

  """
  Some related `SnapshotValidationResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SnapshotValidationResultFilter

  """
  No related `SnapshotValidationResult` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SnapshotValidationResultFilter
}

"""
A filter to be used against `SnapshotValidationResult` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotValidationResultFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: IntFilter

  """Filter by the object’s `severity` field."""
  severity: SnapshotValidationIssueSeverityFilter

  """Filter by the object’s `context` field."""
  context: SnapshotValidationIssueContextFilter

  """Filter by the object’s `message` field."""
  message: StringFilter

  """Filter by the object’s `entityType` field."""
  entityType: EntityTypeFilter

  """Filter by the object’s `snapshot` relation."""
  snapshot: SnapshotFilter

  """Checks for all expressions in this list."""
  and: [SnapshotValidationResultFilter!]

  """Checks for any expressions in this list."""
  or: [SnapshotValidationResultFilter!]

  """Negates the expression."""
  not: SnapshotValidationResultFilter
}

"""
A filter to be used against SnapshotValidationIssueSeverity fields. All fields are combined with a logical ‘and.’
"""
input SnapshotValidationIssueSeverityFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: SnapshotValidationIssueSeverity

  """Not equal to the specified value."""
  notEqualTo: SnapshotValidationIssueSeverity

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: SnapshotValidationIssueSeverity

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: SnapshotValidationIssueSeverity

  """Included in the specified list."""
  in: [SnapshotValidationIssueSeverity!]

  """Not included in the specified list."""
  notIn: [SnapshotValidationIssueSeverity!]

  """Less than the specified value."""
  lessThan: SnapshotValidationIssueSeverity

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: SnapshotValidationIssueSeverity

  """Greater than the specified value."""
  greaterThan: SnapshotValidationIssueSeverity

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: SnapshotValidationIssueSeverity
}

enum SnapshotValidationIssueSeverity {
  """Warning"""
  WARNING

  """Error"""
  ERROR
}

"""
A filter to be used against SnapshotValidationIssueContext fields. All fields are combined with a logical ‘and.’
"""
input SnapshotValidationIssueContextFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: SnapshotValidationIssueContext

  """Not equal to the specified value."""
  notEqualTo: SnapshotValidationIssueContext

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: SnapshotValidationIssueContext

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: SnapshotValidationIssueContext

  """Included in the specified list."""
  in: [SnapshotValidationIssueContext!]

  """Not included in the specified list."""
  notIn: [SnapshotValidationIssueContext!]

  """Less than the specified value."""
  lessThan: SnapshotValidationIssueContext

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: SnapshotValidationIssueContext

  """Greater than the specified value."""
  greaterThan: SnapshotValidationIssueContext

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: SnapshotValidationIssueContext
}

enum SnapshotValidationIssueContext {
  """Metadata"""
  METADATA

  """Licensing"""
  LICENSING

  """Image"""
  IMAGE

  """Video"""
  VIDEO
}

"""
A filter to be used against many `MoviesSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotToManyMoviesSnapshotFilter {
  """
  Every related `MoviesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesSnapshotFilter

  """
  Some related `MoviesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesSnapshotFilter

  """
  No related `MoviesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesSnapshotFilter
}

"""
A filter to be used against `MoviesSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input MoviesSnapshotFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: IntFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Filter by the object’s `snapshot` relation."""
  snapshot: SnapshotFilter

  """Checks for all expressions in this list."""
  and: [MoviesSnapshotFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesSnapshotFilter!]

  """Negates the expression."""
  not: MoviesSnapshotFilter
}

"""
A filter to be used against `Movie` object types. All fields are combined with a logical ‘and.’
"""
input MovieFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `originalTitle` field."""
  originalTitle: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `mainVideoId` field."""
  mainVideoId: UUIDFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `moviesTags` relation."""
  moviesTags: MovieToManyMoviesTagFilter

  """Some related `moviesTags` exist."""
  moviesTagsExist: Boolean

  """Filter by the object’s `moviesCasts` relation."""
  moviesCasts: MovieToManyMoviesCastFilter

  """Some related `moviesCasts` exist."""
  moviesCastsExist: Boolean

  """Filter by the object’s `moviesLicenses` relation."""
  moviesLicenses: MovieToManyMoviesLicenseFilter

  """Some related `moviesLicenses` exist."""
  moviesLicensesExist: Boolean

  """Filter by the object’s `moviesProductionCountries` relation."""
  moviesProductionCountries: MovieToManyMoviesProductionCountryFilter

  """Some related `moviesProductionCountries` exist."""
  moviesProductionCountriesExist: Boolean

  """Filter by the object’s `moviesMovieGenres` relation."""
  moviesMovieGenres: MovieToManyMoviesMovieGenreFilter

  """Some related `moviesMovieGenres` exist."""
  moviesMovieGenresExist: Boolean

  """Filter by the object’s `moviesImages` relation."""
  moviesImages: MovieToManyMoviesImageFilter

  """Some related `moviesImages` exist."""
  moviesImagesExist: Boolean

  """Filter by the object’s `moviesTrailers` relation."""
  moviesTrailers: MovieToManyMoviesTrailerFilter

  """Some related `moviesTrailers` exist."""
  moviesTrailersExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: MovieToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `moviesSnapshots` relation."""
  moviesSnapshots: MovieToManyMoviesSnapshotFilter

  """Some related `moviesSnapshots` exist."""
  moviesSnapshotsExist: Boolean

  """Checks for all expressions in this list."""
  and: [MovieFilter!]

  """Checks for any expressions in this list."""
  or: [MovieFilter!]

  """Negates the expression."""
  not: MovieFilter
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against many `MoviesTag` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesTagFilter {
  """
  Every related `MoviesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesTagFilter

  """
  Some related `MoviesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesTagFilter

  """
  No related `MoviesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesTagFilter
}

"""
A filter to be used against `MoviesTag` object types. All fields are combined with a logical ‘and.’
"""
input MoviesTagFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesTagFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesTagFilter!]

  """Negates the expression."""
  not: MoviesTagFilter
}

"""
A filter to be used against many `MoviesCast` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesCastFilter {
  """
  Every related `MoviesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesCastFilter

  """
  Some related `MoviesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesCastFilter

  """
  No related `MoviesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesCastFilter
}

"""
A filter to be used against `MoviesCast` object types. All fields are combined with a logical ‘and.’
"""
input MoviesCastFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesCastFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesCastFilter!]

  """Negates the expression."""
  not: MoviesCastFilter
}

"""
A filter to be used against many `MoviesLicense` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesLicenseFilter {
  """
  Every related `MoviesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesLicenseFilter

  """
  Some related `MoviesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesLicenseFilter

  """
  No related `MoviesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesLicenseFilter
}

"""
A filter to be used against `MoviesLicense` object types. All fields are combined with a logical ‘and.’
"""
input MoviesLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `moviesLicensesCountries` relation."""
  moviesLicensesCountries: MoviesLicenseToManyMoviesLicensesCountryFilter

  """Some related `moviesLicensesCountries` exist."""
  moviesLicensesCountriesExist: Boolean

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesLicenseFilter!]

  """Negates the expression."""
  not: MoviesLicenseFilter
}

"""
A filter to be used against many `MoviesLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input MoviesLicenseToManyMoviesLicensesCountryFilter {
  """
  Every related `MoviesLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesLicensesCountryFilter

  """
  Some related `MoviesLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesLicensesCountryFilter

  """
  No related `MoviesLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesLicensesCountryFilter
}

"""
A filter to be used against `MoviesLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input MoviesLicensesCountryFilter {
  """Filter by the object’s `moviesLicenseId` field."""
  moviesLicenseId: IntFilter

  """Filter by the object’s `code` field."""
  code: IsoAlphaTwoCountryCodesFilter

  """Filter by the object’s `moviesLicense` relation."""
  moviesLicense: MoviesLicenseFilter

  """Checks for all expressions in this list."""
  and: [MoviesLicensesCountryFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesLicensesCountryFilter!]

  """Negates the expression."""
  not: MoviesLicensesCountryFilter
}

"""
A filter to be used against IsoAlphaTwoCountryCodes fields. All fields are combined with a logical ‘and.’
"""
input IsoAlphaTwoCountryCodesFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IsoAlphaTwoCountryCodes

  """Not equal to the specified value."""
  notEqualTo: IsoAlphaTwoCountryCodes

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IsoAlphaTwoCountryCodes

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IsoAlphaTwoCountryCodes

  """Included in the specified list."""
  in: [IsoAlphaTwoCountryCodes!]

  """Not included in the specified list."""
  notIn: [IsoAlphaTwoCountryCodes!]

  """Less than the specified value."""
  lessThan: IsoAlphaTwoCountryCodes

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IsoAlphaTwoCountryCodes

  """Greater than the specified value."""
  greaterThan: IsoAlphaTwoCountryCodes

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IsoAlphaTwoCountryCodes
}

enum IsoAlphaTwoCountryCodes {
  AW
  AF
  AO
  AI
  AX
  AL
  AD
  AE
  AR
  AM
  AS
  AQ
  TF
  AG
  AU
  AT
  AZ
  BI
  BE
  BJ
  BQ
  BF
  BD
  BG
  BH
  BS
  BA
  BL
  BY
  BZ
  BM
  BO
  BR
  BB
  BN
  BT
  BV
  BW
  CF
  CA
  CC
  CH
  CL
  CN
  CI
  CM
  CD
  CG
  CK
  CO
  KM
  CV
  CR
  CU
  CW
  CX
  KY
  CY
  CZ
  DE
  DJ
  DM
  DK
  DO
  DZ
  EC
  EG
  ER
  EH
  ES
  EE
  ET
  FI
  FJ
  FK
  FR
  FO
  FM
  GA
  GB
  GE
  GG
  GH
  GI
  GN
  GP
  GM
  GW
  GQ
  GR
  GD
  GL
  GT
  GF
  GU
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IM
  IN
  IO
  IE
  IR
  IQ
  IS
  IL
  IT
  JM
  JE
  JO
  JP
  KZ
  KE
  KG
  KH
  KI
  KN
  KR
  KW
  LA
  LB
  LR
  LY
  LC
  LI
  LK
  LS
  LT
  LU
  LV
  MO
  MF
  MA
  MC
  MD
  MG
  MV
  MX
  MH
  MK
  ML
  MT
  MM
  ME
  MN
  MP
  MZ
  MR
  MS
  MQ
  MU
  MW
  MY
  YT
  NA
  NC
  NE
  NF
  NG
  NI
  NU
  NL
  NO
  NP
  NR
  NZ
  OM
  PK
  PA
  PN
  PE
  PH
  PW
  PG
  PL
  PR
  KP
  PT
  PY
  PS
  PF
  QA
  RE
  RO
  RU
  RW
  SA
  SD
  SN
  SG
  GS
  SH
  SJ
  SB
  SL
  SV
  SM
  SO
  PM
  RS
  SS
  ST
  SR
  SK
  SI
  SE
  SZ
  SX
  SC
  SY
  TC
  TD
  TG
  TH
  TJ
  TK
  TM
  TL
  TO
  TT
  TN
  TR
  TV
  TW
  TZ
  UG
  UA
  UM
  UY
  US
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  ZA
  ZM
  ZW
}

"""
A filter to be used against many `MoviesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesProductionCountryFilter {
  """
  Every related `MoviesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesProductionCountryFilter

  """
  Some related `MoviesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesProductionCountryFilter

  """
  No related `MoviesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesProductionCountryFilter
}

"""
A filter to be used against `MoviesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input MoviesProductionCountryFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesProductionCountryFilter!]

  """Negates the expression."""
  not: MoviesProductionCountryFilter
}

"""
A filter to be used against many `MoviesMovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesMovieGenreFilter {
  """
  Every related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesMovieGenreFilter

  """
  Some related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesMovieGenreFilter

  """
  No related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesMovieGenreFilter
}

"""
A filter to be used against `MoviesMovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MoviesMovieGenreFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `movieGenresId` field."""
  movieGenresId: IntFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Filter by the object’s `movieGenres` relation."""
  movieGenres: MovieGenreFilter

  """Checks for all expressions in this list."""
  and: [MoviesMovieGenreFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesMovieGenreFilter!]

  """Negates the expression."""
  not: MoviesMovieGenreFilter
}

"""
A filter to be used against `MovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MovieGenreFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `sortOrder` field."""
  sortOrder: IntFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `moviesMovieGenresByMovieGenresId` relation."""
  moviesMovieGenresByMovieGenresId: MovieGenreToManyMoviesMovieGenreFilter

  """Some related `moviesMovieGenresByMovieGenresId` exist."""
  moviesMovieGenresByMovieGenresIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [MovieGenreFilter!]

  """Checks for any expressions in this list."""
  or: [MovieGenreFilter!]

  """Negates the expression."""
  not: MovieGenreFilter
}

"""
A filter to be used against many `MoviesMovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MovieGenreToManyMoviesMovieGenreFilter {
  """
  Every related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesMovieGenreFilter

  """
  Some related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesMovieGenreFilter

  """
  No related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesMovieGenreFilter
}

"""
A filter to be used against many `MoviesImage` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesImageFilter {
  """
  Every related `MoviesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesImageFilter

  """
  Some related `MoviesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesImageFilter

  """
  No related `MoviesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesImageFilter
}

"""
A filter to be used against `MoviesImage` object types. All fields are combined with a logical ‘and.’
"""
input MoviesImageFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: UUIDFilter

  """Filter by the object’s `imageType` field."""
  imageType: MovieImageTypeFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesImageFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesImageFilter!]

  """Negates the expression."""
  not: MoviesImageFilter
}

"""
A filter to be used against MovieImageType fields. All fields are combined with a logical ‘and.’
"""
input MovieImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: MovieImageType

  """Not equal to the specified value."""
  notEqualTo: MovieImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: MovieImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: MovieImageType

  """Included in the specified list."""
  in: [MovieImageType!]

  """Not included in the specified list."""
  notIn: [MovieImageType!]

  """Less than the specified value."""
  lessThan: MovieImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: MovieImageType

  """Greater than the specified value."""
  greaterThan: MovieImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: MovieImageType
}

enum MovieImageType {
  """Cover"""
  COVER

  """Teaser"""
  TEASER
}

"""
A filter to be used against many `MoviesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesTrailerFilter {
  """
  Every related `MoviesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesTrailerFilter

  """
  Some related `MoviesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesTrailerFilter

  """
  No related `MoviesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesTrailerFilter
}

"""
A filter to be used against `MoviesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input MoviesTrailerFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: UUIDFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesTrailerFilter!]

  """Negates the expression."""
  not: MoviesTrailerFilter
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `MoviesSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesSnapshotFilter {
  """
  Every related `MoviesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesSnapshotFilter

  """
  Some related `MoviesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesSnapshotFilter

  """
  No related `MoviesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesSnapshotFilter
}

"""
A filter to be used against many `TvshowsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotToManyTvshowsSnapshotFilter {
  """
  Every related `TvshowsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsSnapshotFilter

  """
  Some related `TvshowsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsSnapshotFilter

  """
  No related `TvshowsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsSnapshotFilter
}

"""
A filter to be used against `TvshowsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsSnapshotFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: IntFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Filter by the object’s `snapshot` relation."""
  snapshot: SnapshotFilter

  """Checks for all expressions in this list."""
  and: [TvshowsSnapshotFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsSnapshotFilter!]

  """Negates the expression."""
  not: TvshowsSnapshotFilter
}

"""
A filter to be used against `Tvshow` object types. All fields are combined with a logical ‘and.’
"""
input TvshowFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `originalTitle` field."""
  originalTitle: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `tvshowsTags` relation."""
  tvshowsTags: TvshowToManyTvshowsTagFilter

  """Some related `tvshowsTags` exist."""
  tvshowsTagsExist: Boolean

  """Filter by the object’s `tvshowsCasts` relation."""
  tvshowsCasts: TvshowToManyTvshowsCastFilter

  """Some related `tvshowsCasts` exist."""
  tvshowsCastsExist: Boolean

  """Filter by the object’s `tvshowsLicenses` relation."""
  tvshowsLicenses: TvshowToManyTvshowsLicenseFilter

  """Some related `tvshowsLicenses` exist."""
  tvshowsLicensesExist: Boolean

  """Filter by the object’s `tvshowsProductionCountries` relation."""
  tvshowsProductionCountries: TvshowToManyTvshowsProductionCountryFilter

  """Some related `tvshowsProductionCountries` exist."""
  tvshowsProductionCountriesExist: Boolean

  """Filter by the object’s `tvshowsTvshowGenres` relation."""
  tvshowsTvshowGenres: TvshowToManyTvshowsTvshowGenreFilter

  """Some related `tvshowsTvshowGenres` exist."""
  tvshowsTvshowGenresExist: Boolean

  """Filter by the object’s `tvshowsImages` relation."""
  tvshowsImages: TvshowToManyTvshowsImageFilter

  """Some related `tvshowsImages` exist."""
  tvshowsImagesExist: Boolean

  """Filter by the object’s `tvshowsTrailers` relation."""
  tvshowsTrailers: TvshowToManyTvshowsTrailerFilter

  """Some related `tvshowsTrailers` exist."""
  tvshowsTrailersExist: Boolean

  """Filter by the object’s `seasons` relation."""
  seasons: TvshowToManySeasonFilter

  """Some related `seasons` exist."""
  seasonsExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: TvshowToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `tvshowsSnapshots` relation."""
  tvshowsSnapshots: TvshowToManyTvshowsSnapshotFilter

  """Some related `tvshowsSnapshots` exist."""
  tvshowsSnapshotsExist: Boolean

  """Checks for all expressions in this list."""
  and: [TvshowFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowFilter!]

  """Negates the expression."""
  not: TvshowFilter
}

"""
A filter to be used against many `TvshowsTag` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsTagFilter {
  """
  Every related `TvshowsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTagFilter

  """
  Some related `TvshowsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTagFilter

  """
  No related `TvshowsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTagFilter
}

"""
A filter to be used against `TvshowsTag` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsTagFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsTagFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsTagFilter!]

  """Negates the expression."""
  not: TvshowsTagFilter
}

"""
A filter to be used against many `TvshowsCast` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsCastFilter {
  """
  Every related `TvshowsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsCastFilter

  """
  Some related `TvshowsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsCastFilter

  """
  No related `TvshowsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsCastFilter
}

"""
A filter to be used against `TvshowsCast` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsCastFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsCastFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsCastFilter!]

  """Negates the expression."""
  not: TvshowsCastFilter
}

"""
A filter to be used against many `TvshowsLicense` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsLicenseFilter {
  """
  Every related `TvshowsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsLicenseFilter

  """
  Some related `TvshowsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsLicenseFilter

  """
  No related `TvshowsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsLicenseFilter
}

"""
A filter to be used against `TvshowsLicense` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `tvshowsLicensesCountries` relation."""
  tvshowsLicensesCountries: TvshowsLicenseToManyTvshowsLicensesCountryFilter

  """Some related `tvshowsLicensesCountries` exist."""
  tvshowsLicensesCountriesExist: Boolean

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsLicenseFilter!]

  """Negates the expression."""
  not: TvshowsLicenseFilter
}

"""
A filter to be used against many `TvshowsLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsLicenseToManyTvshowsLicensesCountryFilter {
  """
  Every related `TvshowsLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsLicensesCountryFilter

  """
  Some related `TvshowsLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsLicensesCountryFilter

  """
  No related `TvshowsLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsLicensesCountryFilter
}

"""
A filter to be used against `TvshowsLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsLicensesCountryFilter {
  """Filter by the object’s `tvshowsLicenseId` field."""
  tvshowsLicenseId: IntFilter

  """Filter by the object’s `code` field."""
  code: IsoAlphaTwoCountryCodesFilter

  """Filter by the object’s `tvshowsLicense` relation."""
  tvshowsLicense: TvshowsLicenseFilter

  """Checks for all expressions in this list."""
  and: [TvshowsLicensesCountryFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsLicensesCountryFilter!]

  """Negates the expression."""
  not: TvshowsLicensesCountryFilter
}

"""
A filter to be used against many `TvshowsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsProductionCountryFilter {
  """
  Every related `TvshowsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsProductionCountryFilter

  """
  Some related `TvshowsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsProductionCountryFilter

  """
  No related `TvshowsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsProductionCountryFilter
}

"""
A filter to be used against `TvshowsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsProductionCountryFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsProductionCountryFilter!]

  """Negates the expression."""
  not: TvshowsProductionCountryFilter
}

"""
A filter to be used against many `TvshowsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsTvshowGenreFilter {
  """
  Every related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTvshowGenreFilter

  """
  Some related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTvshowGenreFilter

  """
  No related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTvshowGenreFilter
}

"""
A filter to be used against `TvshowsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsTvshowGenreFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `tvshowGenresId` field."""
  tvshowGenresId: IntFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Filter by the object’s `tvshowGenres` relation."""
  tvshowGenres: TvshowGenreFilter

  """Checks for all expressions in this list."""
  and: [TvshowsTvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsTvshowGenreFilter!]

  """Negates the expression."""
  not: TvshowsTvshowGenreFilter
}

"""
A filter to be used against `TvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `sortOrder` field."""
  sortOrder: IntFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `tvshowsTvshowGenresByTvshowGenresId` relation."""
  tvshowsTvshowGenresByTvshowGenresId: TvshowGenreToManyTvshowsTvshowGenreFilter

  """Some related `tvshowsTvshowGenresByTvshowGenresId` exist."""
  tvshowsTvshowGenresByTvshowGenresIdExist: Boolean

  """Filter by the object’s `seasonsTvshowGenresByTvshowGenresId` relation."""
  seasonsTvshowGenresByTvshowGenresId: TvshowGenreToManySeasonsTvshowGenreFilter

  """Some related `seasonsTvshowGenresByTvshowGenresId` exist."""
  seasonsTvshowGenresByTvshowGenresIdExist: Boolean

  """
  Filter by the object’s `episodesTvshowGenresByTvshowGenresId` relation.
  """
  episodesTvshowGenresByTvshowGenresId: TvshowGenreToManyEpisodesTvshowGenreFilter

  """Some related `episodesTvshowGenresByTvshowGenresId` exist."""
  episodesTvshowGenresByTvshowGenresIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [TvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowGenreFilter!]

  """Negates the expression."""
  not: TvshowGenreFilter
}

"""
A filter to be used against many `TvshowsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreToManyTvshowsTvshowGenreFilter {
  """
  Every related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTvshowGenreFilter

  """
  Some related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTvshowGenreFilter

  """
  No related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTvshowGenreFilter
}

"""
A filter to be used against many `SeasonsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreToManySeasonsTvshowGenreFilter {
  """
  Every related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTvshowGenreFilter

  """
  Some related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTvshowGenreFilter

  """
  No related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTvshowGenreFilter
}

"""
A filter to be used against `SeasonsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsTvshowGenreFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `tvshowGenresId` field."""
  tvshowGenresId: IntFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Filter by the object’s `tvshowGenres` relation."""
  tvshowGenres: TvshowGenreFilter

  """Checks for all expressions in this list."""
  and: [SeasonsTvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsTvshowGenreFilter!]

  """Negates the expression."""
  not: SeasonsTvshowGenreFilter
}

"""
A filter to be used against `Season` object types. All fields are combined with a logical ‘and.’
"""
input SeasonFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `seasonsTags` relation."""
  seasonsTags: SeasonToManySeasonsTagFilter

  """Some related `seasonsTags` exist."""
  seasonsTagsExist: Boolean

  """Filter by the object’s `seasonsCasts` relation."""
  seasonsCasts: SeasonToManySeasonsCastFilter

  """Some related `seasonsCasts` exist."""
  seasonsCastsExist: Boolean

  """Filter by the object’s `seasonsLicenses` relation."""
  seasonsLicenses: SeasonToManySeasonsLicenseFilter

  """Some related `seasonsLicenses` exist."""
  seasonsLicensesExist: Boolean

  """Filter by the object’s `seasonsProductionCountries` relation."""
  seasonsProductionCountries: SeasonToManySeasonsProductionCountryFilter

  """Some related `seasonsProductionCountries` exist."""
  seasonsProductionCountriesExist: Boolean

  """Filter by the object’s `seasonsTvshowGenres` relation."""
  seasonsTvshowGenres: SeasonToManySeasonsTvshowGenreFilter

  """Some related `seasonsTvshowGenres` exist."""
  seasonsTvshowGenresExist: Boolean

  """Filter by the object’s `seasonsImages` relation."""
  seasonsImages: SeasonToManySeasonsImageFilter

  """Some related `seasonsImages` exist."""
  seasonsImagesExist: Boolean

  """Filter by the object’s `seasonsTrailers` relation."""
  seasonsTrailers: SeasonToManySeasonsTrailerFilter

  """Some related `seasonsTrailers` exist."""
  seasonsTrailersExist: Boolean

  """Filter by the object’s `episodes` relation."""
  episodes: SeasonToManyEpisodeFilter

  """Some related `episodes` exist."""
  episodesExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: SeasonToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `seasonsSnapshots` relation."""
  seasonsSnapshots: SeasonToManySeasonsSnapshotFilter

  """Some related `seasonsSnapshots` exist."""
  seasonsSnapshotsExist: Boolean

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """A related `tvshow` exists."""
  tvshowExists: Boolean

  """Checks for all expressions in this list."""
  and: [SeasonFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonFilter!]

  """Negates the expression."""
  not: SeasonFilter
}

"""
A filter to be used against many `SeasonsTag` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsTagFilter {
  """
  Every related `SeasonsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTagFilter

  """
  Some related `SeasonsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTagFilter

  """
  No related `SeasonsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTagFilter
}

"""
A filter to be used against `SeasonsTag` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsTagFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsTagFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsTagFilter!]

  """Negates the expression."""
  not: SeasonsTagFilter
}

"""
A filter to be used against many `SeasonsCast` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsCastFilter {
  """
  Every related `SeasonsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsCastFilter

  """
  Some related `SeasonsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsCastFilter

  """
  No related `SeasonsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsCastFilter
}

"""
A filter to be used against `SeasonsCast` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsCastFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsCastFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsCastFilter!]

  """Negates the expression."""
  not: SeasonsCastFilter
}

"""
A filter to be used against many `SeasonsLicense` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsLicenseFilter {
  """
  Every related `SeasonsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsLicenseFilter

  """
  Some related `SeasonsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsLicenseFilter

  """
  No related `SeasonsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsLicenseFilter
}

"""
A filter to be used against `SeasonsLicense` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `seasonsLicensesCountries` relation."""
  seasonsLicensesCountries: SeasonsLicenseToManySeasonsLicensesCountryFilter

  """Some related `seasonsLicensesCountries` exist."""
  seasonsLicensesCountriesExist: Boolean

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsLicenseFilter!]

  """Negates the expression."""
  not: SeasonsLicenseFilter
}

"""
A filter to be used against many `SeasonsLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsLicenseToManySeasonsLicensesCountryFilter {
  """
  Every related `SeasonsLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsLicensesCountryFilter

  """
  Some related `SeasonsLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsLicensesCountryFilter

  """
  No related `SeasonsLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsLicensesCountryFilter
}

"""
A filter to be used against `SeasonsLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsLicensesCountryFilter {
  """Filter by the object’s `seasonsLicenseId` field."""
  seasonsLicenseId: IntFilter

  """Filter by the object’s `code` field."""
  code: IsoAlphaTwoCountryCodesFilter

  """Filter by the object’s `seasonsLicense` relation."""
  seasonsLicense: SeasonsLicenseFilter

  """Checks for all expressions in this list."""
  and: [SeasonsLicensesCountryFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsLicensesCountryFilter!]

  """Negates the expression."""
  not: SeasonsLicensesCountryFilter
}

"""
A filter to be used against many `SeasonsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsProductionCountryFilter {
  """
  Every related `SeasonsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsProductionCountryFilter

  """
  Some related `SeasonsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsProductionCountryFilter

  """
  No related `SeasonsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsProductionCountryFilter
}

"""
A filter to be used against `SeasonsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsProductionCountryFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsProductionCountryFilter!]

  """Negates the expression."""
  not: SeasonsProductionCountryFilter
}

"""
A filter to be used against many `SeasonsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsTvshowGenreFilter {
  """
  Every related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTvshowGenreFilter

  """
  Some related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTvshowGenreFilter

  """
  No related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTvshowGenreFilter
}

"""
A filter to be used against many `SeasonsImage` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsImageFilter {
  """
  Every related `SeasonsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsImageFilter

  """
  Some related `SeasonsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsImageFilter

  """
  No related `SeasonsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsImageFilter
}

"""
A filter to be used against `SeasonsImage` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsImageFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: UUIDFilter

  """Filter by the object’s `imageType` field."""
  imageType: SeasonImageTypeFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsImageFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsImageFilter!]

  """Negates the expression."""
  not: SeasonsImageFilter
}

"""
A filter to be used against SeasonImageType fields. All fields are combined with a logical ‘and.’
"""
input SeasonImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: SeasonImageType

  """Not equal to the specified value."""
  notEqualTo: SeasonImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: SeasonImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: SeasonImageType

  """Included in the specified list."""
  in: [SeasonImageType!]

  """Not included in the specified list."""
  notIn: [SeasonImageType!]

  """Less than the specified value."""
  lessThan: SeasonImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: SeasonImageType

  """Greater than the specified value."""
  greaterThan: SeasonImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: SeasonImageType
}

enum SeasonImageType {
  """Cover"""
  COVER

  """Teaser"""
  TEASER
}

"""
A filter to be used against many `SeasonsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsTrailerFilter {
  """
  Every related `SeasonsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTrailerFilter

  """
  Some related `SeasonsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTrailerFilter

  """
  No related `SeasonsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTrailerFilter
}

"""
A filter to be used against `SeasonsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsTrailerFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: UUIDFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsTrailerFilter!]

  """Negates the expression."""
  not: SeasonsTrailerFilter
}

"""
A filter to be used against many `Episode` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManyEpisodeFilter {
  """
  Every related `Episode` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodeFilter

  """
  Some related `Episode` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodeFilter

  """
  No related `Episode` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodeFilter
}

"""
A filter to be used against `Episode` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `originalTitle` field."""
  originalTitle: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `mainVideoId` field."""
  mainVideoId: UUIDFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `episodesTags` relation."""
  episodesTags: EpisodeToManyEpisodesTagFilter

  """Some related `episodesTags` exist."""
  episodesTagsExist: Boolean

  """Filter by the object’s `episodesCasts` relation."""
  episodesCasts: EpisodeToManyEpisodesCastFilter

  """Some related `episodesCasts` exist."""
  episodesCastsExist: Boolean

  """Filter by the object’s `episodesLicenses` relation."""
  episodesLicenses: EpisodeToManyEpisodesLicenseFilter

  """Some related `episodesLicenses` exist."""
  episodesLicensesExist: Boolean

  """Filter by the object’s `episodesProductionCountries` relation."""
  episodesProductionCountries: EpisodeToManyEpisodesProductionCountryFilter

  """Some related `episodesProductionCountries` exist."""
  episodesProductionCountriesExist: Boolean

  """Filter by the object’s `episodesTvshowGenres` relation."""
  episodesTvshowGenres: EpisodeToManyEpisodesTvshowGenreFilter

  """Some related `episodesTvshowGenres` exist."""
  episodesTvshowGenresExist: Boolean

  """Filter by the object’s `episodesImages` relation."""
  episodesImages: EpisodeToManyEpisodesImageFilter

  """Some related `episodesImages` exist."""
  episodesImagesExist: Boolean

  """Filter by the object’s `episodesTrailers` relation."""
  episodesTrailers: EpisodeToManyEpisodesTrailerFilter

  """Some related `episodesTrailers` exist."""
  episodesTrailersExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: EpisodeToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `episodesSnapshots` relation."""
  episodesSnapshots: EpisodeToManyEpisodesSnapshotFilter

  """Some related `episodesSnapshots` exist."""
  episodesSnapshotsExist: Boolean

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """A related `season` exists."""
  seasonExists: Boolean

  """Checks for all expressions in this list."""
  and: [EpisodeFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodeFilter!]

  """Negates the expression."""
  not: EpisodeFilter
}

"""
A filter to be used against many `EpisodesTag` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesTagFilter {
  """
  Every related `EpisodesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTagFilter

  """
  Some related `EpisodesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTagFilter

  """
  No related `EpisodesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTagFilter
}

"""
A filter to be used against `EpisodesTag` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesTagFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesTagFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesTagFilter!]

  """Negates the expression."""
  not: EpisodesTagFilter
}

"""
A filter to be used against many `EpisodesCast` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesCastFilter {
  """
  Every related `EpisodesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesCastFilter

  """
  Some related `EpisodesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesCastFilter

  """
  No related `EpisodesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesCastFilter
}

"""
A filter to be used against `EpisodesCast` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesCastFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesCastFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesCastFilter!]

  """Negates the expression."""
  not: EpisodesCastFilter
}

"""
A filter to be used against many `EpisodesLicense` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesLicenseFilter {
  """
  Every related `EpisodesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesLicenseFilter

  """
  Some related `EpisodesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesLicenseFilter

  """
  No related `EpisodesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesLicenseFilter
}

"""
A filter to be used against `EpisodesLicense` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `episodesLicensesCountries` relation."""
  episodesLicensesCountries: EpisodesLicenseToManyEpisodesLicensesCountryFilter

  """Some related `episodesLicensesCountries` exist."""
  episodesLicensesCountriesExist: Boolean

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesLicenseFilter!]

  """Negates the expression."""
  not: EpisodesLicenseFilter
}

"""
A filter to be used against many `EpisodesLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesLicenseToManyEpisodesLicensesCountryFilter {
  """
  Every related `EpisodesLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesLicensesCountryFilter

  """
  Some related `EpisodesLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesLicensesCountryFilter

  """
  No related `EpisodesLicensesCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesLicensesCountryFilter
}

"""
A filter to be used against `EpisodesLicensesCountry` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesLicensesCountryFilter {
  """Filter by the object’s `episodesLicenseId` field."""
  episodesLicenseId: IntFilter

  """Filter by the object’s `code` field."""
  code: IsoAlphaTwoCountryCodesFilter

  """Filter by the object’s `episodesLicense` relation."""
  episodesLicense: EpisodesLicenseFilter

  """Checks for all expressions in this list."""
  and: [EpisodesLicensesCountryFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesLicensesCountryFilter!]

  """Negates the expression."""
  not: EpisodesLicensesCountryFilter
}

"""
A filter to be used against many `EpisodesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesProductionCountryFilter {
  """
  Every related `EpisodesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesProductionCountryFilter

  """
  Some related `EpisodesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesProductionCountryFilter

  """
  No related `EpisodesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesProductionCountryFilter
}

"""
A filter to be used against `EpisodesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesProductionCountryFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesProductionCountryFilter!]

  """Negates the expression."""
  not: EpisodesProductionCountryFilter
}

"""
A filter to be used against many `EpisodesTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesTvshowGenreFilter {
  """
  Every related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTvshowGenreFilter

  """
  Some related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTvshowGenreFilter

  """
  No related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTvshowGenreFilter
}

"""
A filter to be used against `EpisodesTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesTvshowGenreFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `tvshowGenresId` field."""
  tvshowGenresId: IntFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Filter by the object’s `tvshowGenres` relation."""
  tvshowGenres: TvshowGenreFilter

  """Checks for all expressions in this list."""
  and: [EpisodesTvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesTvshowGenreFilter!]

  """Negates the expression."""
  not: EpisodesTvshowGenreFilter
}

"""
A filter to be used against many `EpisodesImage` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesImageFilter {
  """
  Every related `EpisodesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesImageFilter

  """
  Some related `EpisodesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesImageFilter

  """
  No related `EpisodesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesImageFilter
}

"""
A filter to be used against `EpisodesImage` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesImageFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: UUIDFilter

  """Filter by the object’s `imageType` field."""
  imageType: EpisodeImageTypeFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesImageFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesImageFilter!]

  """Negates the expression."""
  not: EpisodesImageFilter
}

"""
A filter to be used against EpisodeImageType fields. All fields are combined with a logical ‘and.’
"""
input EpisodeImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: EpisodeImageType

  """Not equal to the specified value."""
  notEqualTo: EpisodeImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: EpisodeImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: EpisodeImageType

  """Included in the specified list."""
  in: [EpisodeImageType!]

  """Not included in the specified list."""
  notIn: [EpisodeImageType!]

  """Less than the specified value."""
  lessThan: EpisodeImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: EpisodeImageType

  """Greater than the specified value."""
  greaterThan: EpisodeImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: EpisodeImageType
}

enum EpisodeImageType {
  """Cover"""
  COVER

  """Teaser"""
  TEASER
}

"""
A filter to be used against many `EpisodesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesTrailerFilter {
  """
  Every related `EpisodesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTrailerFilter

  """
  Some related `EpisodesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTrailerFilter

  """
  No related `EpisodesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTrailerFilter
}

"""
A filter to be used against `EpisodesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesTrailerFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: UUIDFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesTrailerFilter!]

  """Negates the expression."""
  not: EpisodesTrailerFilter
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `EpisodesSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesSnapshotFilter {
  """
  Every related `EpisodesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesSnapshotFilter

  """
  Some related `EpisodesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesSnapshotFilter

  """
  No related `EpisodesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesSnapshotFilter
}

"""
A filter to be used against `EpisodesSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesSnapshotFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: IntFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Filter by the object’s `snapshot` relation."""
  snapshot: SnapshotFilter

  """Checks for all expressions in this list."""
  and: [EpisodesSnapshotFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesSnapshotFilter!]

  """Negates the expression."""
  not: EpisodesSnapshotFilter
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `SeasonsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsSnapshotFilter {
  """
  Every related `SeasonsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsSnapshotFilter

  """
  Some related `SeasonsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsSnapshotFilter

  """
  No related `SeasonsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsSnapshotFilter
}

"""
A filter to be used against `SeasonsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsSnapshotFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `snapshotId` field."""
  snapshotId: IntFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Filter by the object’s `snapshot` relation."""
  snapshot: SnapshotFilter

  """Checks for all expressions in this list."""
  and: [SeasonsSnapshotFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsSnapshotFilter!]

  """Negates the expression."""
  not: SeasonsSnapshotFilter
}

"""
A filter to be used against many `EpisodesTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreToManyEpisodesTvshowGenreFilter {
  """
  Every related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTvshowGenreFilter

  """
  Some related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTvshowGenreFilter

  """
  No related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTvshowGenreFilter
}

"""
A filter to be used against many `TvshowsImage` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsImageFilter {
  """
  Every related `TvshowsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsImageFilter

  """
  Some related `TvshowsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsImageFilter

  """
  No related `TvshowsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsImageFilter
}

"""
A filter to be used against `TvshowsImage` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsImageFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: UUIDFilter

  """Filter by the object’s `imageType` field."""
  imageType: TvshowImageTypeFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsImageFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsImageFilter!]

  """Negates the expression."""
  not: TvshowsImageFilter
}

"""
A filter to be used against TvshowImageType fields. All fields are combined with a logical ‘and.’
"""
input TvshowImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: TvshowImageType

  """Not equal to the specified value."""
  notEqualTo: TvshowImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TvshowImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TvshowImageType

  """Included in the specified list."""
  in: [TvshowImageType!]

  """Not included in the specified list."""
  notIn: [TvshowImageType!]

  """Less than the specified value."""
  lessThan: TvshowImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TvshowImageType

  """Greater than the specified value."""
  greaterThan: TvshowImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TvshowImageType
}

enum TvshowImageType {
  """Cover"""
  COVER

  """Teaser"""
  TEASER
}

"""
A filter to be used against many `TvshowsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsTrailerFilter {
  """
  Every related `TvshowsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTrailerFilter

  """
  Some related `TvshowsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTrailerFilter

  """
  No related `TvshowsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTrailerFilter
}

"""
A filter to be used against `TvshowsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsTrailerFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: UUIDFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsTrailerFilter!]

  """Negates the expression."""
  not: TvshowsTrailerFilter
}

"""
A filter to be used against many `Season` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManySeasonFilter {
  """
  Every related `Season` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonFilter

  """
  Some related `Season` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonFilter

  """
  No related `Season` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonFilter
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `TvshowsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsSnapshotFilter {
  """
  Every related `TvshowsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsSnapshotFilter

  """
  Some related `TvshowsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsSnapshotFilter

  """
  No related `TvshowsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsSnapshotFilter
}

"""
A filter to be used against many `SeasonsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotToManySeasonsSnapshotFilter {
  """
  Every related `SeasonsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsSnapshotFilter

  """
  Some related `SeasonsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsSnapshotFilter

  """
  No related `SeasonsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsSnapshotFilter
}

"""
A filter to be used against many `EpisodesSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotToManyEpisodesSnapshotFilter {
  """
  Every related `EpisodesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesSnapshotFilter

  """
  Some related `EpisodesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesSnapshotFilter

  """
  No related `EpisodesSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesSnapshotFilter
}

"""
A filter to be used against many `CollectionsSnapshot` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotToManyCollectionsSnapshotFilter {
  """
  Every related `CollectionsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionsSnapshotFilter

  """
  Some related `CollectionsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionsSnapshotFilter

  """
  No related `CollectionsSnapshot` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionsSnapshotFilter
}

"""
A connection to a list of `CollectionsTag` values.
@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type CollectionsTagsConnection {
  """A list of `CollectionsTag` objects."""
  nodes: [CollectionsTag!]!

  """
  A list of edges which contains the `CollectionsTag` and cursor to aid in pagination.
  """
  edges: [CollectionsTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CollectionsTag` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN"""
type CollectionsTag {
  collectionId: Int!
  name: String!

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection
}

"""A `CollectionsTag` edge in the connection."""
type CollectionsTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionsTag` at the end of the edge."""
  node: CollectionsTag!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `CollectionsTag`."""
enum CollectionsTagsOrderBy {
  NATURAL
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionsTag` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionsTagCondition {
  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `CollectionsImage` values.
@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type CollectionsImagesConnection {
  """A list of `CollectionsImage` objects."""
  nodes: [CollectionsImage!]!

  """
  A list of edges which contains the `CollectionsImage` and cursor to aid in pagination.
  """
  edges: [CollectionsImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionsImage` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN"""
type CollectionsImage {
  collectionId: Int!
  imageId: UUID!
  imageType: CollectionImageType!

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection
}

"""A `CollectionsImage` edge in the connection."""
type CollectionsImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionsImage` at the end of the edge."""
  node: CollectionsImage!
}

"""Methods to use when ordering `CollectionsImage`."""
enum CollectionsImagesOrderBy {
  NATURAL
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionsImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionsImageCondition {
  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: UUID

  """Checks for equality with the object’s `imageType` field."""
  imageType: CollectionImageType
}

"""
A connection to a list of `CollectionsSnapshot` values.
@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type CollectionsSnapshotsConnection {
  """A list of `CollectionsSnapshot` objects."""
  nodes: [CollectionsSnapshot!]!

  """
  A list of edges which contains the `CollectionsSnapshot` and cursor to aid in pagination.
  """
  edges: [CollectionsSnapshotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionsSnapshot` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN"""
type CollectionsSnapshot {
  collectionId: Int!
  snapshotId: Int!

  """
  Reads a single `Collection` that is related to this `CollectionsSnapshot`.
  """
  collection: Collection

  """
  Reads a single `Snapshot` that is related to this `CollectionsSnapshot`.
  """
  snapshot: Snapshot
}

"""
Snapshots have custom RLS filtering, showing only snapshots of appropriate types based on user permissions.
@permissions: MOVIES_VIEW,MOVIES_EDIT,TVSHOWS_VIEW,TVSHOWS_EDIT,SETTINGS_VIEW,SETTINGS_EDIT,COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type Snapshot {
  id: Int!
  entityId: Int!
  publishId: String!
  jobId: String!
  snapshotNo: Int!
  entityTitle: String
  entityType: EntityType!
  validationStatus: SnapshotValidationStatus
  snapshotJson: JSON
  snapshotState: SnapshotState!
  scheduledDate: Datetime
  publishedDate: Datetime
  unpublishedDate: Datetime
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  isListSnapshot: Boolean!

  """
  Reads and enables pagination through a set of `SnapshotValidationResult`.
  """
  snapshotValidationResults(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SnapshotValidationResult`."""
    orderBy: [SnapshotValidationResultsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SnapshotValidationResultCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SnapshotValidationResultFilter
  ): SnapshotValidationResultsConnection!

  """Reads and enables pagination through a set of `MoviesSnapshot`."""
  moviesSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesSnapshot`."""
    orderBy: [MoviesSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesSnapshotFilter
  ): MoviesSnapshotsConnection!

  """Reads and enables pagination through a set of `TvshowsSnapshot`."""
  tvshowsSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsSnapshot`."""
    orderBy: [TvshowsSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsSnapshotFilter
  ): TvshowsSnapshotsConnection!

  """Reads and enables pagination through a set of `SeasonsSnapshot`."""
  seasonsSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsSnapshot`."""
    orderBy: [SeasonsSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsSnapshotFilter
  ): SeasonsSnapshotsConnection!

  """Reads and enables pagination through a set of `EpisodesSnapshot`."""
  episodesSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesSnapshot`."""
    orderBy: [EpisodesSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesSnapshotFilter
  ): EpisodesSnapshotsConnection!

  """Reads and enables pagination through a set of `CollectionsSnapshot`."""
  collectionsSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsSnapshot`."""
    orderBy: [CollectionsSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsSnapshotFilter
  ): CollectionsSnapshotsConnection!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A connection to a list of `SnapshotValidationResult` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,TVSHOWS_VIEW,TVSHOWS_EDIT,SETTINGS_VIEW,SETTINGS_EDIT,COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type SnapshotValidationResultsConnection {
  """A list of `SnapshotValidationResult` objects."""
  nodes: [SnapshotValidationResult!]!

  """
  A list of edges which contains the `SnapshotValidationResult` and cursor to aid in pagination.
  """
  edges: [SnapshotValidationResultsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SnapshotValidationResult` you could get from the connection.
  """
  totalCount: Int!
}

"""
@permissions: MOVIES_VIEW,MOVIES_EDIT,TVSHOWS_VIEW,TVSHOWS_EDIT,SETTINGS_VIEW,SETTINGS_EDIT,COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type SnapshotValidationResult {
  id: Int!
  snapshotId: Int!
  severity: SnapshotValidationIssueSeverity!
  context: SnapshotValidationIssueContext!
  message: String!
  entityType: EntityType!

  """
  Reads a single `Snapshot` that is related to this `SnapshotValidationResult`.
  """
  snapshot: Snapshot
}

"""A `SnapshotValidationResult` edge in the connection."""
type SnapshotValidationResultsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SnapshotValidationResult` at the end of the edge."""
  node: SnapshotValidationResult!
}

"""Methods to use when ordering `SnapshotValidationResult`."""
enum SnapshotValidationResultsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
  SEVERITY_ASC
  SEVERITY_DESC
  CONTEXT_ASC
  CONTEXT_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  ENTITY_TYPE_ASC
  ENTITY_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SnapshotValidationResult` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SnapshotValidationResultCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: Int

  """Checks for equality with the object’s `severity` field."""
  severity: SnapshotValidationIssueSeverity

  """Checks for equality with the object’s `context` field."""
  context: SnapshotValidationIssueContext

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `entityType` field."""
  entityType: EntityType
}

"""
A connection to a list of `MoviesSnapshot` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesSnapshotsConnection {
  """A list of `MoviesSnapshot` objects."""
  nodes: [MoviesSnapshot!]!

  """
  A list of edges which contains the `MoviesSnapshot` and cursor to aid in pagination.
  """
  edges: [MoviesSnapshotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesSnapshot` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesSnapshot {
  movieId: Int!
  snapshotId: Int!

  """Reads a single `Movie` that is related to this `MoviesSnapshot`."""
  movie: Movie

  """Reads a single `Snapshot` that is related to this `MoviesSnapshot`."""
  snapshot: Snapshot
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type Movie {
  id: Int!
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: UUID
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  publishStatus: PublishStatus!

  """Reads and enables pagination through a set of `MoviesTag`."""
  moviesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTagFilter
  ): MoviesTagsConnection!

  """Reads and enables pagination through a set of `MoviesCast`."""
  moviesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesCastFilter
  ): MoviesCastsConnection!

  """Reads and enables pagination through a set of `MoviesLicense`."""
  moviesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesLicenseFilter
  ): MoviesLicensesConnection!

  """
  Reads and enables pagination through a set of `MoviesProductionCountry`.
  """
  moviesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesProductionCountryFilter
  ): MoviesProductionCountriesConnection!

  """Reads and enables pagination through a set of `MoviesMovieGenre`."""
  moviesMovieGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesMovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesMovieGenreFilter
  ): MoviesMovieGenresConnection!

  """Reads and enables pagination through a set of `MoviesImage`."""
  moviesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesImageFilter
  ): MoviesImagesConnection!

  """Reads and enables pagination through a set of `MoviesTrailer`."""
  moviesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTrailerFilter
  ): MoviesTrailersConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!

  """Reads and enables pagination through a set of `MoviesSnapshot`."""
  moviesSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesSnapshot`."""
    orderBy: [MoviesSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesSnapshotFilter
  ): MoviesSnapshotsConnection!
}

"""
A connection to a list of `MoviesTag` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesTagsConnection {
  """A list of `MoviesTag` objects."""
  nodes: [MoviesTag!]!

  """
  A list of edges which contains the `MoviesTag` and cursor to aid in pagination.
  """
  edges: [MoviesTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesTag` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesTag {
  movieId: Int!
  name: String!

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie
}

"""A `MoviesTag` edge in the connection."""
type MoviesTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesTag` at the end of the edge."""
  node: MoviesTag!
}

"""Methods to use when ordering `MoviesTag`."""
enum MoviesTagsOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MoviesTagCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `MoviesCast` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesCastsConnection {
  """A list of `MoviesCast` objects."""
  nodes: [MoviesCast!]!

  """
  A list of edges which contains the `MoviesCast` and cursor to aid in pagination.
  """
  edges: [MoviesCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesCast` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesCast {
  movieId: Int!
  name: String!

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie
}

"""A `MoviesCast` edge in the connection."""
type MoviesCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesCast` at the end of the edge."""
  node: MoviesCast!
}

"""Methods to use when ordering `MoviesCast`."""
enum MoviesCastsOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesCast` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MoviesCastCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `MoviesLicense` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesLicensesConnection {
  """A list of `MoviesLicense` objects."""
  nodes: [MoviesLicense!]!

  """
  A list of edges which contains the `MoviesLicense` and cursor to aid in pagination.
  """
  edges: [MoviesLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesLicense` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesLicense {
  id: Int!
  movieId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  createdDate: Datetime!
  updatedDate: Datetime!

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie

  """Reads and enables pagination through a set of `MoviesLicensesCountry`."""
  moviesLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesLicensesCountry`."""
    orderBy: [MoviesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesLicensesCountryFilter
  ): MoviesLicensesCountriesConnection!
}

"""
A connection to a list of `MoviesLicensesCountry` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesLicensesCountriesConnection {
  """A list of `MoviesLicensesCountry` objects."""
  nodes: [MoviesLicensesCountry!]!

  """
  A list of edges which contains the `MoviesLicensesCountry` and cursor to aid in pagination.
  """
  edges: [MoviesLicensesCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MoviesLicensesCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesLicensesCountry {
  moviesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!

  """
  Reads a single `MoviesLicense` that is related to this `MoviesLicensesCountry`.
  """
  moviesLicense: MoviesLicense
}

"""A `MoviesLicensesCountry` edge in the connection."""
type MoviesLicensesCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesLicensesCountry` at the end of the edge."""
  node: MoviesLicensesCountry!
}

"""Methods to use when ordering `MoviesLicensesCountry`."""
enum MoviesLicensesCountriesOrderBy {
  NATURAL
  MOVIES_LICENSE_ID_ASC
  MOVIES_LICENSE_ID_DESC
  CODE_ASC
  CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesLicensesCountry` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MoviesLicensesCountryCondition {
  """Checks for equality with the object’s `moviesLicenseId` field."""
  moviesLicenseId: Int

  """Checks for equality with the object’s `code` field."""
  code: IsoAlphaTwoCountryCodes
}

"""A `MoviesLicense` edge in the connection."""
type MoviesLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesLicense` at the end of the edge."""
  node: MoviesLicense!
}

"""Methods to use when ordering `MoviesLicense`."""
enum MoviesLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MoviesLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime
}

"""
A connection to a list of `MoviesProductionCountry` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesProductionCountriesConnection {
  """A list of `MoviesProductionCountry` objects."""
  nodes: [MoviesProductionCountry!]!

  """
  A list of edges which contains the `MoviesProductionCountry` and cursor to aid in pagination.
  """
  edges: [MoviesProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MoviesProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesProductionCountry {
  movieId: Int!
  name: String!

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie
}

"""A `MoviesProductionCountry` edge in the connection."""
type MoviesProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesProductionCountry` at the end of the edge."""
  node: MoviesProductionCountry!
}

"""Methods to use when ordering `MoviesProductionCountry`."""
enum MoviesProductionCountriesOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MoviesProductionCountryCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `MoviesMovieGenre` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesMovieGenresConnection {
  """A list of `MoviesMovieGenre` objects."""
  nodes: [MoviesMovieGenre!]!

  """
  A list of edges which contains the `MoviesMovieGenre` and cursor to aid in pagination.
  """
  edges: [MoviesMovieGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MoviesMovieGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesMovieGenre {
  movieId: Int!
  movieGenresId: Int!

  """Reads a single `Movie` that is related to this `MoviesMovieGenre`."""
  movie: Movie

  """
  Reads a single `MovieGenre` that is related to this `MoviesMovieGenre`.
  """
  movieGenres: MovieGenre
}

"""@permissions: SETTINGS_VIEW,SETTINGS_EDIT,ADMIN"""
type MovieGenre {
  id: Int!
  title: String!
  sortOrder: Int!
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!

  """Reads and enables pagination through a set of `MoviesMovieGenre`."""
  moviesMovieGenresByMovieGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesMovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesMovieGenreFilter
  ): MoviesMovieGenresConnection!
}

"""Methods to use when ordering `MoviesMovieGenre`."""
enum MoviesMovieGenresOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  MOVIE_GENRES_ID_ASC
  MOVIE_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesMovieGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MoviesMovieGenreCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `movieGenresId` field."""
  movieGenresId: Int
}

"""A `MoviesMovieGenre` edge in the connection."""
type MoviesMovieGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesMovieGenre` at the end of the edge."""
  node: MoviesMovieGenre!
}

"""
A connection to a list of `MoviesImage` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesImagesConnection {
  """A list of `MoviesImage` objects."""
  nodes: [MoviesImage!]!

  """
  A list of edges which contains the `MoviesImage` and cursor to aid in pagination.
  """
  edges: [MoviesImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesImage` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesImage {
  movieId: Int!
  imageId: UUID!
  imageType: MovieImageType!

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie
}

"""A `MoviesImage` edge in the connection."""
type MoviesImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesImage` at the end of the edge."""
  node: MoviesImage!
}

"""Methods to use when ordering `MoviesImage`."""
enum MoviesImagesOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesImage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MoviesImageCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: UUID

  """Checks for equality with the object’s `imageType` field."""
  imageType: MovieImageType
}

"""
A connection to a list of `MoviesTrailer` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesTrailersConnection {
  """A list of `MoviesTrailer` objects."""
  nodes: [MoviesTrailer!]!

  """
  A list of edges which contains the `MoviesTrailer` and cursor to aid in pagination.
  """
  edges: [MoviesTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesTrailer` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN"""
type MoviesTrailer {
  movieId: Int!
  videoId: UUID!

  """Reads a single `Movie` that is related to this `MoviesTrailer`."""
  movie: Movie
}

"""A `MoviesTrailer` edge in the connection."""
type MoviesTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesTrailer` at the end of the edge."""
  node: MoviesTrailer!
}

"""Methods to use when ordering `MoviesTrailer`."""
enum MoviesTrailersOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MoviesTrailerCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: UUID
}

"""Methods to use when ordering `MoviesSnapshot`."""
enum MoviesSnapshotsOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MoviesSnapshot` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MoviesSnapshotCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: Int
}

"""A `MoviesSnapshot` edge in the connection."""
type MoviesSnapshotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesSnapshot` at the end of the edge."""
  node: MoviesSnapshot!
}

"""
A connection to a list of `TvshowsSnapshot` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsSnapshotsConnection {
  """A list of `TvshowsSnapshot` objects."""
  nodes: [TvshowsSnapshot!]!

  """
  A list of edges which contains the `TvshowsSnapshot` and cursor to aid in pagination.
  """
  edges: [TvshowsSnapshotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TvshowsSnapshot` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsSnapshot {
  tvshowId: Int!
  snapshotId: Int!

  """Reads a single `Tvshow` that is related to this `TvshowsSnapshot`."""
  tvshow: Tvshow

  """Reads a single `Snapshot` that is related to this `TvshowsSnapshot`."""
  snapshot: Snapshot
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type Tvshow {
  id: Int!
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  publishStatus: PublishStatus!

  """Reads and enables pagination through a set of `TvshowsTag`."""
  tvshowsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTagFilter
  ): TvshowsTagsConnection!

  """Reads and enables pagination through a set of `TvshowsCast`."""
  tvshowsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsCastFilter
  ): TvshowsCastsConnection!

  """Reads and enables pagination through a set of `TvshowsLicense`."""
  tvshowsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsLicenseFilter
  ): TvshowsLicensesConnection!

  """
  Reads and enables pagination through a set of `TvshowsProductionCountry`.
  """
  tvshowsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsProductionCountryFilter
  ): TvshowsProductionCountriesConnection!

  """Reads and enables pagination through a set of `TvshowsTvshowGenre`."""
  tvshowsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTvshowGenreFilter
  ): TvshowsTvshowGenresConnection!

  """Reads and enables pagination through a set of `TvshowsImage`."""
  tvshowsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsImageFilter
  ): TvshowsImagesConnection!

  """Reads and enables pagination through a set of `TvshowsTrailer`."""
  tvshowsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTrailerFilter
  ): TvshowsTrailersConnection!

  """Reads and enables pagination through a set of `Season`."""
  seasons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonFilter
  ): SeasonsConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!

  """Reads and enables pagination through a set of `TvshowsSnapshot`."""
  tvshowsSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsSnapshot`."""
    orderBy: [TvshowsSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsSnapshotFilter
  ): TvshowsSnapshotsConnection!
}

"""
A connection to a list of `TvshowsTag` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsTagsConnection {
  """A list of `TvshowsTag` objects."""
  nodes: [TvshowsTag!]!

  """
  A list of edges which contains the `TvshowsTag` and cursor to aid in pagination.
  """
  edges: [TvshowsTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsTag` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsTag {
  tvshowId: Int!
  name: String!

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow
}

"""A `TvshowsTag` edge in the connection."""
type TvshowsTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsTag` at the end of the edge."""
  node: TvshowsTag!
}

"""Methods to use when ordering `TvshowsTag`."""
enum TvshowsTagsOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TvshowsTagCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `TvshowsCast` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsCastsConnection {
  """A list of `TvshowsCast` objects."""
  nodes: [TvshowsCast!]!

  """
  A list of edges which contains the `TvshowsCast` and cursor to aid in pagination.
  """
  edges: [TvshowsCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsCast` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsCast {
  tvshowId: Int!
  name: String!

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow
}

"""A `TvshowsCast` edge in the connection."""
type TvshowsCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsCast` at the end of the edge."""
  node: TvshowsCast!
}

"""Methods to use when ordering `TvshowsCast`."""
enum TvshowsCastsOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsCast` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TvshowsCastCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `TvshowsLicense` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsLicensesConnection {
  """A list of `TvshowsLicense` objects."""
  nodes: [TvshowsLicense!]!

  """
  A list of edges which contains the `TvshowsLicense` and cursor to aid in pagination.
  """
  edges: [TvshowsLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsLicense` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsLicense {
  id: Int!
  tvshowId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  createdDate: Datetime!
  updatedDate: Datetime!

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow

  """
  Reads and enables pagination through a set of `TvshowsLicensesCountry`.
  """
  tvshowsLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsLicensesCountry`."""
    orderBy: [TvshowsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsLicensesCountryFilter
  ): TvshowsLicensesCountriesConnection!
}

"""
A connection to a list of `TvshowsLicensesCountry` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsLicensesCountriesConnection {
  """A list of `TvshowsLicensesCountry` objects."""
  nodes: [TvshowsLicensesCountry!]!

  """
  A list of edges which contains the `TvshowsLicensesCountry` and cursor to aid in pagination.
  """
  edges: [TvshowsLicensesCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TvshowsLicensesCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsLicensesCountry {
  tvshowsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!

  """
  Reads a single `TvshowsLicense` that is related to this `TvshowsLicensesCountry`.
  """
  tvshowsLicense: TvshowsLicense
}

"""A `TvshowsLicensesCountry` edge in the connection."""
type TvshowsLicensesCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsLicensesCountry` at the end of the edge."""
  node: TvshowsLicensesCountry!
}

"""Methods to use when ordering `TvshowsLicensesCountry`."""
enum TvshowsLicensesCountriesOrderBy {
  NATURAL
  TVSHOWS_LICENSE_ID_ASC
  TVSHOWS_LICENSE_ID_DESC
  CODE_ASC
  CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsLicensesCountry` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TvshowsLicensesCountryCondition {
  """Checks for equality with the object’s `tvshowsLicenseId` field."""
  tvshowsLicenseId: Int

  """Checks for equality with the object’s `code` field."""
  code: IsoAlphaTwoCountryCodes
}

"""A `TvshowsLicense` edge in the connection."""
type TvshowsLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsLicense` at the end of the edge."""
  node: TvshowsLicense!
}

"""Methods to use when ordering `TvshowsLicense`."""
enum TvshowsLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime
}

"""
A connection to a list of `TvshowsProductionCountry` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsProductionCountriesConnection {
  """A list of `TvshowsProductionCountry` objects."""
  nodes: [TvshowsProductionCountry!]!

  """
  A list of edges which contains the `TvshowsProductionCountry` and cursor to aid in pagination.
  """
  edges: [TvshowsProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TvshowsProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsProductionCountry {
  tvshowId: Int!
  name: String!

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow
}

"""A `TvshowsProductionCountry` edge in the connection."""
type TvshowsProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsProductionCountry` at the end of the edge."""
  node: TvshowsProductionCountry!
}

"""Methods to use when ordering `TvshowsProductionCountry`."""
enum TvshowsProductionCountriesOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TvshowsProductionCountryCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `TvshowsTvshowGenre` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsTvshowGenresConnection {
  """A list of `TvshowsTvshowGenre` objects."""
  nodes: [TvshowsTvshowGenre!]!

  """
  A list of edges which contains the `TvshowsTvshowGenre` and cursor to aid in pagination.
  """
  edges: [TvshowsTvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TvshowsTvshowGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsTvshowGenre {
  tvshowId: Int!
  tvshowGenresId: Int!

  """Reads a single `Tvshow` that is related to this `TvshowsTvshowGenre`."""
  tvshow: Tvshow

  """
  Reads a single `TvshowGenre` that is related to this `TvshowsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre
}

"""@permissions: SETTINGS_VIEW,SETTINGS_EDIT,ADMIN"""
type TvshowGenre {
  id: Int!
  title: String!
  sortOrder: Int!
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!

  """Reads and enables pagination through a set of `TvshowsTvshowGenre`."""
  tvshowsTvshowGenresByTvshowGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTvshowGenreFilter
  ): TvshowsTvshowGenresConnection!

  """Reads and enables pagination through a set of `SeasonsTvshowGenre`."""
  seasonsTvshowGenresByTvshowGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTvshowGenreFilter
  ): SeasonsTvshowGenresConnection!

  """Reads and enables pagination through a set of `EpisodesTvshowGenre`."""
  episodesTvshowGenresByTvshowGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTvshowGenreFilter
  ): EpisodesTvshowGenresConnection!
}

"""Methods to use when ordering `TvshowsTvshowGenre`."""
enum TvshowsTvshowGenresOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  TVSHOW_GENRES_ID_ASC
  TVSHOW_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsTvshowGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsTvshowGenreCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `tvshowGenresId` field."""
  tvshowGenresId: Int
}

"""
A connection to a list of `SeasonsTvshowGenre` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsTvshowGenresConnection {
  """A list of `SeasonsTvshowGenre` objects."""
  nodes: [SeasonsTvshowGenre!]!

  """
  A list of edges which contains the `SeasonsTvshowGenre` and cursor to aid in pagination.
  """
  edges: [SeasonsTvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SeasonsTvshowGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsTvshowGenre {
  seasonId: Int!
  tvshowGenresId: Int!

  """Reads a single `Season` that is related to this `SeasonsTvshowGenre`."""
  season: Season

  """
  Reads a single `TvshowGenre` that is related to this `SeasonsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type Season {
  id: Int!
  tvshowId: Int
  index: Int!
  externalId: String
  synopsis: String
  description: String
  studio: String
  released: Date
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  publishStatus: PublishStatus!

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """Reads and enables pagination through a set of `SeasonsTag`."""
  seasonsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTagFilter
  ): SeasonsTagsConnection!

  """Reads and enables pagination through a set of `SeasonsCast`."""
  seasonsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsCastFilter
  ): SeasonsCastsConnection!

  """Reads and enables pagination through a set of `SeasonsLicense`."""
  seasonsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsLicenseFilter
  ): SeasonsLicensesConnection!

  """
  Reads and enables pagination through a set of `SeasonsProductionCountry`.
  """
  seasonsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsProductionCountryFilter
  ): SeasonsProductionCountriesConnection!

  """Reads and enables pagination through a set of `SeasonsTvshowGenre`."""
  seasonsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTvshowGenreFilter
  ): SeasonsTvshowGenresConnection!

  """Reads and enables pagination through a set of `SeasonsImage`."""
  seasonsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsImageFilter
  ): SeasonsImagesConnection!

  """Reads and enables pagination through a set of `SeasonsTrailer`."""
  seasonsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTrailerFilter
  ): SeasonsTrailersConnection!

  """Reads and enables pagination through a set of `Episode`."""
  episodes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodeFilter
  ): EpisodesConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!

  """Reads and enables pagination through a set of `SeasonsSnapshot`."""
  seasonsSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsSnapshot`."""
    orderBy: [SeasonsSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsSnapshotFilter
  ): SeasonsSnapshotsConnection!
}

"""
A connection to a list of `SeasonsTag` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsTagsConnection {
  """A list of `SeasonsTag` objects."""
  nodes: [SeasonsTag!]!

  """
  A list of edges which contains the `SeasonsTag` and cursor to aid in pagination.
  """
  edges: [SeasonsTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsTag` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsTag {
  seasonId: Int!
  name: String!

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season
}

"""A `SeasonsTag` edge in the connection."""
type SeasonsTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsTag` at the end of the edge."""
  node: SeasonsTag!
}

"""Methods to use when ordering `SeasonsTag`."""
enum SeasonsTagsOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SeasonsTagCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `SeasonsCast` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsCastsConnection {
  """A list of `SeasonsCast` objects."""
  nodes: [SeasonsCast!]!

  """
  A list of edges which contains the `SeasonsCast` and cursor to aid in pagination.
  """
  edges: [SeasonsCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsCast` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsCast {
  seasonId: Int!
  name: String!

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season
}

"""A `SeasonsCast` edge in the connection."""
type SeasonsCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsCast` at the end of the edge."""
  node: SeasonsCast!
}

"""Methods to use when ordering `SeasonsCast`."""
enum SeasonsCastsOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsCast` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SeasonsCastCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `SeasonsLicense` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsLicensesConnection {
  """A list of `SeasonsLicense` objects."""
  nodes: [SeasonsLicense!]!

  """
  A list of edges which contains the `SeasonsLicense` and cursor to aid in pagination.
  """
  edges: [SeasonsLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsLicense` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsLicense {
  id: Int!
  seasonId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  createdDate: Datetime!
  updatedDate: Datetime!

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season

  """
  Reads and enables pagination through a set of `SeasonsLicensesCountry`.
  """
  seasonsLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsLicensesCountry`."""
    orderBy: [SeasonsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsLicensesCountryFilter
  ): SeasonsLicensesCountriesConnection!
}

"""
A connection to a list of `SeasonsLicensesCountry` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsLicensesCountriesConnection {
  """A list of `SeasonsLicensesCountry` objects."""
  nodes: [SeasonsLicensesCountry!]!

  """
  A list of edges which contains the `SeasonsLicensesCountry` and cursor to aid in pagination.
  """
  edges: [SeasonsLicensesCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SeasonsLicensesCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsLicensesCountry {
  seasonsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!

  """
  Reads a single `SeasonsLicense` that is related to this `SeasonsLicensesCountry`.
  """
  seasonsLicense: SeasonsLicense
}

"""A `SeasonsLicensesCountry` edge in the connection."""
type SeasonsLicensesCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsLicensesCountry` at the end of the edge."""
  node: SeasonsLicensesCountry!
}

"""Methods to use when ordering `SeasonsLicensesCountry`."""
enum SeasonsLicensesCountriesOrderBy {
  NATURAL
  SEASONS_LICENSE_ID_ASC
  SEASONS_LICENSE_ID_DESC
  CODE_ASC
  CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsLicensesCountry` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SeasonsLicensesCountryCondition {
  """Checks for equality with the object’s `seasonsLicenseId` field."""
  seasonsLicenseId: Int

  """Checks for equality with the object’s `code` field."""
  code: IsoAlphaTwoCountryCodes
}

"""A `SeasonsLicense` edge in the connection."""
type SeasonsLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsLicense` at the end of the edge."""
  node: SeasonsLicense!
}

"""Methods to use when ordering `SeasonsLicense`."""
enum SeasonsLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SEASON_ID_ASC
  SEASON_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime
}

"""
A connection to a list of `SeasonsProductionCountry` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsProductionCountriesConnection {
  """A list of `SeasonsProductionCountry` objects."""
  nodes: [SeasonsProductionCountry!]!

  """
  A list of edges which contains the `SeasonsProductionCountry` and cursor to aid in pagination.
  """
  edges: [SeasonsProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SeasonsProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsProductionCountry {
  seasonId: Int!
  name: String!

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season
}

"""A `SeasonsProductionCountry` edge in the connection."""
type SeasonsProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsProductionCountry` at the end of the edge."""
  node: SeasonsProductionCountry!
}

"""Methods to use when ordering `SeasonsProductionCountry`."""
enum SeasonsProductionCountriesOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SeasonsProductionCountryCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""Methods to use when ordering `SeasonsTvshowGenre`."""
enum SeasonsTvshowGenresOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  TVSHOW_GENRES_ID_ASC
  TVSHOW_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsTvshowGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsTvshowGenreCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `tvshowGenresId` field."""
  tvshowGenresId: Int
}

"""
A connection to a list of `SeasonsImage` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsImagesConnection {
  """A list of `SeasonsImage` objects."""
  nodes: [SeasonsImage!]!

  """
  A list of edges which contains the `SeasonsImage` and cursor to aid in pagination.
  """
  edges: [SeasonsImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsImage` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsImage {
  seasonId: Int!
  imageId: UUID!
  imageType: SeasonImageType!

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season
}

"""A `SeasonsImage` edge in the connection."""
type SeasonsImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsImage` at the end of the edge."""
  node: SeasonsImage!
}

"""Methods to use when ordering `SeasonsImage`."""
enum SeasonsImagesOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsImageCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: UUID

  """Checks for equality with the object’s `imageType` field."""
  imageType: SeasonImageType
}

"""
A connection to a list of `SeasonsTrailer` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsTrailersConnection {
  """A list of `SeasonsTrailer` objects."""
  nodes: [SeasonsTrailer!]!

  """
  A list of edges which contains the `SeasonsTrailer` and cursor to aid in pagination.
  """
  edges: [SeasonsTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsTrailer` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsTrailer {
  seasonId: Int!
  videoId: UUID!

  """Reads a single `Season` that is related to this `SeasonsTrailer`."""
  season: Season
}

"""A `SeasonsTrailer` edge in the connection."""
type SeasonsTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsTrailer` at the end of the edge."""
  node: SeasonsTrailer!
}

"""Methods to use when ordering `SeasonsTrailer`."""
enum SeasonsTrailersOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsTrailerCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: UUID
}

"""
A connection to a list of `Episode` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesConnection {
  """A list of `Episode` objects."""
  nodes: [Episode!]!

  """
  A list of edges which contains the `Episode` and cursor to aid in pagination.
  """
  edges: [EpisodesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Episode` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type Episode {
  id: Int!
  seasonId: Int
  index: Int!
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: UUID
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  publishStatus: PublishStatus!

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """Reads and enables pagination through a set of `EpisodesTag`."""
  episodesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTagFilter
  ): EpisodesTagsConnection!

  """Reads and enables pagination through a set of `EpisodesCast`."""
  episodesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesCastFilter
  ): EpisodesCastsConnection!

  """Reads and enables pagination through a set of `EpisodesLicense`."""
  episodesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesLicenseFilter
  ): EpisodesLicensesConnection!

  """
  Reads and enables pagination through a set of `EpisodesProductionCountry`.
  """
  episodesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesProductionCountryFilter
  ): EpisodesProductionCountriesConnection!

  """Reads and enables pagination through a set of `EpisodesTvshowGenre`."""
  episodesTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTvshowGenreFilter
  ): EpisodesTvshowGenresConnection!

  """Reads and enables pagination through a set of `EpisodesImage`."""
  episodesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesImageFilter
  ): EpisodesImagesConnection!

  """Reads and enables pagination through a set of `EpisodesTrailer`."""
  episodesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTrailerFilter
  ): EpisodesTrailersConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!

  """Reads and enables pagination through a set of `EpisodesSnapshot`."""
  episodesSnapshots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesSnapshot`."""
    orderBy: [EpisodesSnapshotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesSnapshotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesSnapshotFilter
  ): EpisodesSnapshotsConnection!
}

"""
A connection to a list of `EpisodesTag` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesTagsConnection {
  """A list of `EpisodesTag` objects."""
  nodes: [EpisodesTag!]!

  """
  A list of edges which contains the `EpisodesTag` and cursor to aid in pagination.
  """
  edges: [EpisodesTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EpisodesTag` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesTag {
  episodeId: Int!
  name: String!

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode
}

"""A `EpisodesTag` edge in the connection."""
type EpisodesTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesTag` at the end of the edge."""
  node: EpisodesTag!
}

"""Methods to use when ordering `EpisodesTag`."""
enum EpisodesTagsOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EpisodesTagCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `EpisodesCast` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesCastsConnection {
  """A list of `EpisodesCast` objects."""
  nodes: [EpisodesCast!]!

  """
  A list of edges which contains the `EpisodesCast` and cursor to aid in pagination.
  """
  edges: [EpisodesCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EpisodesCast` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesCast {
  episodeId: Int!
  name: String!

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode
}

"""A `EpisodesCast` edge in the connection."""
type EpisodesCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesCast` at the end of the edge."""
  node: EpisodesCast!
}

"""Methods to use when ordering `EpisodesCast`."""
enum EpisodesCastsOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesCast` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesCastCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `EpisodesLicense` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesLicensesConnection {
  """A list of `EpisodesLicense` objects."""
  nodes: [EpisodesLicense!]!

  """
  A list of edges which contains the `EpisodesLicense` and cursor to aid in pagination.
  """
  edges: [EpisodesLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesLicense` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesLicense {
  id: Int!
  episodeId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  createdDate: Datetime!
  updatedDate: Datetime!

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode

  """
  Reads and enables pagination through a set of `EpisodesLicensesCountry`.
  """
  episodesLicensesCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesLicensesCountry`."""
    orderBy: [EpisodesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesLicensesCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesLicensesCountryFilter
  ): EpisodesLicensesCountriesConnection!
}

"""
A connection to a list of `EpisodesLicensesCountry` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesLicensesCountriesConnection {
  """A list of `EpisodesLicensesCountry` objects."""
  nodes: [EpisodesLicensesCountry!]!

  """
  A list of edges which contains the `EpisodesLicensesCountry` and cursor to aid in pagination.
  """
  edges: [EpisodesLicensesCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesLicensesCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesLicensesCountry {
  episodesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!

  """
  Reads a single `EpisodesLicense` that is related to this `EpisodesLicensesCountry`.
  """
  episodesLicense: EpisodesLicense
}

"""A `EpisodesLicensesCountry` edge in the connection."""
type EpisodesLicensesCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesLicensesCountry` at the end of the edge."""
  node: EpisodesLicensesCountry!
}

"""Methods to use when ordering `EpisodesLicensesCountry`."""
enum EpisodesLicensesCountriesOrderBy {
  NATURAL
  EPISODES_LICENSE_ID_ASC
  EPISODES_LICENSE_ID_DESC
  CODE_ASC
  CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesLicensesCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EpisodesLicensesCountryCondition {
  """Checks for equality with the object’s `episodesLicenseId` field."""
  episodesLicenseId: Int

  """Checks for equality with the object’s `code` field."""
  code: IsoAlphaTwoCountryCodes
}

"""A `EpisodesLicense` edge in the connection."""
type EpisodesLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesLicense` at the end of the edge."""
  node: EpisodesLicense!
}

"""Methods to use when ordering `EpisodesLicense`."""
enum EpisodesLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime
}

"""
A connection to a list of `EpisodesProductionCountry` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesProductionCountriesConnection {
  """A list of `EpisodesProductionCountry` objects."""
  nodes: [EpisodesProductionCountry!]!

  """
  A list of edges which contains the `EpisodesProductionCountry` and cursor to aid in pagination.
  """
  edges: [EpisodesProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesProductionCountry {
  episodeId: Int!
  name: String!

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode
}

"""A `EpisodesProductionCountry` edge in the connection."""
type EpisodesProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesProductionCountry` at the end of the edge."""
  node: EpisodesProductionCountry!
}

"""Methods to use when ordering `EpisodesProductionCountry`."""
enum EpisodesProductionCountriesOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EpisodesProductionCountryCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A connection to a list of `EpisodesTvshowGenre` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesTvshowGenresConnection {
  """A list of `EpisodesTvshowGenre` objects."""
  nodes: [EpisodesTvshowGenre!]!

  """
  A list of edges which contains the `EpisodesTvshowGenre` and cursor to aid in pagination.
  """
  edges: [EpisodesTvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesTvshowGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesTvshowGenre {
  episodeId: Int!
  tvshowGenresId: Int!

  """
  Reads a single `Episode` that is related to this `EpisodesTvshowGenre`.
  """
  episode: Episode

  """
  Reads a single `TvshowGenre` that is related to this `EpisodesTvshowGenre`.
  """
  tvshowGenres: TvshowGenre
}

"""A `EpisodesTvshowGenre` edge in the connection."""
type EpisodesTvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesTvshowGenre` at the end of the edge."""
  node: EpisodesTvshowGenre!
}

"""Methods to use when ordering `EpisodesTvshowGenre`."""
enum EpisodesTvshowGenresOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  TVSHOW_GENRES_ID_ASC
  TVSHOW_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesTvshowGenre` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EpisodesTvshowGenreCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `tvshowGenresId` field."""
  tvshowGenresId: Int
}

"""
A connection to a list of `EpisodesImage` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesImagesConnection {
  """A list of `EpisodesImage` objects."""
  nodes: [EpisodesImage!]!

  """
  A list of edges which contains the `EpisodesImage` and cursor to aid in pagination.
  """
  edges: [EpisodesImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EpisodesImage` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesImage {
  episodeId: Int!
  imageId: UUID!
  imageType: EpisodeImageType!

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode
}

"""A `EpisodesImage` edge in the connection."""
type EpisodesImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesImage` at the end of the edge."""
  node: EpisodesImage!
}

"""Methods to use when ordering `EpisodesImage`."""
enum EpisodesImagesOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesImageCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: UUID

  """Checks for equality with the object’s `imageType` field."""
  imageType: EpisodeImageType
}

"""
A connection to a list of `EpisodesTrailer` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesTrailersConnection {
  """A list of `EpisodesTrailer` objects."""
  nodes: [EpisodesTrailer!]!

  """
  A list of edges which contains the `EpisodesTrailer` and cursor to aid in pagination.
  """
  edges: [EpisodesTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesTrailer` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesTrailer {
  episodeId: Int!
  videoId: UUID!

  """Reads a single `Episode` that is related to this `EpisodesTrailer`."""
  episode: Episode
}

"""A `EpisodesTrailer` edge in the connection."""
type EpisodesTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesTrailer` at the end of the edge."""
  node: EpisodesTrailer!
}

"""Methods to use when ordering `EpisodesTrailer`."""
enum EpisodesTrailersOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesTrailerCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: UUID
}

"""
A connection to a list of `EpisodesSnapshot` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type EpisodesSnapshotsConnection {
  """A list of `EpisodesSnapshot` objects."""
  nodes: [EpisodesSnapshot!]!

  """
  A list of edges which contains the `EpisodesSnapshot` and cursor to aid in pagination.
  """
  edges: [EpisodesSnapshotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesSnapshot` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type EpisodesSnapshot {
  episodeId: Int!
  snapshotId: Int!

  """Reads a single `Episode` that is related to this `EpisodesSnapshot`."""
  episode: Episode

  """Reads a single `Snapshot` that is related to this `EpisodesSnapshot`."""
  snapshot: Snapshot
}

"""A `EpisodesSnapshot` edge in the connection."""
type EpisodesSnapshotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesSnapshot` at the end of the edge."""
  node: EpisodesSnapshot!
}

"""Methods to use when ordering `EpisodesSnapshot`."""
enum EpisodesSnapshotsOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpisodesSnapshot` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesSnapshotCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: Int
}

"""A `Episode` edge in the connection."""
type EpisodesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Episode` at the end of the edge."""
  node: Episode!
}

"""Methods to use when ordering `Episode`."""
enum EpisodesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SEASON_ID_ASC
  SEASON_ID_DESC
  INDEX_ASC
  INDEX_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ORIGINAL_TITLE_ASC
  ORIGINAL_TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  MAIN_VIDEO_ID_ASC
  MAIN_VIDEO_ID_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Episode` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EpisodeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `index` field."""
  index: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `originalTitle` field."""
  originalTitle: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `mainVideoId` field."""
  mainVideoId: UUID

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus
}

"""
A connection to a list of `SeasonsSnapshot` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsSnapshotsConnection {
  """A list of `SeasonsSnapshot` objects."""
  nodes: [SeasonsSnapshot!]!

  """
  A list of edges which contains the `SeasonsSnapshot` and cursor to aid in pagination.
  """
  edges: [SeasonsSnapshotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SeasonsSnapshot` you could get from the connection.
  """
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type SeasonsSnapshot {
  seasonId: Int!
  snapshotId: Int!

  """Reads a single `Season` that is related to this `SeasonsSnapshot`."""
  season: Season

  """Reads a single `Snapshot` that is related to this `SeasonsSnapshot`."""
  snapshot: Snapshot
}

"""A `SeasonsSnapshot` edge in the connection."""
type SeasonsSnapshotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsSnapshot` at the end of the edge."""
  node: SeasonsSnapshot!
}

"""Methods to use when ordering `SeasonsSnapshot`."""
enum SeasonsSnapshotsOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonsSnapshot` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsSnapshotCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: Int
}

"""A `SeasonsTvshowGenre` edge in the connection."""
type SeasonsTvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsTvshowGenre` at the end of the edge."""
  node: SeasonsTvshowGenre!
}

"""A `TvshowsTvshowGenre` edge in the connection."""
type TvshowsTvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsTvshowGenre` at the end of the edge."""
  node: TvshowsTvshowGenre!
}

"""
A connection to a list of `TvshowsImage` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsImagesConnection {
  """A list of `TvshowsImage` objects."""
  nodes: [TvshowsImage!]!

  """
  A list of edges which contains the `TvshowsImage` and cursor to aid in pagination.
  """
  edges: [TvshowsImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsImage` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsImage {
  tvshowId: Int!
  imageId: UUID!
  imageType: TvshowImageType!

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow
}

"""A `TvshowsImage` edge in the connection."""
type TvshowsImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsImage` at the end of the edge."""
  node: TvshowsImage!
}

"""Methods to use when ordering `TvshowsImage`."""
enum TvshowsImagesOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsImageCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: UUID

  """Checks for equality with the object’s `imageType` field."""
  imageType: TvshowImageType
}

"""
A connection to a list of `TvshowsTrailer` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsTrailersConnection {
  """A list of `TvshowsTrailer` objects."""
  nodes: [TvshowsTrailer!]!

  """
  A list of edges which contains the `TvshowsTrailer` and cursor to aid in pagination.
  """
  edges: [TvshowsTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsTrailer` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN"""
type TvshowsTrailer {
  tvshowId: Int!
  videoId: UUID!

  """Reads a single `Tvshow` that is related to this `TvshowsTrailer`."""
  tvshow: Tvshow
}

"""A `TvshowsTrailer` edge in the connection."""
type TvshowsTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsTrailer` at the end of the edge."""
  node: TvshowsTrailer!
}

"""Methods to use when ordering `TvshowsTrailer`."""
enum TvshowsTrailersOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsTrailerCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: UUID
}

"""
A connection to a list of `Season` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type SeasonsConnection {
  """A list of `Season` objects."""
  nodes: [Season!]!

  """
  A list of edges which contains the `Season` and cursor to aid in pagination.
  """
  edges: [SeasonsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Season` you could get from the connection."""
  totalCount: Int!
}

"""A `Season` edge in the connection."""
type SeasonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Season` at the end of the edge."""
  node: Season!
}

"""Methods to use when ordering `Season`."""
enum SeasonsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  INDEX_ASC
  INDEX_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Season` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SeasonCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus
}

"""Methods to use when ordering `TvshowsSnapshot`."""
enum TvshowsSnapshotsOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowsSnapshot` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsSnapshotCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: Int
}

"""A `TvshowsSnapshot` edge in the connection."""
type TvshowsSnapshotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsSnapshot` at the end of the edge."""
  node: TvshowsSnapshot!
}

"""Methods to use when ordering `CollectionsSnapshot`."""
enum CollectionsSnapshotsOrderBy {
  NATURAL
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  SNAPSHOT_ID_ASC
  SNAPSHOT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CollectionsSnapshot` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CollectionsSnapshotCondition {
  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """Checks for equality with the object’s `snapshotId` field."""
  snapshotId: Int
}

"""A `CollectionsSnapshot` edge in the connection."""
type CollectionsSnapshotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionsSnapshot` at the end of the edge."""
  node: CollectionsSnapshot!
}

"""A `CollectionRelation` edge in the connection."""
type CollectionRelationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionRelation` at the end of the edge."""
  node: CollectionRelation!
}

"""
A connection to a list of `Collection` values.
@permissions: COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type CollectionsConnection {
  """A list of `Collection` objects."""
  nodes: [Collection!]!

  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Collection` you could get from the connection."""
  totalCount: Int!
}

"""A `Collection` edge in the connection."""
type CollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Collection` at the end of the edge."""
  node: Collection!
}

"""Methods to use when ordering `Collection`."""
enum CollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus
}

"""
A connection to a list of `IngestDocument` values.
@permissions: INGESTS_VIEW,INGESTS_EDIT,ADMIN
"""
type IngestDocumentsConnection {
  """A list of `IngestDocument` objects."""
  nodes: [IngestDocument!]!

  """
  A list of edges which contains the `IngestDocument` and cursor to aid in pagination.
  """
  edges: [IngestDocumentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `IngestDocument` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: INGESTS_VIEW,INGESTS_EDIT,ADMIN"""
type IngestDocument {
  id: Int!
  name: String!
  documentCreated: Datetime
  document: IngestDocumentObject!
  title: String!
  itemsCount: Int!
  errorCount: Int!
  successCount: Int!
  inProgressCount: Int!
  errors: [JSON]!
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  status: IngestStatus!

  """Reads and enables pagination through a set of `IngestItem`."""
  ingestItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IngestItem`."""
    orderBy: [IngestItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngestItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IngestItemFilter
  ): IngestItemsConnection!
}

scalar IngestDocumentObject

enum IngestStatus {
  """In Progress"""
  IN_PROGRESS

  """Success"""
  SUCCESS

  """Partial Success"""
  PARTIAL_SUCCESS

  """Error"""
  ERROR
}

"""
A connection to a list of `IngestItem` values.
@permissions: INGESTS_VIEW,INGESTS_EDIT,ADMIN
"""
type IngestItemsConnection {
  """A list of `IngestItem` objects."""
  nodes: [IngestItem!]!

  """
  A list of edges which contains the `IngestItem` and cursor to aid in pagination.
  """
  edges: [IngestItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `IngestItem` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: INGESTS_VIEW,INGESTS_EDIT,ADMIN"""
type IngestItem {
  id: Int!
  ingestDocumentId: Int!
  externalId: String!
  entityId: Int!
  item: IngestItemObject!
  displayTitle: String!
  processedTrailerIds: [UUID]!
  errors: [JSON]!
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  status: IngestItemStatus!
  existsStatus: IngestEntityExistsStatus!
  type: IngestItemType!

  """Reads a single `IngestDocument` that is related to this `IngestItem`."""
  ingestDocument: IngestDocument

  """Reads and enables pagination through a set of `IngestItemStep`."""
  ingestItemSteps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IngestItemStep`."""
    orderBy: [IngestItemStepsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IngestItemStepCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IngestItemStepFilter
  ): IngestItemStepsConnection!
}

scalar IngestItemObject

enum IngestItemStatus {
  """In Progress"""
  IN_PROGRESS

  """Success"""
  SUCCESS

  """Error"""
  ERROR
}

enum IngestEntityExistsStatus {
  """Existed"""
  EXISTED

  """Created"""
  CREATED

  """Error"""
  ERROR
}

enum IngestItemType {
  """Movie"""
  MOVIE

  """Tvshow"""
  TVSHOW

  """Season"""
  SEASON

  """Episode"""
  EPISODE
}

"""
A connection to a list of `IngestItemStep` values.
@permissions: INGESTS_VIEW,INGESTS_EDIT,ADMIN
"""
type IngestItemStepsConnection {
  """A list of `IngestItemStep` objects."""
  nodes: [IngestItemStep!]!

  """
  A list of edges which contains the `IngestItemStep` and cursor to aid in pagination.
  """
  edges: [IngestItemStepsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `IngestItemStep` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: INGESTS_VIEW,INGESTS_EDIT,ADMIN"""
type IngestItemStep {
  id: UUID!
  ingestItemId: Int!
  subType: String!
  responseMessage: String
  type: IngestItemStepType!
  status: IngestItemStepStatus!
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
  entityId: String

  """Reads a single `IngestItem` that is related to this `IngestItemStep`."""
  ingestItem: IngestItem
}

enum IngestItemStepType {
  """Entity"""
  ENTITY

  """Image"""
  IMAGE

  """Video"""
  VIDEO
}

enum IngestItemStepStatus {
  """In Progress"""
  IN_PROGRESS

  """Success"""
  SUCCESS

  """Error"""
  ERROR
}

"""A `IngestItemStep` edge in the connection."""
type IngestItemStepsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IngestItemStep` at the end of the edge."""
  node: IngestItemStep!
}

"""Methods to use when ordering `IngestItemStep`."""
enum IngestItemStepsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  INGEST_ITEM_ID_ASC
  INGEST_ITEM_ID_DESC
  SUB_TYPE_ASC
  SUB_TYPE_DESC
  RESPONSE_MESSAGE_ASC
  RESPONSE_MESSAGE_DESC
  TYPE_ASC
  TYPE_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `IngestItemStep` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input IngestItemStepCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `ingestItemId` field."""
  ingestItemId: Int

  """Checks for equality with the object’s `subType` field."""
  subType: String

  """Checks for equality with the object’s `responseMessage` field."""
  responseMessage: String

  """Checks for equality with the object’s `type` field."""
  type: IngestItemStepType

  """Checks for equality with the object’s `status` field."""
  status: IngestItemStepStatus

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: String
}

"""
A filter to be used against `IngestItemStep` object types. All fields are combined with a logical ‘and.’
"""
input IngestItemStepFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `ingestItemId` field."""
  ingestItemId: IntFilter

  """Filter by the object’s `subType` field."""
  subType: StringFilter

  """Filter by the object’s `responseMessage` field."""
  responseMessage: StringFilter

  """Filter by the object’s `type` field."""
  type: IngestItemStepTypeFilter

  """Filter by the object’s `status` field."""
  status: IngestItemStepStatusFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: StringFilter

  """Filter by the object’s `ingestItem` relation."""
  ingestItem: IngestItemFilter

  """Checks for all expressions in this list."""
  and: [IngestItemStepFilter!]

  """Checks for any expressions in this list."""
  or: [IngestItemStepFilter!]

  """Negates the expression."""
  not: IngestItemStepFilter
}

"""
A filter to be used against IngestItemStepType fields. All fields are combined with a logical ‘and.’
"""
input IngestItemStepTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestItemStepType

  """Not equal to the specified value."""
  notEqualTo: IngestItemStepType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestItemStepType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestItemStepType

  """Included in the specified list."""
  in: [IngestItemStepType!]

  """Not included in the specified list."""
  notIn: [IngestItemStepType!]

  """Less than the specified value."""
  lessThan: IngestItemStepType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestItemStepType

  """Greater than the specified value."""
  greaterThan: IngestItemStepType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestItemStepType
}

"""
A filter to be used against IngestItemStepStatus fields. All fields are combined with a logical ‘and.’
"""
input IngestItemStepStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestItemStepStatus

  """Not equal to the specified value."""
  notEqualTo: IngestItemStepStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestItemStepStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestItemStepStatus

  """Included in the specified list."""
  in: [IngestItemStepStatus!]

  """Not included in the specified list."""
  notIn: [IngestItemStepStatus!]

  """Less than the specified value."""
  lessThan: IngestItemStepStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestItemStepStatus

  """Greater than the specified value."""
  greaterThan: IngestItemStepStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestItemStepStatus
}

"""
A filter to be used against `IngestItem` object types. All fields are combined with a logical ‘and.’
"""
input IngestItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `ingestDocumentId` field."""
  ingestDocumentId: IntFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `entityId` field."""
  entityId: IntFilter

  """Filter by the object’s `item` field."""
  item: IngestItemObjectFilter

  """Filter by the object’s `displayTitle` field."""
  displayTitle: StringFilter

  """Filter by the object’s `processedTrailerIds` field."""
  processedTrailerIds: UUIDListFilter

  """Filter by the object’s `errors` field."""
  errors: JSONListFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `status` field."""
  status: IngestItemStatusFilter

  """Filter by the object’s `existsStatus` field."""
  existsStatus: IngestEntityExistsStatusFilter

  """Filter by the object’s `type` field."""
  type: IngestItemTypeFilter

  """Filter by the object’s `ingestItemSteps` relation."""
  ingestItemSteps: IngestItemToManyIngestItemStepFilter

  """Some related `ingestItemSteps` exist."""
  ingestItemStepsExist: Boolean

  """Filter by the object’s `ingestDocument` relation."""
  ingestDocument: IngestDocumentFilter

  """Checks for all expressions in this list."""
  and: [IngestItemFilter!]

  """Checks for any expressions in this list."""
  or: [IngestItemFilter!]

  """Negates the expression."""
  not: IngestItemFilter
}

"""
A filter to be used against IngestItemObject fields. All fields are combined with a logical ‘and.’
"""
input IngestItemObjectFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestItemObject

  """Not equal to the specified value."""
  notEqualTo: IngestItemObject

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestItemObject

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestItemObject

  """Included in the specified list."""
  in: [IngestItemObject!]

  """Not included in the specified list."""
  notIn: [IngestItemObject!]

  """Less than the specified value."""
  lessThan: IngestItemObject

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestItemObject

  """Greater than the specified value."""
  greaterThan: IngestItemObject

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestItemObject

  """Contains the specified JSON."""
  contains: IngestItemObject

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: IngestItemObject
}

"""
A filter to be used against UUID List fields. All fields are combined with a logical ‘and.’
"""
input UUIDListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [UUID]

  """Not equal to the specified value."""
  notEqualTo: [UUID]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [UUID]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [UUID]

  """Less than the specified value."""
  lessThan: [UUID]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [UUID]

  """Greater than the specified value."""
  greaterThan: [UUID]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [UUID]

  """Contains the specified list of values."""
  contains: [UUID]

  """Contained by the specified list of values."""
  containedBy: [UUID]

  """Overlaps the specified list of values."""
  overlaps: [UUID]

  """Any array item is equal to the specified value."""
  anyEqualTo: UUID

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: UUID

  """Any array item is less than the specified value."""
  anyLessThan: UUID

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: UUID

  """Any array item is greater than the specified value."""
  anyGreaterThan: UUID

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: UUID
}

"""
A filter to be used against JSON List fields. All fields are combined with a logical ‘and.’
"""
input JSONListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [JSON]

  """Not equal to the specified value."""
  notEqualTo: [JSON]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [JSON]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [JSON]

  """Less than the specified value."""
  lessThan: [JSON]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [JSON]

  """Greater than the specified value."""
  greaterThan: [JSON]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [JSON]

  """Contains the specified list of values."""
  contains: [JSON]

  """Contained by the specified list of values."""
  containedBy: [JSON]

  """Overlaps the specified list of values."""
  overlaps: [JSON]

  """Any array item is equal to the specified value."""
  anyEqualTo: JSON

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: JSON

  """Any array item is less than the specified value."""
  anyLessThan: JSON

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: JSON

  """Any array item is greater than the specified value."""
  anyGreaterThan: JSON

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: JSON
}

"""
A filter to be used against IngestItemStatus fields. All fields are combined with a logical ‘and.’
"""
input IngestItemStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestItemStatus

  """Not equal to the specified value."""
  notEqualTo: IngestItemStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestItemStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestItemStatus

  """Included in the specified list."""
  in: [IngestItemStatus!]

  """Not included in the specified list."""
  notIn: [IngestItemStatus!]

  """Less than the specified value."""
  lessThan: IngestItemStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestItemStatus

  """Greater than the specified value."""
  greaterThan: IngestItemStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestItemStatus
}

"""
A filter to be used against IngestEntityExistsStatus fields. All fields are combined with a logical ‘and.’
"""
input IngestEntityExistsStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestEntityExistsStatus

  """Not equal to the specified value."""
  notEqualTo: IngestEntityExistsStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestEntityExistsStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestEntityExistsStatus

  """Included in the specified list."""
  in: [IngestEntityExistsStatus!]

  """Not included in the specified list."""
  notIn: [IngestEntityExistsStatus!]

  """Less than the specified value."""
  lessThan: IngestEntityExistsStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestEntityExistsStatus

  """Greater than the specified value."""
  greaterThan: IngestEntityExistsStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestEntityExistsStatus
}

"""
A filter to be used against IngestItemType fields. All fields are combined with a logical ‘and.’
"""
input IngestItemTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestItemType

  """Not equal to the specified value."""
  notEqualTo: IngestItemType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestItemType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestItemType

  """Included in the specified list."""
  in: [IngestItemType!]

  """Not included in the specified list."""
  notIn: [IngestItemType!]

  """Less than the specified value."""
  lessThan: IngestItemType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestItemType

  """Greater than the specified value."""
  greaterThan: IngestItemType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestItemType
}

"""
A filter to be used against many `IngestItemStep` object types. All fields are combined with a logical ‘and.’
"""
input IngestItemToManyIngestItemStepFilter {
  """
  Every related `IngestItemStep` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: IngestItemStepFilter

  """
  Some related `IngestItemStep` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: IngestItemStepFilter

  """
  No related `IngestItemStep` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: IngestItemStepFilter
}

"""
A filter to be used against `IngestDocument` object types. All fields are combined with a logical ‘and.’
"""
input IngestDocumentFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `documentCreated` field."""
  documentCreated: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: IngestDocumentObjectFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `itemsCount` field."""
  itemsCount: IntFilter

  """Filter by the object’s `errorCount` field."""
  errorCount: IntFilter

  """Filter by the object’s `successCount` field."""
  successCount: IntFilter

  """Filter by the object’s `inProgressCount` field."""
  inProgressCount: IntFilter

  """Filter by the object’s `errors` field."""
  errors: JSONListFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `status` field."""
  status: IngestStatusFilter

  """Filter by the object’s `ingestItems` relation."""
  ingestItems: IngestDocumentToManyIngestItemFilter

  """Some related `ingestItems` exist."""
  ingestItemsExist: Boolean

  """Checks for all expressions in this list."""
  and: [IngestDocumentFilter!]

  """Checks for any expressions in this list."""
  or: [IngestDocumentFilter!]

  """Negates the expression."""
  not: IngestDocumentFilter
}

"""
A filter to be used against IngestDocumentObject fields. All fields are combined with a logical ‘and.’
"""
input IngestDocumentObjectFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestDocumentObject

  """Not equal to the specified value."""
  notEqualTo: IngestDocumentObject

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestDocumentObject

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestDocumentObject

  """Included in the specified list."""
  in: [IngestDocumentObject!]

  """Not included in the specified list."""
  notIn: [IngestDocumentObject!]

  """Less than the specified value."""
  lessThan: IngestDocumentObject

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestDocumentObject

  """Greater than the specified value."""
  greaterThan: IngestDocumentObject

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestDocumentObject

  """Contains the specified JSON."""
  contains: IngestDocumentObject

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: IngestDocumentObject
}

"""
A filter to be used against IngestStatus fields. All fields are combined with a logical ‘and.’
"""
input IngestStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IngestStatus

  """Not equal to the specified value."""
  notEqualTo: IngestStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IngestStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IngestStatus

  """Included in the specified list."""
  in: [IngestStatus!]

  """Not included in the specified list."""
  notIn: [IngestStatus!]

  """Less than the specified value."""
  lessThan: IngestStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IngestStatus

  """Greater than the specified value."""
  greaterThan: IngestStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IngestStatus
}

"""
A filter to be used against many `IngestItem` object types. All fields are combined with a logical ‘and.’
"""
input IngestDocumentToManyIngestItemFilter {
  """
  Every related `IngestItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: IngestItemFilter

  """
  Some related `IngestItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: IngestItemFilter

  """
  No related `IngestItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: IngestItemFilter
}

"""A `IngestItem` edge in the connection."""
type IngestItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IngestItem` at the end of the edge."""
  node: IngestItem!
}

"""Methods to use when ordering `IngestItem`."""
enum IngestItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  INGEST_DOCUMENT_ID_ASC
  INGEST_DOCUMENT_ID_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  ITEM_ASC
  ITEM_DESC
  DISPLAY_TITLE_ASC
  DISPLAY_TITLE_DESC
  PROCESSED_TRAILER_IDS_ASC
  PROCESSED_TRAILER_IDS_DESC
  ERRORS_ASC
  ERRORS_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  STATUS_ASC
  STATUS_DESC
  EXISTS_STATUS_ASC
  EXISTS_STATUS_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `IngestItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input IngestItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `ingestDocumentId` field."""
  ingestDocumentId: Int

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `entityId` field."""
  entityId: Int

  """Checks for equality with the object’s `item` field."""
  item: IngestItemObject

  """Checks for equality with the object’s `displayTitle` field."""
  displayTitle: String

  """Checks for equality with the object’s `processedTrailerIds` field."""
  processedTrailerIds: [UUID]

  """Checks for equality with the object’s `errors` field."""
  errors: [JSON]

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `status` field."""
  status: IngestItemStatus

  """Checks for equality with the object’s `existsStatus` field."""
  existsStatus: IngestEntityExistsStatus

  """Checks for equality with the object’s `type` field."""
  type: IngestItemType
}

"""A `IngestDocument` edge in the connection."""
type IngestDocumentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IngestDocument` at the end of the edge."""
  node: IngestDocument!
}

"""Methods to use when ordering `IngestDocument`."""
enum IngestDocumentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DOCUMENT_CREATED_ASC
  DOCUMENT_CREATED_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  TITLE_ASC
  TITLE_DESC
  ITEMS_COUNT_ASC
  ITEMS_COUNT_DESC
  ERROR_COUNT_ASC
  ERROR_COUNT_DESC
  SUCCESS_COUNT_ASC
  SUCCESS_COUNT_DESC
  IN_PROGRESS_COUNT_ASC
  IN_PROGRESS_COUNT_DESC
  ERRORS_ASC
  ERRORS_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  STATUS_ASC
  STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `IngestDocument` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input IngestDocumentCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `documentCreated` field."""
  documentCreated: Datetime

  """Checks for equality with the object’s `document` field."""
  document: IngestDocumentObject

  """
  Checks for equality with the object’s `title` field.
  @maxLength(50)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `itemsCount` field."""
  itemsCount: Int

  """Checks for equality with the object’s `errorCount` field."""
  errorCount: Int

  """Checks for equality with the object’s `successCount` field."""
  successCount: Int

  """Checks for equality with the object’s `inProgressCount` field."""
  inProgressCount: Int

  """Checks for equality with the object’s `errors` field."""
  errors: [JSON]

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `status` field."""
  status: IngestStatus
}

"""
A connection to a list of `MovieGenre` values.
@permissions: SETTINGS_VIEW,SETTINGS_EDIT,ADMIN
"""
type MovieGenresConnection {
  """A list of `MovieGenre` objects."""
  nodes: [MovieGenre!]!

  """
  A list of edges which contains the `MovieGenre` and cursor to aid in pagination.
  """
  edges: [MovieGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MovieGenre` you could get from the connection."""
  totalCount: Int!
}

"""A `MovieGenre` edge in the connection."""
type MovieGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MovieGenre` at the end of the edge."""
  node: MovieGenre!
}

"""Methods to use when ordering `MovieGenre`."""
enum MovieGenresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  SORT_ORDER_ASC
  SORT_ORDER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MovieGenre` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MovieGenreCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @isTrimmed()
  @maxLength(50)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `sortOrder` field."""
  sortOrder: Int

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A connection to a list of `Movie` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,ADMIN
"""
type MoviesConnection {
  """A list of `Movie` objects."""
  nodes: [Movie!]!

  """
  A list of edges which contains the `Movie` and cursor to aid in pagination.
  """
  edges: [MoviesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Movie` you could get from the connection."""
  totalCount: Int!
}

"""A `Movie` edge in the connection."""
type MoviesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Movie` at the end of the edge."""
  node: Movie!
}

"""Methods to use when ordering `Movie`."""
enum MoviesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ORIGINAL_TITLE_ASC
  ORIGINAL_TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  MAIN_VIDEO_ID_ASC
  MAIN_VIDEO_ID_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Movie` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MovieCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `originalTitle` field."""
  originalTitle: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `mainVideoId` field."""
  mainVideoId: UUID

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus
}

"""
A connection to a list of `Review` values.
@permissions: REVIEWS_VIEW,REVIEWS_EDIT,ADMIN
"""
type ReviewsConnection {
  """A list of `Review` objects."""
  nodes: [Review!]!

  """
  A list of edges which contains the `Review` and cursor to aid in pagination.
  """
  edges: [ReviewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Review` you could get from the connection."""
  totalCount: Int!
}

"""@permissions: REVIEWS_VIEW,REVIEWS_EDIT,ADMIN"""
type Review {
  id: Int!
  title: String!
  description: String!
  rating: Int
  createdDate: Datetime!
  updatedDate: Datetime!
  createdUser: String!
  updatedUser: String!
}

"""A `Review` edge in the connection."""
type ReviewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Review` at the end of the edge."""
  node: Review!
}

"""Methods to use when ordering `Review`."""
enum ReviewsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  RATING_ASC
  RATING_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Review` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReviewCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `rating` field."""
  rating: Int

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `Review` object types. All fields are combined with a logical ‘and.’
"""
input ReviewFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `rating` field."""
  rating: IntFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Checks for all expressions in this list."""
  and: [ReviewFilter!]

  """Checks for any expressions in this list."""
  or: [ReviewFilter!]

  """Negates the expression."""
  not: ReviewFilter
}

"""
A connection to a list of `Snapshot` values.
@permissions: MOVIES_VIEW,MOVIES_EDIT,TVSHOWS_VIEW,TVSHOWS_EDIT,SETTINGS_VIEW,SETTINGS_EDIT,COLLECTIONS_VIEW,COLLECTIONS_EDIT,ADMIN
"""
type SnapshotsConnection {
  """A list of `Snapshot` objects."""
  nodes: [Snapshot!]!

  """
  A list of edges which contains the `Snapshot` and cursor to aid in pagination.
  """
  edges: [SnapshotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Snapshot` you could get from the connection."""
  totalCount: Int!
}

"""A `Snapshot` edge in the connection."""
type SnapshotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Snapshot` at the end of the edge."""
  node: Snapshot!
}

"""Methods to use when ordering `Snapshot`."""
enum SnapshotsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENTITY_ID_ASC
  ENTITY_ID_DESC
  PUBLISH_ID_ASC
  PUBLISH_ID_DESC
  JOB_ID_ASC
  JOB_ID_DESC
  SNAPSHOT_NO_ASC
  SNAPSHOT_NO_DESC
  ENTITY_TITLE_ASC
  ENTITY_TITLE_DESC
  ENTITY_TYPE_ASC
  ENTITY_TYPE_DESC
  VALIDATION_STATUS_ASC
  VALIDATION_STATUS_DESC
  SNAPSHOT_JSON_ASC
  SNAPSHOT_JSON_DESC
  SNAPSHOT_STATE_ASC
  SNAPSHOT_STATE_DESC
  SCHEDULED_DATE_ASC
  SCHEDULED_DATE_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  UNPUBLISHED_DATE_ASC
  UNPUBLISHED_DATE_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  IS_LIST_SNAPSHOT_ASC
  IS_LIST_SNAPSHOT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Snapshot` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SnapshotCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `entityId` field."""
  entityId: Int

  """Checks for equality with the object’s `publishId` field."""
  publishId: String

  """Checks for equality with the object’s `jobId` field."""
  jobId: String

  """Checks for equality with the object’s `snapshotNo` field."""
  snapshotNo: Int

  """Checks for equality with the object’s `entityTitle` field."""
  entityTitle: String

  """Checks for equality with the object’s `entityType` field."""
  entityType: EntityType

  """Checks for equality with the object’s `validationStatus` field."""
  validationStatus: SnapshotValidationStatus

  """Checks for equality with the object’s `snapshotJson` field."""
  snapshotJson: JSON

  """Checks for equality with the object’s `snapshotState` field."""
  snapshotState: SnapshotState

  """Checks for equality with the object’s `scheduledDate` field."""
  scheduledDate: Datetime

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `unpublishedDate` field."""
  unpublishedDate: Datetime

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `isListSnapshot` field."""
  isListSnapshot: Boolean
}

"""
A connection to a list of `TvshowGenre` values.
@permissions: SETTINGS_VIEW,SETTINGS_EDIT,ADMIN
"""
type TvshowGenresConnection {
  """A list of `TvshowGenre` objects."""
  nodes: [TvshowGenre!]!

  """
  A list of edges which contains the `TvshowGenre` and cursor to aid in pagination.
  """
  edges: [TvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowGenre` you could get from the connection."""
  totalCount: Int!
}

"""A `TvshowGenre` edge in the connection."""
type TvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowGenre` at the end of the edge."""
  node: TvshowGenre!
}

"""Methods to use when ordering `TvshowGenre`."""
enum TvshowGenresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  SORT_ORDER_ASC
  SORT_ORDER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TvshowGenre` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TvshowGenreCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @isTrimmed()
  @maxLength(50)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `sortOrder` field."""
  sortOrder: Int

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A connection to a list of `Tvshow` values.
@permissions: TVSHOWS_VIEW,TVSHOWS_EDIT,ADMIN
"""
type TvshowsConnection {
  """A list of `Tvshow` objects."""
  nodes: [Tvshow!]!

  """
  A list of edges which contains the `Tvshow` and cursor to aid in pagination.
  """
  edges: [TvshowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tvshow` you could get from the connection."""
  totalCount: Int!
}

"""A `Tvshow` edge in the connection."""
type TvshowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tvshow` at the end of the edge."""
  node: Tvshow!
}

"""Methods to use when ordering `Tvshow`."""
enum TvshowsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ORIGINAL_TITLE_ASC
  ORIGINAL_TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Tvshow` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TvshowCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `originalTitle` field."""
  originalTitle: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus
}

"""A connection to a list of `String` values."""
type GetCollectionsTagsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetCollectionsTagsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetCollectionsTagsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetEpisodesCastsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetEpisodesCastsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetEpisodesCastsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetEpisodesProductionCountriesValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetEpisodesProductionCountriesValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetEpisodesProductionCountriesValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetEpisodesTagsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetEpisodesTagsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetEpisodesTagsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetMoviesCastsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetMoviesCastsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetMoviesCastsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetMoviesProductionCountriesValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetMoviesProductionCountriesValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetMoviesProductionCountriesValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetMoviesTagsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetMoviesTagsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetMoviesTagsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetSeasonsCastsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetSeasonsCastsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetSeasonsCastsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetSeasonsProductionCountriesValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetSeasonsProductionCountriesValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetSeasonsProductionCountriesValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetSeasonsTagsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetSeasonsTagsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetSeasonsTagsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetTvshowsCastsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetTvshowsCastsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetTvshowsCastsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetTvshowsProductionCountriesValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetTvshowsProductionCountriesValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetTvshowsProductionCountriesValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""A connection to a list of `String` values."""
type GetTvshowsTagsValuesConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetTvshowsTagsValueEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetTvshowsTagsValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""
Exposes all error codes and messages for errors that a service requests can throw. In some cases, messages that are actually thrown can be different, since they can include more details or a single code can used for different errors of the same type.
"""
enum ErrorCodesEnum {
  """
  An unhandled and unexpected error has occurred. Please contact the service support.
  """
  INTERNAL_SERVER_ERROR

  """
  An unhandled database-related has occurred. Please contact the service support.
  """
  UNHANDLED_DATABASE_ERROR

  """An unhandled error has occurred. Please contact the service support."""
  UNHANDLED_ERROR

  """
  An expected and handled database constraint error has occurred. The actual message will have more information.
  """
  DATABASE_VALIDATION_FAILED

  """
  An authorization database error has occurred. The user might not have enough permissions.
  """
  DATABASE_PERMISSIONS_CHECK_FAILED

  """
  A GraphQL validation error has occurred. Please make sure that the GraphQL request is made with correct syntax or parameters.
  """
  GRAPHQL_VALIDATION_FAILED

  """
  An application startup error has occurred. The actual message will have more information.
  """
  STARTUP_ERROR

  """The assertion check for the identifier %s failed."""
  ASSERTION_FAILED

  """
  This is a wrapper error for the original unhandled error of unsupported type.
  """
  ERROR_WRAPPER

  """Access Token is not provided"""
  ACCESS_TOKEN_REQUIRED

  """Access Token is invalid"""
  ACCESS_TOKEN_INVALID

  """Access Token has expired."""
  ACCESS_TOKEN_EXPIRED

  """User is not authorized to access the operation."""
  USER_NOT_AUTHORIZED

  """
  Could not find a matching signing key to verify the access token. The signing key used to create the token may have been revoked or the Tenant/Environment/Application configuration is erroneous.
  """
  SIGNING_KEY_NOT_FOUND

  """
  Error occurred while trying to fetch signing keys from the JWKS endpoint for the Tenant/Environment/Application.
  """
  JWKS_ERROR

  """Access token verification failed"""
  ACCESS_TOKEN_VERIFICATION_FAILED

  """The Identity service is not accessible. Please contact Axinom support."""
  IDENTITY_SERVICE_NOT_ACCESSIBLE

  """The User service is not accessible. Please contact Axinom support."""
  USER_SERVICE_NOT_ACCESSIBLE

  """Auth config is invalid."""
  AUTH_CONFIG_INVALID

  """Passed JWT is not a Mosaic End-User Token. Cannot be verified."""
  JWT_IS_NOT_MOSAIC_TOKEN

  """The token is not an Authenticated End-User"""
  NOT_AUTHENTICATED_END_USER

  """The token is not an End-User Application"""
  NOT_END_USER_APPLICATION

  """The object is not a GenericAuthenticatedSubject"""
  NOT_GENERIC_AUTHENTICATED_SUBJECT

  """The object is not a AuthenticatedManagementSubject"""
  NOT_AUTHENTICATED_MANAGEMENT_SUBJECT

  """The object is not a AuthenticatedRequest"""
  NOT_AUTHENTICATED_REQUEST

  """The object is not a ManagementAuthenticationContext"""
  NOT_MANAGEMENT_AUTHENTICATION_CONTEXT

  """The object is not an EndUserAuthenticationContext"""
  NOT_END_USER_AUTHENTICATION_CONTEXT

  """Malformed access token received"""
  MALFORMED_TOKEN

  """Ingest Document validation has failed."""
  INGEST_VALIDATION_ERROR

  """
  An error has occurred during the ingest process. The actual message will have more information.
  """
  INGEST_ERROR

  """Unable to retrieve videos metadata."""
  PUBLISH_VIDEOS_METADATA_REQUEST_ERROR

  """Unable to retrieve images metadata."""
  PUBLISH_IMAGES_METADATA_REQUEST_ERROR

  """Attempt to publish media has failed."""
  PUBLISH_ERROR

  """Attempt to unpublish media has failed."""
  UNPUBLISH_ERROR

  """Attempt to create a media snapshot has failed."""
  CREATE_SNAPSHOT_ERROR

  """
  Unable to generate display title for ingest item. Ingest media type '%s' is not supported.
  """
  UNSUPPORTED_INGEST_MEDIA_TYPE

  """The snapshot with ID '%s' was not found."""
  SNAPSHOT_NOT_FOUND

  """%s with ID '%s' was not found."""
  MEDIA_NOT_FOUND

  """
  The subject was provided, but it does not have enough permissions to perform the operation.
  """
  NOT_ENOUGH_PERMISSIONS
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `CollectionRelation`."""
  createCollectionRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionRelationInput!
  ): CreateCollectionRelationPayload

  """Creates a single `Collection`."""
  createCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionInput!
  ): CreateCollectionPayload

  """Creates a single `CollectionsImage`."""
  createCollectionsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionsImageInput!
  ): CreateCollectionsImagePayload

  """Creates a single `CollectionsTag`."""
  createCollectionsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionsTagInput!
  ): CreateCollectionsTagPayload

  """Creates a single `Episode`."""
  createEpisode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodeInput!
  ): CreateEpisodePayload

  """Creates a single `EpisodesCast`."""
  createEpisodesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesCastInput!
  ): CreateEpisodesCastPayload

  """Creates a single `EpisodesImage`."""
  createEpisodesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesImageInput!
  ): CreateEpisodesImagePayload

  """Creates a single `EpisodesLicense`."""
  createEpisodesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesLicenseInput!
  ): CreateEpisodesLicensePayload

  """Creates a single `EpisodesLicensesCountry`."""
  createEpisodesLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesLicensesCountryInput!
  ): CreateEpisodesLicensesCountryPayload

  """Creates a single `EpisodesProductionCountry`."""
  createEpisodesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesProductionCountryInput!
  ): CreateEpisodesProductionCountryPayload

  """Creates a single `EpisodesTag`."""
  createEpisodesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesTagInput!
  ): CreateEpisodesTagPayload

  """Creates a single `EpisodesTrailer`."""
  createEpisodesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesTrailerInput!
  ): CreateEpisodesTrailerPayload

  """Creates a single `EpisodesTvshowGenre`."""
  createEpisodesTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesTvshowGenreInput!
  ): CreateEpisodesTvshowGenrePayload

  """Creates a single `MovieGenre`."""
  createMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMovieGenreInput!
  ): CreateMovieGenrePayload

  """Creates a single `Movie`."""
  createMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMovieInput!
  ): CreateMoviePayload

  """Creates a single `MoviesCast`."""
  createMoviesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesCastInput!
  ): CreateMoviesCastPayload

  """Creates a single `MoviesImage`."""
  createMoviesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesImageInput!
  ): CreateMoviesImagePayload

  """Creates a single `MoviesLicense`."""
  createMoviesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesLicenseInput!
  ): CreateMoviesLicensePayload

  """Creates a single `MoviesLicensesCountry`."""
  createMoviesLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesLicensesCountryInput!
  ): CreateMoviesLicensesCountryPayload

  """Creates a single `MoviesMovieGenre`."""
  createMoviesMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesMovieGenreInput!
  ): CreateMoviesMovieGenrePayload

  """Creates a single `MoviesProductionCountry`."""
  createMoviesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesProductionCountryInput!
  ): CreateMoviesProductionCountryPayload

  """Creates a single `MoviesTag`."""
  createMoviesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesTagInput!
  ): CreateMoviesTagPayload

  """Creates a single `MoviesTrailer`."""
  createMoviesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesTrailerInput!
  ): CreateMoviesTrailerPayload

  """Creates a single `Review`."""
  createReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewInput!
  ): CreateReviewPayload

  """Creates a single `Season`."""
  createSeason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonInput!
  ): CreateSeasonPayload

  """Creates a single `SeasonsCast`."""
  createSeasonsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsCastInput!
  ): CreateSeasonsCastPayload

  """Creates a single `SeasonsImage`."""
  createSeasonsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsImageInput!
  ): CreateSeasonsImagePayload

  """Creates a single `SeasonsLicense`."""
  createSeasonsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsLicenseInput!
  ): CreateSeasonsLicensePayload

  """Creates a single `SeasonsLicensesCountry`."""
  createSeasonsLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsLicensesCountryInput!
  ): CreateSeasonsLicensesCountryPayload

  """Creates a single `SeasonsProductionCountry`."""
  createSeasonsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsProductionCountryInput!
  ): CreateSeasonsProductionCountryPayload

  """Creates a single `SeasonsTag`."""
  createSeasonsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsTagInput!
  ): CreateSeasonsTagPayload

  """Creates a single `SeasonsTrailer`."""
  createSeasonsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsTrailerInput!
  ): CreateSeasonsTrailerPayload

  """Creates a single `SeasonsTvshowGenre`."""
  createSeasonsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsTvshowGenreInput!
  ): CreateSeasonsTvshowGenrePayload

  """Creates a single `TvshowGenre`."""
  createTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowGenreInput!
  ): CreateTvshowGenrePayload

  """Creates a single `Tvshow`."""
  createTvshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowInput!
  ): CreateTvshowPayload

  """Creates a single `TvshowsCast`."""
  createTvshowsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsCastInput!
  ): CreateTvshowsCastPayload

  """Creates a single `TvshowsImage`."""
  createTvshowsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsImageInput!
  ): CreateTvshowsImagePayload

  """Creates a single `TvshowsLicense`."""
  createTvshowsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsLicenseInput!
  ): CreateTvshowsLicensePayload

  """Creates a single `TvshowsLicensesCountry`."""
  createTvshowsLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsLicensesCountryInput!
  ): CreateTvshowsLicensesCountryPayload

  """Creates a single `TvshowsProductionCountry`."""
  createTvshowsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsProductionCountryInput!
  ): CreateTvshowsProductionCountryPayload

  """Creates a single `TvshowsTag`."""
  createTvshowsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsTagInput!
  ): CreateTvshowsTagPayload

  """Creates a single `TvshowsTrailer`."""
  createTvshowsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsTrailerInput!
  ): CreateTvshowsTrailerPayload

  """Creates a single `TvshowsTvshowGenre`."""
  createTvshowsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsTvshowGenreInput!
  ): CreateTvshowsTvshowGenrePayload

  """Updates a single `CollectionRelation` using a unique key and a patch."""
  updateCollectionRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionRelationInput!
  ): UpdateCollectionRelationPayload

  """Updates a single `Collection` using a unique key and a patch."""
  updateCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload

  """Updates a single `Collection` using a unique key and a patch."""
  updateCollectionByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByExternalIdInput!
  ): UpdateCollectionPayload

  """Updates a single `CollectionsImage` using a unique key and a patch."""
  updateCollectionsImageByCollectionIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionsImageByCollectionIdAndImageTypeInput!
  ): UpdateCollectionsImagePayload

  """Updates a single `CollectionsTag` using a unique key and a patch."""
  updateCollectionsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionsTagInput!
  ): UpdateCollectionsTagPayload

  """Updates a single `Episode` using a unique key and a patch."""
  updateEpisode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodeInput!
  ): UpdateEpisodePayload

  """Updates a single `Episode` using a unique key and a patch."""
  updateEpisodeByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodeByExternalIdInput!
  ): UpdateEpisodePayload

  """Updates a single `EpisodesCast` using a unique key and a patch."""
  updateEpisodesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesCastInput!
  ): UpdateEpisodesCastPayload

  """Updates a single `EpisodesImage` using a unique key and a patch."""
  updateEpisodesImageByEpisodeIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesImageByEpisodeIdAndImageTypeInput!
  ): UpdateEpisodesImagePayload

  """Updates a single `EpisodesLicense` using a unique key and a patch."""
  updateEpisodesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesLicenseInput!
  ): UpdateEpisodesLicensePayload

  """
  Updates a single `EpisodesLicensesCountry` using a unique key and a patch.
  """
  updateEpisodesLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesLicensesCountryInput!
  ): UpdateEpisodesLicensesCountryPayload

  """
  Updates a single `EpisodesProductionCountry` using a unique key and a patch.
  """
  updateEpisodesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesProductionCountryInput!
  ): UpdateEpisodesProductionCountryPayload

  """Updates a single `EpisodesTag` using a unique key and a patch."""
  updateEpisodesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesTagInput!
  ): UpdateEpisodesTagPayload

  """Updates a single `IngestDocument` using a unique key and a patch."""
  updateIngestDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIngestDocumentInput!
  ): UpdateIngestDocumentPayload

  """Updates a single `MovieGenre` using a unique key and a patch."""
  updateMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieGenreInput!
  ): UpdateMovieGenrePayload

  """Updates a single `Movie` using a unique key and a patch."""
  updateMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieInput!
  ): UpdateMoviePayload

  """Updates a single `Movie` using a unique key and a patch."""
  updateMovieByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieByExternalIdInput!
  ): UpdateMoviePayload

  """Updates a single `MoviesCast` using a unique key and a patch."""
  updateMoviesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesCastInput!
  ): UpdateMoviesCastPayload

  """Updates a single `MoviesImage` using a unique key and a patch."""
  updateMoviesImageByMovieIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesImageByMovieIdAndImageTypeInput!
  ): UpdateMoviesImagePayload

  """Updates a single `MoviesLicense` using a unique key and a patch."""
  updateMoviesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesLicenseInput!
  ): UpdateMoviesLicensePayload

  """
  Updates a single `MoviesLicensesCountry` using a unique key and a patch.
  """
  updateMoviesLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesLicensesCountryInput!
  ): UpdateMoviesLicensesCountryPayload

  """
  Updates a single `MoviesProductionCountry` using a unique key and a patch.
  """
  updateMoviesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesProductionCountryInput!
  ): UpdateMoviesProductionCountryPayload

  """Updates a single `MoviesTag` using a unique key and a patch."""
  updateMoviesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesTagInput!
  ): UpdateMoviesTagPayload

  """Updates a single `Review` using a unique key and a patch."""
  updateReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewInput!
  ): UpdateReviewPayload

  """Updates a single `Season` using a unique key and a patch."""
  updateSeason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonInput!
  ): UpdateSeasonPayload

  """Updates a single `Season` using a unique key and a patch."""
  updateSeasonByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonByExternalIdInput!
  ): UpdateSeasonPayload

  """Updates a single `SeasonsCast` using a unique key and a patch."""
  updateSeasonsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsCastInput!
  ): UpdateSeasonsCastPayload

  """Updates a single `SeasonsImage` using a unique key and a patch."""
  updateSeasonsImageBySeasonIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsImageBySeasonIdAndImageTypeInput!
  ): UpdateSeasonsImagePayload

  """Updates a single `SeasonsLicense` using a unique key and a patch."""
  updateSeasonsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsLicenseInput!
  ): UpdateSeasonsLicensePayload

  """
  Updates a single `SeasonsLicensesCountry` using a unique key and a patch.
  """
  updateSeasonsLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsLicensesCountryInput!
  ): UpdateSeasonsLicensesCountryPayload

  """
  Updates a single `SeasonsProductionCountry` using a unique key and a patch.
  """
  updateSeasonsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsProductionCountryInput!
  ): UpdateSeasonsProductionCountryPayload

  """Updates a single `SeasonsTag` using a unique key and a patch."""
  updateSeasonsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsTagInput!
  ): UpdateSeasonsTagPayload

  """Updates a single `TvshowGenre` using a unique key and a patch."""
  updateTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowGenreInput!
  ): UpdateTvshowGenrePayload

  """Updates a single `Tvshow` using a unique key and a patch."""
  updateTvshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowInput!
  ): UpdateTvshowPayload

  """Updates a single `Tvshow` using a unique key and a patch."""
  updateTvshowByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowByExternalIdInput!
  ): UpdateTvshowPayload

  """Updates a single `TvshowsCast` using a unique key and a patch."""
  updateTvshowsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsCastInput!
  ): UpdateTvshowsCastPayload

  """Updates a single `TvshowsImage` using a unique key and a patch."""
  updateTvshowsImageByTvshowIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsImageByTvshowIdAndImageTypeInput!
  ): UpdateTvshowsImagePayload

  """Updates a single `TvshowsLicense` using a unique key and a patch."""
  updateTvshowsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsLicenseInput!
  ): UpdateTvshowsLicensePayload

  """
  Updates a single `TvshowsLicensesCountry` using a unique key and a patch.
  """
  updateTvshowsLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsLicensesCountryInput!
  ): UpdateTvshowsLicensesCountryPayload

  """
  Updates a single `TvshowsProductionCountry` using a unique key and a patch.
  """
  updateTvshowsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsProductionCountryInput!
  ): UpdateTvshowsProductionCountryPayload

  """Updates a single `TvshowsTag` using a unique key and a patch."""
  updateTvshowsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsTagInput!
  ): UpdateTvshowsTagPayload

  """Deletes a single `CollectionRelation` using a unique key."""
  deleteCollectionRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionRelationInput!
  ): DeleteCollectionRelationPayload

  """Deletes a single `Collection` using a unique key."""
  deleteCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionInput!
  ): DeleteCollectionPayload

  """Deletes a single `Collection` using a unique key."""
  deleteCollectionByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByExternalIdInput!
  ): DeleteCollectionPayload

  """Deletes a single `CollectionsImage` using a unique key."""
  deleteCollectionsImageByCollectionIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionsImageByCollectionIdAndImageTypeInput!
  ): DeleteCollectionsImagePayload

  """Deletes a single `CollectionsTag` using a unique key."""
  deleteCollectionsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionsTagInput!
  ): DeleteCollectionsTagPayload

  """Deletes a single `Episode` using a unique key."""
  deleteEpisode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodeInput!
  ): DeleteEpisodePayload

  """Deletes a single `Episode` using a unique key."""
  deleteEpisodeByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodeByExternalIdInput!
  ): DeleteEpisodePayload

  """Deletes a single `EpisodesCast` using a unique key."""
  deleteEpisodesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesCastInput!
  ): DeleteEpisodesCastPayload

  """Deletes a single `EpisodesImage` using a unique key."""
  deleteEpisodesImageByEpisodeIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesImageByEpisodeIdAndImageTypeInput!
  ): DeleteEpisodesImagePayload

  """Deletes a single `EpisodesLicense` using a unique key."""
  deleteEpisodesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesLicenseInput!
  ): DeleteEpisodesLicensePayload

  """Deletes a single `EpisodesLicensesCountry` using a unique key."""
  deleteEpisodesLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesLicensesCountryInput!
  ): DeleteEpisodesLicensesCountryPayload

  """Deletes a single `EpisodesProductionCountry` using a unique key."""
  deleteEpisodesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesProductionCountryInput!
  ): DeleteEpisodesProductionCountryPayload

  """Deletes a single `EpisodesTag` using a unique key."""
  deleteEpisodesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTagInput!
  ): DeleteEpisodesTagPayload

  """Deletes a single `EpisodesTrailer` using a unique key."""
  deleteEpisodesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTrailerInput!
  ): DeleteEpisodesTrailerPayload

  """Deletes a single `EpisodesTvshowGenre` using a unique key."""
  deleteEpisodesTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTvshowGenreInput!
  ): DeleteEpisodesTvshowGenrePayload

  """Deletes a single `MovieGenre` using a unique key."""
  deleteMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieGenreInput!
  ): DeleteMovieGenrePayload

  """Deletes a single `Movie` using a unique key."""
  deleteMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieInput!
  ): DeleteMoviePayload

  """Deletes a single `Movie` using a unique key."""
  deleteMovieByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieByExternalIdInput!
  ): DeleteMoviePayload

  """Deletes a single `MoviesCast` using a unique key."""
  deleteMoviesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesCastInput!
  ): DeleteMoviesCastPayload

  """Deletes a single `MoviesImage` using a unique key."""
  deleteMoviesImageByMovieIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesImageByMovieIdAndImageTypeInput!
  ): DeleteMoviesImagePayload

  """Deletes a single `MoviesLicense` using a unique key."""
  deleteMoviesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesLicenseInput!
  ): DeleteMoviesLicensePayload

  """Deletes a single `MoviesLicensesCountry` using a unique key."""
  deleteMoviesLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesLicensesCountryInput!
  ): DeleteMoviesLicensesCountryPayload

  """Deletes a single `MoviesMovieGenre` using a unique key."""
  deleteMoviesMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesMovieGenreInput!
  ): DeleteMoviesMovieGenrePayload

  """Deletes a single `MoviesProductionCountry` using a unique key."""
  deleteMoviesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesProductionCountryInput!
  ): DeleteMoviesProductionCountryPayload

  """Deletes a single `MoviesTag` using a unique key."""
  deleteMoviesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesTagInput!
  ): DeleteMoviesTagPayload

  """Deletes a single `MoviesTrailer` using a unique key."""
  deleteMoviesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesTrailerInput!
  ): DeleteMoviesTrailerPayload

  """Deletes a single `Review` using a unique key."""
  deleteReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewInput!
  ): DeleteReviewPayload

  """Deletes a single `Season` using a unique key."""
  deleteSeason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonInput!
  ): DeleteSeasonPayload

  """Deletes a single `Season` using a unique key."""
  deleteSeasonByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonByExternalIdInput!
  ): DeleteSeasonPayload

  """Deletes a single `SeasonsCast` using a unique key."""
  deleteSeasonsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsCastInput!
  ): DeleteSeasonsCastPayload

  """Deletes a single `SeasonsImage` using a unique key."""
  deleteSeasonsImageBySeasonIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsImageBySeasonIdAndImageTypeInput!
  ): DeleteSeasonsImagePayload

  """Deletes a single `SeasonsLicense` using a unique key."""
  deleteSeasonsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsLicenseInput!
  ): DeleteSeasonsLicensePayload

  """Deletes a single `SeasonsLicensesCountry` using a unique key."""
  deleteSeasonsLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsLicensesCountryInput!
  ): DeleteSeasonsLicensesCountryPayload

  """Deletes a single `SeasonsProductionCountry` using a unique key."""
  deleteSeasonsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsProductionCountryInput!
  ): DeleteSeasonsProductionCountryPayload

  """Deletes a single `SeasonsTag` using a unique key."""
  deleteSeasonsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTagInput!
  ): DeleteSeasonsTagPayload

  """Deletes a single `SeasonsTrailer` using a unique key."""
  deleteSeasonsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTrailerInput!
  ): DeleteSeasonsTrailerPayload

  """Deletes a single `SeasonsTvshowGenre` using a unique key."""
  deleteSeasonsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTvshowGenreInput!
  ): DeleteSeasonsTvshowGenrePayload

  """Deletes a single `Snapshot` using a unique key."""
  deleteSnapshot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSnapshotInput!
  ): DeleteSnapshotPayload

  """Deletes a single `TvshowGenre` using a unique key."""
  deleteTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowGenreInput!
  ): DeleteTvshowGenrePayload

  """Deletes a single `Tvshow` using a unique key."""
  deleteTvshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowInput!
  ): DeleteTvshowPayload

  """Deletes a single `Tvshow` using a unique key."""
  deleteTvshowByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowByExternalIdInput!
  ): DeleteTvshowPayload

  """Deletes a single `TvshowsCast` using a unique key."""
  deleteTvshowsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsCastInput!
  ): DeleteTvshowsCastPayload

  """Deletes a single `TvshowsImage` using a unique key."""
  deleteTvshowsImageByTvshowIdAndImageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsImageByTvshowIdAndImageTypeInput!
  ): DeleteTvshowsImagePayload

  """Deletes a single `TvshowsLicense` using a unique key."""
  deleteTvshowsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsLicenseInput!
  ): DeleteTvshowsLicensePayload

  """Deletes a single `TvshowsLicensesCountry` using a unique key."""
  deleteTvshowsLicensesCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsLicensesCountryInput!
  ): DeleteTvshowsLicensesCountryPayload

  """Deletes a single `TvshowsProductionCountry` using a unique key."""
  deleteTvshowsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsProductionCountryInput!
  ): DeleteTvshowsProductionCountryPayload

  """Deletes a single `TvshowsTag` using a unique key."""
  deleteTvshowsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTagInput!
  ): DeleteTvshowsTagPayload

  """Deletes a single `TvshowsTrailer` using a unique key."""
  deleteTvshowsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTrailerInput!
  ): DeleteTvshowsTrailerPayload

  """Deletes a single `TvshowsTvshowGenre` using a unique key."""
  deleteTvshowsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTvshowGenreInput!
  ): DeleteTvshowsTvshowGenrePayload
  startIngest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StartIngestInput!
  ): StartIngestPayload
  recreateSnapshots(
    """Filter for bulk selecting items."""
    filter: SnapshotFilter
  ): BulkPublishingPayload
  publishSnapshot(snapshotId: Int!): Snapshot
  unpublishSnapshot(snapshotId: Int!): Snapshot
  publishSnapshots(
    """Filter for bulk selecting items."""
    filter: SnapshotFilter
  ): BulkPublishingPayload
  unpublishSnapshots(
    """Filter for bulk selecting items."""
    filter: SnapshotFilter
  ): BulkMutationPayload
  deleteSnapshots(filter: SnapshotFilter): BulkMutationIntPayload
  createCollectionSnapshots(
    """Filter for bulk selecting items."""
    filter: CollectionFilter
  ): BulkPublishingPayload
  publishCollections(
    """Filter for bulk selecting items."""
    filter: CollectionFilter
  ): BulkPublishingPayload
  unpublishCollections(
    """Filter for bulk selecting items."""
    filter: CollectionFilter
  ): BulkMutationPayload

  """
  Creates a Collection snapshot and immediately publishes it if it's valid.
  """
  publishCollection(
    """ID of the collection to publish."""
    collectionId: Int!
  ): Snapshot

  """Unpublishes the currently published Collection snapshot."""
  unpublishCollection(
    """ID of the collection to unpublish."""
    collectionId: Int!
  ): Snapshot

  """Creates a new Collection snapshot."""
  createCollectionSnapshot(
    """ID of the collection to create a snapshot from."""
    collectionId: Int!
  ): Snapshot
  deleteCollections(filter: CollectionFilter): BulkMutationIntPayload
  deleteCollectionRelations(filter: CollectionRelationFilter): BulkMutationIntPayload
  createMovieSnapshots(
    """Filter for bulk selecting items."""
    filter: MovieFilter
  ): BulkPublishingPayload
  publishMovies(
    """Filter for bulk selecting items."""
    filter: MovieFilter
  ): BulkPublishingPayload
  unpublishMovies(
    """Filter for bulk selecting items."""
    filter: MovieFilter
  ): BulkMutationPayload

  """Creates a Movie snapshot and immediately publishes it if it's valid."""
  publishMovie(
    """ID of the movie to publish."""
    movieId: Int!
  ): Snapshot

  """Unpublishes the currently published Movie snapshot."""
  unpublishMovie(
    """ID of the movie to unpublish."""
    movieId: Int!
  ): Snapshot

  """Creates a new Movie snapshot."""
  createMovieSnapshot(
    """ID of the movie to create a snapshot from."""
    movieId: Int!
  ): Snapshot
  deleteMoviesLicenses(filter: MoviesLicenseFilter): BulkMutationIntPayload
  deleteMovieGenres(filter: MovieGenreFilter): BulkMutationIntPayload
  deleteMovies(filter: MovieFilter): BulkMutationIntPayload

  """
  Creates a Movie genres snapshot and immediately publishes it if it's valid.
  """
  publishMovieGenres: Snapshot

  """Unpublishes the currently published Movie genres snapshot."""
  unpublishMovieGenres: Snapshot

  """Creates a new Movie genres snapshot."""
  createMovieGenresSnapshot: Snapshot
  createEpisodeSnapshots(
    """Filter for bulk selecting items."""
    filter: EpisodeFilter
  ): BulkPublishingPayload
  createSeasonSnapshots(
    """Filter for bulk selecting items."""
    filter: SeasonFilter
  ): BulkPublishingPayload
  createTvshowSnapshots(
    """Filter for bulk selecting items."""
    filter: TvshowFilter
  ): BulkPublishingPayload
  publishEpisodes(
    """Filter for bulk selecting items."""
    filter: EpisodeFilter
  ): BulkPublishingPayload
  publishSeasons(
    """Filter for bulk selecting items."""
    filter: SeasonFilter
  ): BulkPublishingPayload
  publishTvshows(
    """Filter for bulk selecting items."""
    filter: TvshowFilter
  ): BulkPublishingPayload
  unpublishEpisodes(
    """Filter for bulk selecting items."""
    filter: EpisodeFilter
  ): BulkMutationPayload
  unpublishSeasons(
    """Filter for bulk selecting items."""
    filter: SeasonFilter
  ): BulkMutationPayload
  unpublishTvshows(
    """Filter for bulk selecting items."""
    filter: TvshowFilter
  ): BulkMutationPayload

  """Creates a Tvshow snapshot and immediately publishes it if it's valid."""
  publishTvshow(
    """ID of the tvshow to publish."""
    tvshowId: Int!
  ): Snapshot

  """Unpublishes the currently published Tvshow snapshot."""
  unpublishTvshow(
    """ID of the tvshow to unpublish."""
    tvshowId: Int!
  ): Snapshot

  """Creates a new Tvshow snapshot."""
  createTvshowSnapshot(
    """ID of the tvshow to create a snapshot from."""
    tvshowId: Int!
  ): Snapshot

  """Creates a Season snapshot and immediately publishes it if it's valid."""
  publishSeason(
    """ID of the season to publish."""
    seasonId: Int!
  ): Snapshot

  """Unpublishes the currently published Season snapshot."""
  unpublishSeason(
    """ID of the season to unpublish."""
    seasonId: Int!
  ): Snapshot

  """Creates a new Season snapshot."""
  createSeasonSnapshot(
    """ID of the season to create a snapshot from."""
    seasonId: Int!
  ): Snapshot

  """Creates a Episode snapshot and immediately publishes it if it's valid."""
  publishEpisode(
    """ID of the episode to publish."""
    episodeId: Int!
  ): Snapshot

  """Unpublishes the currently published Episode snapshot."""
  unpublishEpisode(
    """ID of the episode to unpublish."""
    episodeId: Int!
  ): Snapshot

  """Creates a new Episode snapshot."""
  createEpisodeSnapshot(
    """ID of the episode to create a snapshot from."""
    episodeId: Int!
  ): Snapshot
  deleteTvshowsLicenses(filter: TvshowsLicenseFilter): BulkMutationIntPayload
  deleteSeasonsLicenses(filter: SeasonsLicenseFilter): BulkMutationIntPayload
  deleteEpisodesLicenses(filter: EpisodesLicenseFilter): BulkMutationIntPayload
  deleteEpisodes(filter: EpisodeFilter): BulkMutationIntPayload
  deleteSeasons(filter: SeasonFilter): BulkMutationIntPayload
  deleteTvshowGenres(filter: TvshowGenreFilter): BulkMutationIntPayload
  deleteTvshows(filter: TvshowFilter): BulkMutationIntPayload

  """
  Creates a Tvshow genres snapshot and immediately publishes it if it's valid.
  """
  publishTvshowGenres: Snapshot

  """Unpublishes the currently published Tvshow genres snapshot."""
  unpublishTvshowGenres: Snapshot

  """Creates a new Tvshow genres snapshot."""
  createTvshowGenresSnapshot: Snapshot
  populateCollections(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PopulateInput!
  ): PopulatePayload
  populateMovies(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PopulateInput!
  ): PopulatePayload
  populateTvshows(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PopulateInput!
  ): PopulatePayload
}

"""The output of our create `CollectionRelation` mutation."""
type CreateCollectionRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionRelation` that was created by this mutation."""
  collectionRelation: CollectionRelation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode

  """An edge for our `CollectionRelation`. May be used by Relay 1."""
  collectionRelationEdge(
    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionRelationsEdge
}

"""
All input for the create `CollectionRelation` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input CreateCollectionRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CollectionRelation` to be created by this mutation."""
  collectionRelation: CollectionRelationInput!
}

"""An input for mutations affecting `CollectionRelation`"""
input CollectionRelationInput {
  id: Int
  collectionId: Int!
  sortOrder: Int!
  movieId: Int
  tvshowId: Int
  seasonId: Int
  episodeId: Int
}

"""The output of our create `Collection` mutation."""
type CreateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was created by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the create `Collection` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input CreateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Collection` to be created by this mutation."""
  collection: CollectionInput!
}

"""An input for mutations affecting `Collection`"""
input CollectionInput {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  synopsis: String
  description: String
}

"""The output of our create `CollectionsImage` mutation."""
type CreateCollectionsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsImage` that was created by this mutation."""
  collectionsImage: CollectionsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection

  """An edge for our `CollectionsImage`. May be used by Relay 1."""
  collectionsImageEdge(
    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsImagesEdge
}

"""
All input for the create `CollectionsImage` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input CreateCollectionsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CollectionsImage` to be created by this mutation."""
  collectionsImage: CollectionsImageInput!
}

"""An input for mutations affecting `CollectionsImage`"""
input CollectionsImageInput {
  collectionId: Int!
  imageId: UUID!
  imageType: CollectionImageType!
}

"""The output of our create `CollectionsTag` mutation."""
type CreateCollectionsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsTag` that was created by this mutation."""
  collectionsTag: CollectionsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection

  """An edge for our `CollectionsTag`. May be used by Relay 1."""
  collectionsTagEdge(
    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsTagsEdge
}

"""
All input for the create `CollectionsTag` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input CreateCollectionsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CollectionsTag` to be created by this mutation."""
  collectionsTag: CollectionsTagInput!
}

"""An input for mutations affecting `CollectionsTag`"""
input CollectionsTagInput {
  collectionId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `Episode` mutation."""
type CreateEpisodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Episode` that was created by this mutation."""
  episode: Episode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """An edge for our `Episode`. May be used by Relay 1."""
  episodeEdge(
    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesEdge
}

"""
All input for the create `Episode` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Episode` to be created by this mutation."""
  episode: EpisodeInput!
}

"""An input for mutations affecting `Episode`"""
input EpisodeInput {
  seasonId: Int
  index: Int!

  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: UUID
}

"""The output of our create `EpisodesCast` mutation."""
type CreateEpisodesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesCast` that was created by this mutation."""
  episodesCast: EpisodesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode

  """An edge for our `EpisodesCast`. May be used by Relay 1."""
  episodesCastEdge(
    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesCastsEdge
}

"""
All input for the create `EpisodesCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesCast` to be created by this mutation."""
  episodesCast: EpisodesCastInput!
}

"""An input for mutations affecting `EpisodesCast`"""
input EpisodesCastInput {
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `EpisodesImage` mutation."""
type CreateEpisodesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesImage` that was created by this mutation."""
  episodesImage: EpisodesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode

  """An edge for our `EpisodesImage`. May be used by Relay 1."""
  episodesImageEdge(
    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesImagesEdge
}

"""
All input for the create `EpisodesImage` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesImage` to be created by this mutation."""
  episodesImage: EpisodesImageInput!
}

"""An input for mutations affecting `EpisodesImage`"""
input EpisodesImageInput {
  episodeId: Int!
  imageId: UUID!
  imageType: EpisodeImageType!
}

"""The output of our create `EpisodesLicense` mutation."""
type CreateEpisodesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicense` that was created by this mutation."""
  episodesLicense: EpisodesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode

  """An edge for our `EpisodesLicense`. May be used by Relay 1."""
  episodesLicenseEdge(
    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesEdge
}

"""
All input for the create `EpisodesLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesLicense` to be created by this mutation."""
  episodesLicense: EpisodesLicenseInput!
}

"""An input for mutations affecting `EpisodesLicense`"""
input EpisodesLicenseInput {
  episodeId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our create `EpisodesLicensesCountry` mutation."""
type CreateEpisodesLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicensesCountry` that was created by this mutation."""
  episodesLicensesCountry: EpisodesLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EpisodesLicense` that is related to this `EpisodesLicensesCountry`.
  """
  episodesLicense: EpisodesLicense

  """An edge for our `EpisodesLicensesCountry`. May be used by Relay 1."""
  episodesLicensesCountryEdge(
    """The method to use when ordering `EpisodesLicensesCountry`."""
    orderBy: [EpisodesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesCountriesEdge
}

"""
All input for the create `EpisodesLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesLicensesCountry` to be created by this mutation."""
  episodesLicensesCountry: EpisodesLicensesCountryInput!
}

"""An input for mutations affecting `EpisodesLicensesCountry`"""
input EpisodesLicensesCountryInput {
  episodesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our create `EpisodesProductionCountry` mutation."""
type CreateEpisodesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` that was created by this mutation."""
  episodesProductionCountry: EpisodesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode

  """An edge for our `EpisodesProductionCountry`. May be used by Relay 1."""
  episodesProductionCountryEdge(
    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesProductionCountriesEdge
}

"""
All input for the create `EpisodesProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` to be created by this mutation."""
  episodesProductionCountry: EpisodesProductionCountryInput!
}

"""An input for mutations affecting `EpisodesProductionCountry`"""
input EpisodesProductionCountryInput {
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `EpisodesTag` mutation."""
type CreateEpisodesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTag` that was created by this mutation."""
  episodesTag: EpisodesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode

  """An edge for our `EpisodesTag`. May be used by Relay 1."""
  episodesTagEdge(
    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTagsEdge
}

"""
All input for the create `EpisodesTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesTag` to be created by this mutation."""
  episodesTag: EpisodesTagInput!
}

"""An input for mutations affecting `EpisodesTag`"""
input EpisodesTagInput {
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `EpisodesTrailer` mutation."""
type CreateEpisodesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTrailer` that was created by this mutation."""
  episodesTrailer: EpisodesTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTrailer`."""
  episode: Episode

  """An edge for our `EpisodesTrailer`. May be used by Relay 1."""
  episodesTrailerEdge(
    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTrailersEdge
}

"""
All input for the create `EpisodesTrailer` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesTrailer` to be created by this mutation."""
  episodesTrailer: EpisodesTrailerInput!
}

"""An input for mutations affecting `EpisodesTrailer`"""
input EpisodesTrailerInput {
  episodeId: Int!
  videoId: UUID!
}

"""The output of our create `EpisodesTvshowGenre` mutation."""
type CreateEpisodesTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTvshowGenre` that was created by this mutation."""
  episodesTvshowGenre: EpisodesTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesTvshowGenre`.
  """
  episode: Episode

  """
  Reads a single `TvshowGenre` that is related to this `EpisodesTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `EpisodesTvshowGenre`. May be used by Relay 1."""
  episodesTvshowGenreEdge(
    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTvshowGenresEdge
}

"""
All input for the create `EpisodesTvshowGenre` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateEpisodesTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesTvshowGenre` to be created by this mutation."""
  episodesTvshowGenre: EpisodesTvshowGenreInput!
}

"""An input for mutations affecting `EpisodesTvshowGenre`"""
input EpisodesTvshowGenreInput {
  episodeId: Int!
  tvshowGenresId: Int!
}

"""The output of our create `MovieGenre` mutation."""
type CreateMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MovieGenre` that was created by this mutation."""
  movieGenre: MovieGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MovieGenre`. May be used by Relay 1."""
  movieGenreEdge(
    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MovieGenresEdge
}

"""
All input for the create `MovieGenre` mutation.
@permissions: SETTINGS_EDIT,ADMIN
"""
input CreateMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MovieGenre` to be created by this mutation."""
  movieGenre: MovieGenreInput!
}

"""An input for mutations affecting `MovieGenre`"""
input MovieGenreInput {
  """
  @isTrimmed()
  @maxLength(50)
  @notEmpty()
  """
  title: String!
  sortOrder: Int!
}

"""The output of our create `Movie` mutation."""
type CreateMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was created by this mutation."""
  movie: Movie

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""
All input for the create `Movie` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Movie` to be created by this mutation."""
  movie: MovieInput!
}

"""An input for mutations affecting `Movie`"""
input MovieInput {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: UUID
}

"""The output of our create `MoviesCast` mutation."""
type CreateMoviesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesCast` that was created by this mutation."""
  moviesCast: MoviesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie

  """An edge for our `MoviesCast`. May be used by Relay 1."""
  moviesCastEdge(
    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesCastsEdge
}

"""
All input for the create `MoviesCast` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesCast` to be created by this mutation."""
  moviesCast: MoviesCastInput!
}

"""An input for mutations affecting `MoviesCast`"""
input MoviesCastInput {
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `MoviesImage` mutation."""
type CreateMoviesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesImage` that was created by this mutation."""
  moviesImage: MoviesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie

  """An edge for our `MoviesImage`. May be used by Relay 1."""
  moviesImageEdge(
    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesImagesEdge
}

"""
All input for the create `MoviesImage` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesImage` to be created by this mutation."""
  moviesImage: MoviesImageInput!
}

"""An input for mutations affecting `MoviesImage`"""
input MoviesImageInput {
  movieId: Int!
  imageId: UUID!
  imageType: MovieImageType!
}

"""The output of our create `MoviesLicense` mutation."""
type CreateMoviesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicense` that was created by this mutation."""
  moviesLicense: MoviesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie

  """An edge for our `MoviesLicense`. May be used by Relay 1."""
  moviesLicenseEdge(
    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesEdge
}

"""
All input for the create `MoviesLicense` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesLicense` to be created by this mutation."""
  moviesLicense: MoviesLicenseInput!
}

"""An input for mutations affecting `MoviesLicense`"""
input MoviesLicenseInput {
  movieId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our create `MoviesLicensesCountry` mutation."""
type CreateMoviesLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicensesCountry` that was created by this mutation."""
  moviesLicensesCountry: MoviesLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MoviesLicense` that is related to this `MoviesLicensesCountry`.
  """
  moviesLicense: MoviesLicense

  """An edge for our `MoviesLicensesCountry`. May be used by Relay 1."""
  moviesLicensesCountryEdge(
    """The method to use when ordering `MoviesLicensesCountry`."""
    orderBy: [MoviesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesCountriesEdge
}

"""
All input for the create `MoviesLicensesCountry` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesLicensesCountry` to be created by this mutation."""
  moviesLicensesCountry: MoviesLicensesCountryInput!
}

"""An input for mutations affecting `MoviesLicensesCountry`"""
input MoviesLicensesCountryInput {
  moviesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our create `MoviesMovieGenre` mutation."""
type CreateMoviesMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesMovieGenre` that was created by this mutation."""
  moviesMovieGenre: MoviesMovieGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesMovieGenre`."""
  movie: Movie

  """
  Reads a single `MovieGenre` that is related to this `MoviesMovieGenre`.
  """
  movieGenres: MovieGenre

  """An edge for our `MoviesMovieGenre`. May be used by Relay 1."""
  moviesMovieGenreEdge(
    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesMovieGenresEdge
}

"""
All input for the create `MoviesMovieGenre` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesMovieGenre` to be created by this mutation."""
  moviesMovieGenre: MoviesMovieGenreInput!
}

"""An input for mutations affecting `MoviesMovieGenre`"""
input MoviesMovieGenreInput {
  movieId: Int!
  movieGenresId: Int!
}

"""The output of our create `MoviesProductionCountry` mutation."""
type CreateMoviesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` that was created by this mutation."""
  moviesProductionCountry: MoviesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie

  """An edge for our `MoviesProductionCountry`. May be used by Relay 1."""
  moviesProductionCountryEdge(
    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesProductionCountriesEdge
}

"""
All input for the create `MoviesProductionCountry` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` to be created by this mutation."""
  moviesProductionCountry: MoviesProductionCountryInput!
}

"""An input for mutations affecting `MoviesProductionCountry`"""
input MoviesProductionCountryInput {
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `MoviesTag` mutation."""
type CreateMoviesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTag` that was created by this mutation."""
  moviesTag: MoviesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie

  """An edge for our `MoviesTag`. May be used by Relay 1."""
  moviesTagEdge(
    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTagsEdge
}

"""
All input for the create `MoviesTag` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesTag` to be created by this mutation."""
  moviesTag: MoviesTagInput!
}

"""An input for mutations affecting `MoviesTag`"""
input MoviesTagInput {
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `MoviesTrailer` mutation."""
type CreateMoviesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTrailer` that was created by this mutation."""
  moviesTrailer: MoviesTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTrailer`."""
  movie: Movie

  """An edge for our `MoviesTrailer`. May be used by Relay 1."""
  moviesTrailerEdge(
    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTrailersEdge
}

"""
All input for the create `MoviesTrailer` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input CreateMoviesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesTrailer` to be created by this mutation."""
  moviesTrailer: MoviesTrailerInput!
}

"""An input for mutations affecting `MoviesTrailer`"""
input MoviesTrailerInput {
  movieId: Int!
  videoId: UUID!
}

"""The output of our create `Review` mutation."""
type CreateReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was created by this mutation."""
  review: Review

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""
All input for the create `Review` mutation.
@permissions: REVIEWS_EDIT,ADMIN
"""
input CreateReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Review` to be created by this mutation."""
  review: ReviewInput!
}

"""An input for mutations affecting `Review`"""
input ReviewInput {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  description: String!
}

"""The output of our create `Season` mutation."""
type CreateSeasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Season` that was created by this mutation."""
  season: Season

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """An edge for our `Season`. May be used by Relay 1."""
  seasonEdge(
    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsEdge
}

"""
All input for the create `Season` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Season` to be created by this mutation."""
  season: SeasonInput!
}

"""An input for mutations affecting `Season`"""
input SeasonInput {
  tvshowId: Int
  index: Int!
  externalId: String
  synopsis: String
  description: String
  studio: String
  released: Date
}

"""The output of our create `SeasonsCast` mutation."""
type CreateSeasonsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsCast` that was created by this mutation."""
  seasonsCast: SeasonsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season

  """An edge for our `SeasonsCast`. May be used by Relay 1."""
  seasonsCastEdge(
    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsCastsEdge
}

"""
All input for the create `SeasonsCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsCast` to be created by this mutation."""
  seasonsCast: SeasonsCastInput!
}

"""An input for mutations affecting `SeasonsCast`"""
input SeasonsCastInput {
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `SeasonsImage` mutation."""
type CreateSeasonsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsImage` that was created by this mutation."""
  seasonsImage: SeasonsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season

  """An edge for our `SeasonsImage`. May be used by Relay 1."""
  seasonsImageEdge(
    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsImagesEdge
}

"""
All input for the create `SeasonsImage` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsImage` to be created by this mutation."""
  seasonsImage: SeasonsImageInput!
}

"""An input for mutations affecting `SeasonsImage`"""
input SeasonsImageInput {
  seasonId: Int!
  imageId: UUID!
  imageType: SeasonImageType!
}

"""The output of our create `SeasonsLicense` mutation."""
type CreateSeasonsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicense` that was created by this mutation."""
  seasonsLicense: SeasonsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season

  """An edge for our `SeasonsLicense`. May be used by Relay 1."""
  seasonsLicenseEdge(
    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesEdge
}

"""
All input for the create `SeasonsLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsLicense` to be created by this mutation."""
  seasonsLicense: SeasonsLicenseInput!
}

"""An input for mutations affecting `SeasonsLicense`"""
input SeasonsLicenseInput {
  seasonId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our create `SeasonsLicensesCountry` mutation."""
type CreateSeasonsLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicensesCountry` that was created by this mutation."""
  seasonsLicensesCountry: SeasonsLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SeasonsLicense` that is related to this `SeasonsLicensesCountry`.
  """
  seasonsLicense: SeasonsLicense

  """An edge for our `SeasonsLicensesCountry`. May be used by Relay 1."""
  seasonsLicensesCountryEdge(
    """The method to use when ordering `SeasonsLicensesCountry`."""
    orderBy: [SeasonsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesCountriesEdge
}

"""
All input for the create `SeasonsLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsLicensesCountry` to be created by this mutation."""
  seasonsLicensesCountry: SeasonsLicensesCountryInput!
}

"""An input for mutations affecting `SeasonsLicensesCountry`"""
input SeasonsLicensesCountryInput {
  seasonsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our create `SeasonsProductionCountry` mutation."""
type CreateSeasonsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` that was created by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season

  """An edge for our `SeasonsProductionCountry`. May be used by Relay 1."""
  seasonsProductionCountryEdge(
    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsProductionCountriesEdge
}

"""
All input for the create `SeasonsProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` to be created by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountryInput!
}

"""An input for mutations affecting `SeasonsProductionCountry`"""
input SeasonsProductionCountryInput {
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `SeasonsTag` mutation."""
type CreateSeasonsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTag` that was created by this mutation."""
  seasonsTag: SeasonsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season

  """An edge for our `SeasonsTag`. May be used by Relay 1."""
  seasonsTagEdge(
    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTagsEdge
}

"""
All input for the create `SeasonsTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsTag` to be created by this mutation."""
  seasonsTag: SeasonsTagInput!
}

"""An input for mutations affecting `SeasonsTag`"""
input SeasonsTagInput {
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `SeasonsTrailer` mutation."""
type CreateSeasonsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTrailer` that was created by this mutation."""
  seasonsTrailer: SeasonsTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTrailer`."""
  season: Season

  """An edge for our `SeasonsTrailer`. May be used by Relay 1."""
  seasonsTrailerEdge(
    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTrailersEdge
}

"""
All input for the create `SeasonsTrailer` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsTrailer` to be created by this mutation."""
  seasonsTrailer: SeasonsTrailerInput!
}

"""An input for mutations affecting `SeasonsTrailer`"""
input SeasonsTrailerInput {
  seasonId: Int!
  videoId: UUID!
}

"""The output of our create `SeasonsTvshowGenre` mutation."""
type CreateSeasonsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTvshowGenre` that was created by this mutation."""
  seasonsTvshowGenre: SeasonsTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTvshowGenre`."""
  season: Season

  """
  Reads a single `TvshowGenre` that is related to this `SeasonsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `SeasonsTvshowGenre`. May be used by Relay 1."""
  seasonsTvshowGenreEdge(
    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTvshowGenresEdge
}

"""
All input for the create `SeasonsTvshowGenre` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateSeasonsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsTvshowGenre` to be created by this mutation."""
  seasonsTvshowGenre: SeasonsTvshowGenreInput!
}

"""An input for mutations affecting `SeasonsTvshowGenre`"""
input SeasonsTvshowGenreInput {
  seasonId: Int!
  tvshowGenresId: Int!
}

"""The output of our create `TvshowGenre` mutation."""
type CreateTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowGenre` that was created by this mutation."""
  tvshowGenre: TvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TvshowGenre`. May be used by Relay 1."""
  tvshowGenreEdge(
    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowGenresEdge
}

"""
All input for the create `TvshowGenre` mutation.
@permissions: SETTINGS_EDIT,ADMIN
"""
input CreateTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowGenre` to be created by this mutation."""
  tvshowGenre: TvshowGenreInput!
}

"""An input for mutations affecting `TvshowGenre`"""
input TvshowGenreInput {
  """
  @isTrimmed()
  @maxLength(50)
  @notEmpty()
  """
  title: String!
  sortOrder: Int!
}

"""The output of our create `Tvshow` mutation."""
type CreateTvshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tvshow` that was created by this mutation."""
  tvshow: Tvshow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tvshow`. May be used by Relay 1."""
  tvshowEdge(
    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsEdge
}

"""
All input for the create `Tvshow` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tvshow` to be created by this mutation."""
  tvshow: TvshowInput!
}

"""An input for mutations affecting `Tvshow`"""
input TvshowInput {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
}

"""The output of our create `TvshowsCast` mutation."""
type CreateTvshowsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsCast` that was created by this mutation."""
  tvshowsCast: TvshowsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow

  """An edge for our `TvshowsCast`. May be used by Relay 1."""
  tvshowsCastEdge(
    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsCastsEdge
}

"""
All input for the create `TvshowsCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsCast` to be created by this mutation."""
  tvshowsCast: TvshowsCastInput!
}

"""An input for mutations affecting `TvshowsCast`"""
input TvshowsCastInput {
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `TvshowsImage` mutation."""
type CreateTvshowsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsImage` that was created by this mutation."""
  tvshowsImage: TvshowsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow

  """An edge for our `TvshowsImage`. May be used by Relay 1."""
  tvshowsImageEdge(
    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsImagesEdge
}

"""
All input for the create `TvshowsImage` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsImage` to be created by this mutation."""
  tvshowsImage: TvshowsImageInput!
}

"""An input for mutations affecting `TvshowsImage`"""
input TvshowsImageInput {
  tvshowId: Int!
  imageId: UUID!
  imageType: TvshowImageType!
}

"""The output of our create `TvshowsLicense` mutation."""
type CreateTvshowsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicense` that was created by this mutation."""
  tvshowsLicense: TvshowsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow

  """An edge for our `TvshowsLicense`. May be used by Relay 1."""
  tvshowsLicenseEdge(
    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesEdge
}

"""
All input for the create `TvshowsLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsLicense` to be created by this mutation."""
  tvshowsLicense: TvshowsLicenseInput!
}

"""An input for mutations affecting `TvshowsLicense`"""
input TvshowsLicenseInput {
  tvshowId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our create `TvshowsLicensesCountry` mutation."""
type CreateTvshowsLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicensesCountry` that was created by this mutation."""
  tvshowsLicensesCountry: TvshowsLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TvshowsLicense` that is related to this `TvshowsLicensesCountry`.
  """
  tvshowsLicense: TvshowsLicense

  """An edge for our `TvshowsLicensesCountry`. May be used by Relay 1."""
  tvshowsLicensesCountryEdge(
    """The method to use when ordering `TvshowsLicensesCountry`."""
    orderBy: [TvshowsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesCountriesEdge
}

"""
All input for the create `TvshowsLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsLicensesCountry` to be created by this mutation."""
  tvshowsLicensesCountry: TvshowsLicensesCountryInput!
}

"""An input for mutations affecting `TvshowsLicensesCountry`"""
input TvshowsLicensesCountryInput {
  tvshowsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our create `TvshowsProductionCountry` mutation."""
type CreateTvshowsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` that was created by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow

  """An edge for our `TvshowsProductionCountry`. May be used by Relay 1."""
  tvshowsProductionCountryEdge(
    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsProductionCountriesEdge
}

"""
All input for the create `TvshowsProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` to be created by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountryInput!
}

"""An input for mutations affecting `TvshowsProductionCountry`"""
input TvshowsProductionCountryInput {
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `TvshowsTag` mutation."""
type CreateTvshowsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTag` that was created by this mutation."""
  tvshowsTag: TvshowsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTag`. May be used by Relay 1."""
  tvshowsTagEdge(
    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTagsEdge
}

"""
All input for the create `TvshowsTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsTag` to be created by this mutation."""
  tvshowsTag: TvshowsTagInput!
}

"""An input for mutations affecting `TvshowsTag`"""
input TvshowsTagInput {
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our create `TvshowsTrailer` mutation."""
type CreateTvshowsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTrailer` that was created by this mutation."""
  tvshowsTrailer: TvshowsTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTrailer`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTrailer`. May be used by Relay 1."""
  tvshowsTrailerEdge(
    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTrailersEdge
}

"""
All input for the create `TvshowsTrailer` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsTrailer` to be created by this mutation."""
  tvshowsTrailer: TvshowsTrailerInput!
}

"""An input for mutations affecting `TvshowsTrailer`"""
input TvshowsTrailerInput {
  tvshowId: Int!
  videoId: UUID!
}

"""The output of our create `TvshowsTvshowGenre` mutation."""
type CreateTvshowsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTvshowGenre` that was created by this mutation."""
  tvshowsTvshowGenre: TvshowsTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTvshowGenre`."""
  tvshow: Tvshow

  """
  Reads a single `TvshowGenre` that is related to this `TvshowsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `TvshowsTvshowGenre`. May be used by Relay 1."""
  tvshowsTvshowGenreEdge(
    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTvshowGenresEdge
}

"""
All input for the create `TvshowsTvshowGenre` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input CreateTvshowsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsTvshowGenre` to be created by this mutation."""
  tvshowsTvshowGenre: TvshowsTvshowGenreInput!
}

"""An input for mutations affecting `TvshowsTvshowGenre`"""
input TvshowsTvshowGenreInput {
  tvshowId: Int!
  tvshowGenresId: Int!
}

"""The output of our update `CollectionRelation` mutation."""
type UpdateCollectionRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionRelation` that was updated by this mutation."""
  collectionRelation: CollectionRelation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode

  """An edge for our `CollectionRelation`. May be used by Relay 1."""
  collectionRelationEdge(
    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionRelationsEdge
}

"""
All input for the `updateCollectionRelation` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input UpdateCollectionRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionRelation` being updated.
  """
  patch: CollectionRelationPatch!
  id: Int!
}

"""
Represents an update to a `CollectionRelation`. Fields that are set will be updated.
"""
input CollectionRelationPatch {
  collectionId: Int
  sortOrder: Int
  movieId: Int
  tvshowId: Int
  seasonId: Int
  episodeId: Int
}

"""The output of our update `Collection` mutation."""
type UpdateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was updated by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `updateCollection` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input UpdateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  id: Int!
}

"""
Represents an update to a `Collection`. Fields that are set will be updated.
"""
input CollectionPatch {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  synopsis: String
  description: String
}

"""
All input for the `updateCollectionByExternalId` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input UpdateCollectionByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  externalId: String!
}

"""The output of our update `CollectionsImage` mutation."""
type UpdateCollectionsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsImage` that was updated by this mutation."""
  collectionsImage: CollectionsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection

  """An edge for our `CollectionsImage`. May be used by Relay 1."""
  collectionsImageEdge(
    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsImagesEdge
}

"""
All input for the `updateCollectionsImageByCollectionIdAndImageType` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input UpdateCollectionsImageByCollectionIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionsImage` being updated.
  """
  patch: CollectionsImagePatch!
  collectionId: Int!
  imageType: CollectionImageType!
}

"""
Represents an update to a `CollectionsImage`. Fields that are set will be updated.
"""
input CollectionsImagePatch {
  collectionId: Int
  imageId: UUID
  imageType: CollectionImageType
}

"""The output of our update `CollectionsTag` mutation."""
type UpdateCollectionsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsTag` that was updated by this mutation."""
  collectionsTag: CollectionsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection

  """An edge for our `CollectionsTag`. May be used by Relay 1."""
  collectionsTagEdge(
    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsTagsEdge
}

"""
All input for the `updateCollectionsTag` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input UpdateCollectionsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionsTag` being updated.
  """
  patch: CollectionsTagPatch!
  collectionId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `CollectionsTag`. Fields that are set will be updated.
"""
input CollectionsTagPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `Episode` mutation."""
type UpdateEpisodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Episode` that was updated by this mutation."""
  episode: Episode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """An edge for our `Episode`. May be used by Relay 1."""
  episodeEdge(
    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesEdge
}

"""
All input for the `updateEpisode` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Episode` being updated.
  """
  patch: EpisodePatch!
  id: Int!
}

"""
Represents an update to a `Episode`. Fields that are set will be updated.
"""
input EpisodePatch {
  seasonId: Int
  index: Int

  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: UUID
}

"""
All input for the `updateEpisodeByExternalId` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodeByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Episode` being updated.
  """
  patch: EpisodePatch!
  externalId: String!
}

"""The output of our update `EpisodesCast` mutation."""
type UpdateEpisodesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesCast` that was updated by this mutation."""
  episodesCast: EpisodesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode

  """An edge for our `EpisodesCast`. May be used by Relay 1."""
  episodesCastEdge(
    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesCastsEdge
}

"""
All input for the `updateEpisodesCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesCast` being updated.
  """
  patch: EpisodesCastPatch!
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `EpisodesCast`. Fields that are set will be updated.
"""
input EpisodesCastPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `EpisodesImage` mutation."""
type UpdateEpisodesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesImage` that was updated by this mutation."""
  episodesImage: EpisodesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode

  """An edge for our `EpisodesImage`. May be used by Relay 1."""
  episodesImageEdge(
    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesImagesEdge
}

"""
All input for the `updateEpisodesImageByEpisodeIdAndImageType` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodesImageByEpisodeIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesImage` being updated.
  """
  patch: EpisodesImagePatch!
  episodeId: Int!
  imageType: EpisodeImageType!
}

"""
Represents an update to a `EpisodesImage`. Fields that are set will be updated.
"""
input EpisodesImagePatch {
  episodeId: Int
  imageId: UUID
  imageType: EpisodeImageType
}

"""The output of our update `EpisodesLicense` mutation."""
type UpdateEpisodesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicense` that was updated by this mutation."""
  episodesLicense: EpisodesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode

  """An edge for our `EpisodesLicense`. May be used by Relay 1."""
  episodesLicenseEdge(
    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesEdge
}

"""
All input for the `updateEpisodesLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesLicense` being updated.
  """
  patch: EpisodesLicensePatch!
  id: Int!
}

"""
Represents an update to a `EpisodesLicense`. Fields that are set will be updated.
"""
input EpisodesLicensePatch {
  episodeId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our update `EpisodesLicensesCountry` mutation."""
type UpdateEpisodesLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicensesCountry` that was updated by this mutation."""
  episodesLicensesCountry: EpisodesLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EpisodesLicense` that is related to this `EpisodesLicensesCountry`.
  """
  episodesLicense: EpisodesLicense

  """An edge for our `EpisodesLicensesCountry`. May be used by Relay 1."""
  episodesLicensesCountryEdge(
    """The method to use when ordering `EpisodesLicensesCountry`."""
    orderBy: [EpisodesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesCountriesEdge
}

"""
All input for the `updateEpisodesLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodesLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesLicensesCountry` being updated.
  """
  patch: EpisodesLicensesCountryPatch!
  episodesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""
Represents an update to a `EpisodesLicensesCountry`. Fields that are set will be updated.
"""
input EpisodesLicensesCountryPatch {
  code: IsoAlphaTwoCountryCodes
}

"""The output of our update `EpisodesProductionCountry` mutation."""
type UpdateEpisodesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` that was updated by this mutation."""
  episodesProductionCountry: EpisodesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode

  """An edge for our `EpisodesProductionCountry`. May be used by Relay 1."""
  episodesProductionCountryEdge(
    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesProductionCountriesEdge
}

"""
All input for the `updateEpisodesProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesProductionCountry` being updated.
  """
  patch: EpisodesProductionCountryPatch!
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `EpisodesProductionCountry`. Fields that are set will be updated.
"""
input EpisodesProductionCountryPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `EpisodesTag` mutation."""
type UpdateEpisodesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTag` that was updated by this mutation."""
  episodesTag: EpisodesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode

  """An edge for our `EpisodesTag`. May be used by Relay 1."""
  episodesTagEdge(
    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTagsEdge
}

"""
All input for the `updateEpisodesTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateEpisodesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesTag` being updated.
  """
  patch: EpisodesTagPatch!
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `EpisodesTag`. Fields that are set will be updated.
"""
input EpisodesTagPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `IngestDocument` mutation."""
type UpdateIngestDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IngestDocument` that was updated by this mutation."""
  ingestDocument: IngestDocument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `IngestDocument`. May be used by Relay 1."""
  ingestDocumentEdge(
    """The method to use when ordering `IngestDocument`."""
    orderBy: [IngestDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IngestDocumentsEdge
}

"""
All input for the `updateIngestDocument` mutation.
@permissions: INGESTS_EDIT,ADMIN
"""
input UpdateIngestDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `IngestDocument` being updated.
  """
  patch: IngestDocumentPatch!
  id: Int!
}

"""
Represents an update to a `IngestDocument`. Fields that are set will be updated.
"""
input IngestDocumentPatch {
  """
  @maxLength(50)
  @notEmpty()
  """
  title: String
}

"""The output of our update `MovieGenre` mutation."""
type UpdateMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MovieGenre` that was updated by this mutation."""
  movieGenre: MovieGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MovieGenre`. May be used by Relay 1."""
  movieGenreEdge(
    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MovieGenresEdge
}

"""
All input for the `updateMovieGenre` mutation.
@permissions: SETTINGS_EDIT,ADMIN
"""
input UpdateMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MovieGenre` being updated.
  """
  patch: MovieGenrePatch!
  id: Int!
}

"""
Represents an update to a `MovieGenre`. Fields that are set will be updated.
"""
input MovieGenrePatch {
  """
  @isTrimmed()
  @maxLength(50)
  @notEmpty()
  """
  title: String
  sortOrder: Int
}

"""The output of our update `Movie` mutation."""
type UpdateMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was updated by this mutation."""
  movie: Movie

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""
All input for the `updateMovie` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Movie` being updated.
  """
  patch: MoviePatch!
  id: Int!
}

"""
Represents an update to a `Movie`. Fields that are set will be updated.
"""
input MoviePatch {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: UUID
}

"""
All input for the `updateMovieByExternalId` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMovieByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Movie` being updated.
  """
  patch: MoviePatch!
  externalId: String!
}

"""The output of our update `MoviesCast` mutation."""
type UpdateMoviesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesCast` that was updated by this mutation."""
  moviesCast: MoviesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie

  """An edge for our `MoviesCast`. May be used by Relay 1."""
  moviesCastEdge(
    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesCastsEdge
}

"""
All input for the `updateMoviesCast` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMoviesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesCast` being updated.
  """
  patch: MoviesCastPatch!
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `MoviesCast`. Fields that are set will be updated.
"""
input MoviesCastPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `MoviesImage` mutation."""
type UpdateMoviesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesImage` that was updated by this mutation."""
  moviesImage: MoviesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie

  """An edge for our `MoviesImage`. May be used by Relay 1."""
  moviesImageEdge(
    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesImagesEdge
}

"""
All input for the `updateMoviesImageByMovieIdAndImageType` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMoviesImageByMovieIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesImage` being updated.
  """
  patch: MoviesImagePatch!
  movieId: Int!
  imageType: MovieImageType!
}

"""
Represents an update to a `MoviesImage`. Fields that are set will be updated.
"""
input MoviesImagePatch {
  movieId: Int
  imageId: UUID
  imageType: MovieImageType
}

"""The output of our update `MoviesLicense` mutation."""
type UpdateMoviesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicense` that was updated by this mutation."""
  moviesLicense: MoviesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie

  """An edge for our `MoviesLicense`. May be used by Relay 1."""
  moviesLicenseEdge(
    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesEdge
}

"""
All input for the `updateMoviesLicense` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMoviesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesLicense` being updated.
  """
  patch: MoviesLicensePatch!
  id: Int!
}

"""
Represents an update to a `MoviesLicense`. Fields that are set will be updated.
"""
input MoviesLicensePatch {
  movieId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our update `MoviesLicensesCountry` mutation."""
type UpdateMoviesLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicensesCountry` that was updated by this mutation."""
  moviesLicensesCountry: MoviesLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MoviesLicense` that is related to this `MoviesLicensesCountry`.
  """
  moviesLicense: MoviesLicense

  """An edge for our `MoviesLicensesCountry`. May be used by Relay 1."""
  moviesLicensesCountryEdge(
    """The method to use when ordering `MoviesLicensesCountry`."""
    orderBy: [MoviesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesCountriesEdge
}

"""
All input for the `updateMoviesLicensesCountry` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMoviesLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesLicensesCountry` being updated.
  """
  patch: MoviesLicensesCountryPatch!
  moviesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""
Represents an update to a `MoviesLicensesCountry`. Fields that are set will be updated.
"""
input MoviesLicensesCountryPatch {
  code: IsoAlphaTwoCountryCodes
}

"""The output of our update `MoviesProductionCountry` mutation."""
type UpdateMoviesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` that was updated by this mutation."""
  moviesProductionCountry: MoviesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie

  """An edge for our `MoviesProductionCountry`. May be used by Relay 1."""
  moviesProductionCountryEdge(
    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesProductionCountriesEdge
}

"""
All input for the `updateMoviesProductionCountry` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMoviesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesProductionCountry` being updated.
  """
  patch: MoviesProductionCountryPatch!
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `MoviesProductionCountry`. Fields that are set will be updated.
"""
input MoviesProductionCountryPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `MoviesTag` mutation."""
type UpdateMoviesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTag` that was updated by this mutation."""
  moviesTag: MoviesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie

  """An edge for our `MoviesTag`. May be used by Relay 1."""
  moviesTagEdge(
    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTagsEdge
}

"""
All input for the `updateMoviesTag` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input UpdateMoviesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesTag` being updated.
  """
  patch: MoviesTagPatch!
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `MoviesTag`. Fields that are set will be updated.
"""
input MoviesTagPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `Review` mutation."""
type UpdateReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was updated by this mutation."""
  review: Review

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""
All input for the `updateReview` mutation.
@permissions: REVIEWS_EDIT,ADMIN
"""
input UpdateReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Review` being updated.
  """
  patch: ReviewPatch!
  id: Int!
}

"""
Represents an update to a `Review`. Fields that are set will be updated.
"""
input ReviewPatch {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  description: String
  rating: Int
}

"""The output of our update `Season` mutation."""
type UpdateSeasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Season` that was updated by this mutation."""
  season: Season

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """An edge for our `Season`. May be used by Relay 1."""
  seasonEdge(
    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsEdge
}

"""
All input for the `updateSeason` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Season` being updated.
  """
  patch: SeasonPatch!
  id: Int!
}

"""
Represents an update to a `Season`. Fields that are set will be updated.
"""
input SeasonPatch {
  tvshowId: Int
  index: Int
  externalId: String
  synopsis: String
  description: String
  studio: String
  released: Date
}

"""
All input for the `updateSeasonByExternalId` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Season` being updated.
  """
  patch: SeasonPatch!
  externalId: String!
}

"""The output of our update `SeasonsCast` mutation."""
type UpdateSeasonsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsCast` that was updated by this mutation."""
  seasonsCast: SeasonsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season

  """An edge for our `SeasonsCast`. May be used by Relay 1."""
  seasonsCastEdge(
    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsCastsEdge
}

"""
All input for the `updateSeasonsCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsCast` being updated.
  """
  patch: SeasonsCastPatch!
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `SeasonsCast`. Fields that are set will be updated.
"""
input SeasonsCastPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `SeasonsImage` mutation."""
type UpdateSeasonsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsImage` that was updated by this mutation."""
  seasonsImage: SeasonsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season

  """An edge for our `SeasonsImage`. May be used by Relay 1."""
  seasonsImageEdge(
    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsImagesEdge
}

"""
All input for the `updateSeasonsImageBySeasonIdAndImageType` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonsImageBySeasonIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsImage` being updated.
  """
  patch: SeasonsImagePatch!
  seasonId: Int!
  imageType: SeasonImageType!
}

"""
Represents an update to a `SeasonsImage`. Fields that are set will be updated.
"""
input SeasonsImagePatch {
  seasonId: Int
  imageId: UUID
  imageType: SeasonImageType
}

"""The output of our update `SeasonsLicense` mutation."""
type UpdateSeasonsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicense` that was updated by this mutation."""
  seasonsLicense: SeasonsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season

  """An edge for our `SeasonsLicense`. May be used by Relay 1."""
  seasonsLicenseEdge(
    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesEdge
}

"""
All input for the `updateSeasonsLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsLicense` being updated.
  """
  patch: SeasonsLicensePatch!
  id: Int!
}

"""
Represents an update to a `SeasonsLicense`. Fields that are set will be updated.
"""
input SeasonsLicensePatch {
  seasonId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our update `SeasonsLicensesCountry` mutation."""
type UpdateSeasonsLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicensesCountry` that was updated by this mutation."""
  seasonsLicensesCountry: SeasonsLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SeasonsLicense` that is related to this `SeasonsLicensesCountry`.
  """
  seasonsLicense: SeasonsLicense

  """An edge for our `SeasonsLicensesCountry`. May be used by Relay 1."""
  seasonsLicensesCountryEdge(
    """The method to use when ordering `SeasonsLicensesCountry`."""
    orderBy: [SeasonsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesCountriesEdge
}

"""
All input for the `updateSeasonsLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonsLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsLicensesCountry` being updated.
  """
  patch: SeasonsLicensesCountryPatch!
  seasonsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""
Represents an update to a `SeasonsLicensesCountry`. Fields that are set will be updated.
"""
input SeasonsLicensesCountryPatch {
  code: IsoAlphaTwoCountryCodes
}

"""The output of our update `SeasonsProductionCountry` mutation."""
type UpdateSeasonsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` that was updated by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season

  """An edge for our `SeasonsProductionCountry`. May be used by Relay 1."""
  seasonsProductionCountryEdge(
    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsProductionCountriesEdge
}

"""
All input for the `updateSeasonsProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsProductionCountry` being updated.
  """
  patch: SeasonsProductionCountryPatch!
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `SeasonsProductionCountry`. Fields that are set will be updated.
"""
input SeasonsProductionCountryPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `SeasonsTag` mutation."""
type UpdateSeasonsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTag` that was updated by this mutation."""
  seasonsTag: SeasonsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season

  """An edge for our `SeasonsTag`. May be used by Relay 1."""
  seasonsTagEdge(
    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTagsEdge
}

"""
All input for the `updateSeasonsTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateSeasonsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsTag` being updated.
  """
  patch: SeasonsTagPatch!
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `SeasonsTag`. Fields that are set will be updated.
"""
input SeasonsTagPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `TvshowGenre` mutation."""
type UpdateTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowGenre` that was updated by this mutation."""
  tvshowGenre: TvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TvshowGenre`. May be used by Relay 1."""
  tvshowGenreEdge(
    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowGenresEdge
}

"""
All input for the `updateTvshowGenre` mutation.
@permissions: SETTINGS_EDIT,ADMIN
"""
input UpdateTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowGenre` being updated.
  """
  patch: TvshowGenrePatch!
  id: Int!
}

"""
Represents an update to a `TvshowGenre`. Fields that are set will be updated.
"""
input TvshowGenrePatch {
  """
  @isTrimmed()
  @maxLength(50)
  @notEmpty()
  """
  title: String
  sortOrder: Int
}

"""The output of our update `Tvshow` mutation."""
type UpdateTvshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tvshow` that was updated by this mutation."""
  tvshow: Tvshow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tvshow`. May be used by Relay 1."""
  tvshowEdge(
    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsEdge
}

"""
All input for the `updateTvshow` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tvshow` being updated.
  """
  patch: TvshowPatch!
  id: Int!
}

"""
Represents an update to a `Tvshow`. Fields that are set will be updated.
"""
input TvshowPatch {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
}

"""
All input for the `updateTvshowByExternalId` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tvshow` being updated.
  """
  patch: TvshowPatch!
  externalId: String!
}

"""The output of our update `TvshowsCast` mutation."""
type UpdateTvshowsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsCast` that was updated by this mutation."""
  tvshowsCast: TvshowsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow

  """An edge for our `TvshowsCast`. May be used by Relay 1."""
  tvshowsCastEdge(
    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsCastsEdge
}

"""
All input for the `updateTvshowsCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsCast` being updated.
  """
  patch: TvshowsCastPatch!
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `TvshowsCast`. Fields that are set will be updated.
"""
input TvshowsCastPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `TvshowsImage` mutation."""
type UpdateTvshowsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsImage` that was updated by this mutation."""
  tvshowsImage: TvshowsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow

  """An edge for our `TvshowsImage`. May be used by Relay 1."""
  tvshowsImageEdge(
    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsImagesEdge
}

"""
All input for the `updateTvshowsImageByTvshowIdAndImageType` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowsImageByTvshowIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsImage` being updated.
  """
  patch: TvshowsImagePatch!
  tvshowId: Int!
  imageType: TvshowImageType!
}

"""
Represents an update to a `TvshowsImage`. Fields that are set will be updated.
"""
input TvshowsImagePatch {
  tvshowId: Int
  imageId: UUID
  imageType: TvshowImageType
}

"""The output of our update `TvshowsLicense` mutation."""
type UpdateTvshowsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicense` that was updated by this mutation."""
  tvshowsLicense: TvshowsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow

  """An edge for our `TvshowsLicense`. May be used by Relay 1."""
  tvshowsLicenseEdge(
    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesEdge
}

"""
All input for the `updateTvshowsLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsLicense` being updated.
  """
  patch: TvshowsLicensePatch!
  id: Int!
}

"""
Represents an update to a `TvshowsLicense`. Fields that are set will be updated.
"""
input TvshowsLicensePatch {
  tvshowId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
}

"""The output of our update `TvshowsLicensesCountry` mutation."""
type UpdateTvshowsLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicensesCountry` that was updated by this mutation."""
  tvshowsLicensesCountry: TvshowsLicensesCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TvshowsLicense` that is related to this `TvshowsLicensesCountry`.
  """
  tvshowsLicense: TvshowsLicense

  """An edge for our `TvshowsLicensesCountry`. May be used by Relay 1."""
  tvshowsLicensesCountryEdge(
    """The method to use when ordering `TvshowsLicensesCountry`."""
    orderBy: [TvshowsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesCountriesEdge
}

"""
All input for the `updateTvshowsLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowsLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsLicensesCountry` being updated.
  """
  patch: TvshowsLicensesCountryPatch!
  tvshowsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""
Represents an update to a `TvshowsLicensesCountry`. Fields that are set will be updated.
"""
input TvshowsLicensesCountryPatch {
  code: IsoAlphaTwoCountryCodes
}

"""The output of our update `TvshowsProductionCountry` mutation."""
type UpdateTvshowsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` that was updated by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow

  """An edge for our `TvshowsProductionCountry`. May be used by Relay 1."""
  tvshowsProductionCountryEdge(
    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsProductionCountriesEdge
}

"""
All input for the `updateTvshowsProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsProductionCountry` being updated.
  """
  patch: TvshowsProductionCountryPatch!
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `TvshowsProductionCountry`. Fields that are set will be updated.
"""
input TvshowsProductionCountryPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our update `TvshowsTag` mutation."""
type UpdateTvshowsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTag` that was updated by this mutation."""
  tvshowsTag: TvshowsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTag`. May be used by Relay 1."""
  tvshowsTagEdge(
    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTagsEdge
}

"""
All input for the `updateTvshowsTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input UpdateTvshowsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsTag` being updated.
  """
  patch: TvshowsTagPatch!
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `TvshowsTag`. Fields that are set will be updated.
"""
input TvshowsTagPatch {
  """@notEmpty()"""
  name: String
}

"""The output of our delete `CollectionRelation` mutation."""
type DeleteCollectionRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionRelation` that was deleted by this mutation."""
  collectionRelation: CollectionRelation
  deletedCollectionRelationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode

  """An edge for our `CollectionRelation`. May be used by Relay 1."""
  collectionRelationEdge(
    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionRelationsEdge
}

"""
All input for the `deleteCollectionRelation` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input DeleteCollectionRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Collection` mutation."""
type DeleteCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was deleted by this mutation."""
  collection: Collection
  deletedCollectionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `deleteCollection` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input DeleteCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteCollectionByExternalId` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input DeleteCollectionByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""The output of our delete `CollectionsImage` mutation."""
type DeleteCollectionsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsImage` that was deleted by this mutation."""
  collectionsImage: CollectionsImage
  deletedCollectionsImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection

  """An edge for our `CollectionsImage`. May be used by Relay 1."""
  collectionsImageEdge(
    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsImagesEdge
}

"""
All input for the `deleteCollectionsImageByCollectionIdAndImageType` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input DeleteCollectionsImageByCollectionIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!
  imageType: CollectionImageType!
}

"""The output of our delete `CollectionsTag` mutation."""
type DeleteCollectionsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsTag` that was deleted by this mutation."""
  collectionsTag: CollectionsTag
  deletedCollectionsTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection

  """An edge for our `CollectionsTag`. May be used by Relay 1."""
  collectionsTagEdge(
    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsTagsEdge
}

"""
All input for the `deleteCollectionsTag` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
"""
input DeleteCollectionsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `Episode` mutation."""
type DeleteEpisodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Episode` that was deleted by this mutation."""
  episode: Episode
  deletedEpisodeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """An edge for our `Episode`. May be used by Relay 1."""
  episodeEdge(
    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesEdge
}

"""
All input for the `deleteEpisode` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteEpisodeByExternalId` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodeByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""The output of our delete `EpisodesCast` mutation."""
type DeleteEpisodesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesCast` that was deleted by this mutation."""
  episodesCast: EpisodesCast
  deletedEpisodesCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode

  """An edge for our `EpisodesCast`. May be used by Relay 1."""
  episodesCastEdge(
    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesCastsEdge
}

"""
All input for the `deleteEpisodesCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `EpisodesImage` mutation."""
type DeleteEpisodesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesImage` that was deleted by this mutation."""
  episodesImage: EpisodesImage
  deletedEpisodesImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode

  """An edge for our `EpisodesImage`. May be used by Relay 1."""
  episodesImageEdge(
    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesImagesEdge
}

"""
All input for the `deleteEpisodesImageByEpisodeIdAndImageType` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesImageByEpisodeIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!
  imageType: EpisodeImageType!
}

"""The output of our delete `EpisodesLicense` mutation."""
type DeleteEpisodesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicense` that was deleted by this mutation."""
  episodesLicense: EpisodesLicense
  deletedEpisodesLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode

  """An edge for our `EpisodesLicense`. May be used by Relay 1."""
  episodesLicenseEdge(
    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesEdge
}

"""
All input for the `deleteEpisodesLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `EpisodesLicensesCountry` mutation."""
type DeleteEpisodesLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicensesCountry` that was deleted by this mutation."""
  episodesLicensesCountry: EpisodesLicensesCountry
  deletedEpisodesLicensesCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EpisodesLicense` that is related to this `EpisodesLicensesCountry`.
  """
  episodesLicense: EpisodesLicense

  """An edge for our `EpisodesLicensesCountry`. May be used by Relay 1."""
  episodesLicensesCountryEdge(
    """The method to use when ordering `EpisodesLicensesCountry`."""
    orderBy: [EpisodesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesCountriesEdge
}

"""
All input for the `deleteEpisodesLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our delete `EpisodesProductionCountry` mutation."""
type DeleteEpisodesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` that was deleted by this mutation."""
  episodesProductionCountry: EpisodesProductionCountry
  deletedEpisodesProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode

  """An edge for our `EpisodesProductionCountry`. May be used by Relay 1."""
  episodesProductionCountryEdge(
    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesProductionCountriesEdge
}

"""
All input for the `deleteEpisodesProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `EpisodesTag` mutation."""
type DeleteEpisodesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTag` that was deleted by this mutation."""
  episodesTag: EpisodesTag
  deletedEpisodesTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode

  """An edge for our `EpisodesTag`. May be used by Relay 1."""
  episodesTagEdge(
    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTagsEdge
}

"""
All input for the `deleteEpisodesTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `EpisodesTrailer` mutation."""
type DeleteEpisodesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTrailer` that was deleted by this mutation."""
  episodesTrailer: EpisodesTrailer
  deletedEpisodesTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTrailer`."""
  episode: Episode

  """An edge for our `EpisodesTrailer`. May be used by Relay 1."""
  episodesTrailerEdge(
    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTrailersEdge
}

"""
All input for the `deleteEpisodesTrailer` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!
  videoId: UUID!
}

"""The output of our delete `EpisodesTvshowGenre` mutation."""
type DeleteEpisodesTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTvshowGenre` that was deleted by this mutation."""
  episodesTvshowGenre: EpisodesTvshowGenre
  deletedEpisodesTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesTvshowGenre`.
  """
  episode: Episode

  """
  Reads a single `TvshowGenre` that is related to this `EpisodesTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `EpisodesTvshowGenre`. May be used by Relay 1."""
  episodesTvshowGenreEdge(
    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTvshowGenresEdge
}

"""
All input for the `deleteEpisodesTvshowGenre` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteEpisodesTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!
  tvshowGenresId: Int!
}

"""The output of our delete `MovieGenre` mutation."""
type DeleteMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MovieGenre` that was deleted by this mutation."""
  movieGenre: MovieGenre
  deletedMovieGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MovieGenre`. May be used by Relay 1."""
  movieGenreEdge(
    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MovieGenresEdge
}

"""
All input for the `deleteMovieGenre` mutation.
@permissions: SETTINGS_EDIT,ADMIN
"""
input DeleteMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Movie` mutation."""
type DeleteMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was deleted by this mutation."""
  movie: Movie
  deletedMovieNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""
All input for the `deleteMovie` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteMovieByExternalId` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMovieByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""The output of our delete `MoviesCast` mutation."""
type DeleteMoviesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesCast` that was deleted by this mutation."""
  moviesCast: MoviesCast
  deletedMoviesCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie

  """An edge for our `MoviesCast`. May be used by Relay 1."""
  moviesCastEdge(
    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesCastsEdge
}

"""
All input for the `deleteMoviesCast` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `MoviesImage` mutation."""
type DeleteMoviesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesImage` that was deleted by this mutation."""
  moviesImage: MoviesImage
  deletedMoviesImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie

  """An edge for our `MoviesImage`. May be used by Relay 1."""
  moviesImageEdge(
    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesImagesEdge
}

"""
All input for the `deleteMoviesImageByMovieIdAndImageType` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesImageByMovieIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!
  imageType: MovieImageType!
}

"""The output of our delete `MoviesLicense` mutation."""
type DeleteMoviesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicense` that was deleted by this mutation."""
  moviesLicense: MoviesLicense
  deletedMoviesLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie

  """An edge for our `MoviesLicense`. May be used by Relay 1."""
  moviesLicenseEdge(
    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesEdge
}

"""
All input for the `deleteMoviesLicense` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `MoviesLicensesCountry` mutation."""
type DeleteMoviesLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicensesCountry` that was deleted by this mutation."""
  moviesLicensesCountry: MoviesLicensesCountry
  deletedMoviesLicensesCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `MoviesLicense` that is related to this `MoviesLicensesCountry`.
  """
  moviesLicense: MoviesLicense

  """An edge for our `MoviesLicensesCountry`. May be used by Relay 1."""
  moviesLicensesCountryEdge(
    """The method to use when ordering `MoviesLicensesCountry`."""
    orderBy: [MoviesLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesCountriesEdge
}

"""
All input for the `deleteMoviesLicensesCountry` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  moviesLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our delete `MoviesMovieGenre` mutation."""
type DeleteMoviesMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesMovieGenre` that was deleted by this mutation."""
  moviesMovieGenre: MoviesMovieGenre
  deletedMoviesMovieGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesMovieGenre`."""
  movie: Movie

  """
  Reads a single `MovieGenre` that is related to this `MoviesMovieGenre`.
  """
  movieGenres: MovieGenre

  """An edge for our `MoviesMovieGenre`. May be used by Relay 1."""
  moviesMovieGenreEdge(
    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesMovieGenresEdge
}

"""
All input for the `deleteMoviesMovieGenre` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!
  movieGenresId: Int!
}

"""The output of our delete `MoviesProductionCountry` mutation."""
type DeleteMoviesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` that was deleted by this mutation."""
  moviesProductionCountry: MoviesProductionCountry
  deletedMoviesProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie

  """An edge for our `MoviesProductionCountry`. May be used by Relay 1."""
  moviesProductionCountryEdge(
    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesProductionCountriesEdge
}

"""
All input for the `deleteMoviesProductionCountry` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `MoviesTag` mutation."""
type DeleteMoviesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTag` that was deleted by this mutation."""
  moviesTag: MoviesTag
  deletedMoviesTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie

  """An edge for our `MoviesTag`. May be used by Relay 1."""
  moviesTagEdge(
    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTagsEdge
}

"""
All input for the `deleteMoviesTag` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `MoviesTrailer` mutation."""
type DeleteMoviesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTrailer` that was deleted by this mutation."""
  moviesTrailer: MoviesTrailer
  deletedMoviesTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTrailer`."""
  movie: Movie

  """An edge for our `MoviesTrailer`. May be used by Relay 1."""
  moviesTrailerEdge(
    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTrailersEdge
}

"""
All input for the `deleteMoviesTrailer` mutation.
@permissions: MOVIES_EDIT,ADMIN
"""
input DeleteMoviesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!
  videoId: UUID!
}

"""The output of our delete `Review` mutation."""
type DeleteReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was deleted by this mutation."""
  review: Review
  deletedReviewNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""
All input for the `deleteReview` mutation.
@permissions: REVIEWS_EDIT,ADMIN
"""
input DeleteReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Season` mutation."""
type DeleteSeasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Season` that was deleted by this mutation."""
  season: Season
  deletedSeasonNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """An edge for our `Season`. May be used by Relay 1."""
  seasonEdge(
    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsEdge
}

"""
All input for the `deleteSeason` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteSeasonByExternalId` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""The output of our delete `SeasonsCast` mutation."""
type DeleteSeasonsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsCast` that was deleted by this mutation."""
  seasonsCast: SeasonsCast
  deletedSeasonsCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season

  """An edge for our `SeasonsCast`. May be used by Relay 1."""
  seasonsCastEdge(
    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsCastsEdge
}

"""
All input for the `deleteSeasonsCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `SeasonsImage` mutation."""
type DeleteSeasonsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsImage` that was deleted by this mutation."""
  seasonsImage: SeasonsImage
  deletedSeasonsImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season

  """An edge for our `SeasonsImage`. May be used by Relay 1."""
  seasonsImageEdge(
    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsImagesEdge
}

"""
All input for the `deleteSeasonsImageBySeasonIdAndImageType` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsImageBySeasonIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!
  imageType: SeasonImageType!
}

"""The output of our delete `SeasonsLicense` mutation."""
type DeleteSeasonsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicense` that was deleted by this mutation."""
  seasonsLicense: SeasonsLicense
  deletedSeasonsLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season

  """An edge for our `SeasonsLicense`. May be used by Relay 1."""
  seasonsLicenseEdge(
    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesEdge
}

"""
All input for the `deleteSeasonsLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SeasonsLicensesCountry` mutation."""
type DeleteSeasonsLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicensesCountry` that was deleted by this mutation."""
  seasonsLicensesCountry: SeasonsLicensesCountry
  deletedSeasonsLicensesCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SeasonsLicense` that is related to this `SeasonsLicensesCountry`.
  """
  seasonsLicense: SeasonsLicense

  """An edge for our `SeasonsLicensesCountry`. May be used by Relay 1."""
  seasonsLicensesCountryEdge(
    """The method to use when ordering `SeasonsLicensesCountry`."""
    orderBy: [SeasonsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesCountriesEdge
}

"""
All input for the `deleteSeasonsLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our delete `SeasonsProductionCountry` mutation."""
type DeleteSeasonsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` that was deleted by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountry
  deletedSeasonsProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season

  """An edge for our `SeasonsProductionCountry`. May be used by Relay 1."""
  seasonsProductionCountryEdge(
    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsProductionCountriesEdge
}

"""
All input for the `deleteSeasonsProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `SeasonsTag` mutation."""
type DeleteSeasonsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTag` that was deleted by this mutation."""
  seasonsTag: SeasonsTag
  deletedSeasonsTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season

  """An edge for our `SeasonsTag`. May be used by Relay 1."""
  seasonsTagEdge(
    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTagsEdge
}

"""
All input for the `deleteSeasonsTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `SeasonsTrailer` mutation."""
type DeleteSeasonsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTrailer` that was deleted by this mutation."""
  seasonsTrailer: SeasonsTrailer
  deletedSeasonsTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTrailer`."""
  season: Season

  """An edge for our `SeasonsTrailer`. May be used by Relay 1."""
  seasonsTrailerEdge(
    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTrailersEdge
}

"""
All input for the `deleteSeasonsTrailer` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!
  videoId: UUID!
}

"""The output of our delete `SeasonsTvshowGenre` mutation."""
type DeleteSeasonsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTvshowGenre` that was deleted by this mutation."""
  seasonsTvshowGenre: SeasonsTvshowGenre
  deletedSeasonsTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTvshowGenre`."""
  season: Season

  """
  Reads a single `TvshowGenre` that is related to this `SeasonsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `SeasonsTvshowGenre`. May be used by Relay 1."""
  seasonsTvshowGenreEdge(
    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTvshowGenresEdge
}

"""
All input for the `deleteSeasonsTvshowGenre` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSeasonsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!
  tvshowGenresId: Int!
}

"""The output of our delete `Snapshot` mutation."""
type DeleteSnapshotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Snapshot` that was deleted by this mutation."""
  snapshot: Snapshot
  deletedSnapshotNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Snapshot`. May be used by Relay 1."""
  snapshotEdge(
    """The method to use when ordering `Snapshot`."""
    orderBy: [SnapshotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SnapshotsEdge
}

"""
All input for the `deleteSnapshot` mutation.
@permissions: COLLECTIONS_EDIT,ADMIN
@permissions: MOVIES_EDIT,ADMIN
@permissions: SETTINGS_EDIT,ADMIN
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteSnapshotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TvshowGenre` mutation."""
type DeleteTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowGenre` that was deleted by this mutation."""
  tvshowGenre: TvshowGenre
  deletedTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TvshowGenre`. May be used by Relay 1."""
  tvshowGenreEdge(
    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowGenresEdge
}

"""
All input for the `deleteTvshowGenre` mutation.
@permissions: SETTINGS_EDIT,ADMIN
"""
input DeleteTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Tvshow` mutation."""
type DeleteTvshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tvshow` that was deleted by this mutation."""
  tvshow: Tvshow
  deletedTvshowNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tvshow`. May be used by Relay 1."""
  tvshowEdge(
    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsEdge
}

"""
All input for the `deleteTvshow` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteTvshowByExternalId` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""The output of our delete `TvshowsCast` mutation."""
type DeleteTvshowsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsCast` that was deleted by this mutation."""
  tvshowsCast: TvshowsCast
  deletedTvshowsCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow

  """An edge for our `TvshowsCast`. May be used by Relay 1."""
  tvshowsCastEdge(
    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsCastsEdge
}

"""
All input for the `deleteTvshowsCast` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `TvshowsImage` mutation."""
type DeleteTvshowsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsImage` that was deleted by this mutation."""
  tvshowsImage: TvshowsImage
  deletedTvshowsImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow

  """An edge for our `TvshowsImage`. May be used by Relay 1."""
  tvshowsImageEdge(
    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsImagesEdge
}

"""
All input for the `deleteTvshowsImageByTvshowIdAndImageType` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsImageByTvshowIdAndImageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!
  imageType: TvshowImageType!
}

"""The output of our delete `TvshowsLicense` mutation."""
type DeleteTvshowsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicense` that was deleted by this mutation."""
  tvshowsLicense: TvshowsLicense
  deletedTvshowsLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow

  """An edge for our `TvshowsLicense`. May be used by Relay 1."""
  tvshowsLicenseEdge(
    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesEdge
}

"""
All input for the `deleteTvshowsLicense` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TvshowsLicensesCountry` mutation."""
type DeleteTvshowsLicensesCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicensesCountry` that was deleted by this mutation."""
  tvshowsLicensesCountry: TvshowsLicensesCountry
  deletedTvshowsLicensesCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TvshowsLicense` that is related to this `TvshowsLicensesCountry`.
  """
  tvshowsLicense: TvshowsLicense

  """An edge for our `TvshowsLicensesCountry`. May be used by Relay 1."""
  tvshowsLicensesCountryEdge(
    """The method to use when ordering `TvshowsLicensesCountry`."""
    orderBy: [TvshowsLicensesCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesCountriesEdge
}

"""
All input for the `deleteTvshowsLicensesCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsLicensesCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowsLicenseId: Int!
  code: IsoAlphaTwoCountryCodes!
}

"""The output of our delete `TvshowsProductionCountry` mutation."""
type DeleteTvshowsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` that was deleted by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountry
  deletedTvshowsProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow

  """An edge for our `TvshowsProductionCountry`. May be used by Relay 1."""
  tvshowsProductionCountryEdge(
    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsProductionCountriesEdge
}

"""
All input for the `deleteTvshowsProductionCountry` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `TvshowsTag` mutation."""
type DeleteTvshowsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTag` that was deleted by this mutation."""
  tvshowsTag: TvshowsTag
  deletedTvshowsTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTag`. May be used by Relay 1."""
  tvshowsTagEdge(
    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTagsEdge
}

"""
All input for the `deleteTvshowsTag` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `TvshowsTrailer` mutation."""
type DeleteTvshowsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTrailer` that was deleted by this mutation."""
  tvshowsTrailer: TvshowsTrailer
  deletedTvshowsTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTrailer`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTrailer`. May be used by Relay 1."""
  tvshowsTrailerEdge(
    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTrailersEdge
}

"""
All input for the `deleteTvshowsTrailer` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!
  videoId: UUID!
}

"""The output of our delete `TvshowsTvshowGenre` mutation."""
type DeleteTvshowsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTvshowGenre` that was deleted by this mutation."""
  tvshowsTvshowGenre: TvshowsTvshowGenre
  deletedTvshowsTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTvshowGenre`."""
  tvshow: Tvshow

  """
  Reads a single `TvshowGenre` that is related to this `TvshowsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `TvshowsTvshowGenre`. May be used by Relay 1."""
  tvshowsTvshowGenreEdge(
    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTvshowGenresEdge
}

"""
All input for the `deleteTvshowsTvshowGenre` mutation.
@permissions: TVSHOWS_EDIT,ADMIN
"""
input DeleteTvshowsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!
  tvshowGenresId: Int!
}

type StartIngestPayload {
  ingestDocument: IngestDocument
  query: Query
}

input StartIngestInput {
  file: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""Bulk mutation payload type."""
type BulkPublishingPayload {
  """
  Publish job ID that will be assigned to all snapshots created in this bulk operation.
  """
  publishingJobId: String

  """Array of affected item IDs"""
  affectedIds: [Int]

  """Total number of affected items."""
  totalCount: Int
}

"""Bulk mutation payload type."""
type BulkMutationPayload {
  """Array of affected item IDs"""
  affectedIds: [Int]

  """Total number of affected items."""
  totalCount: Int
}

"""Bulk mutation payload type."""
type BulkMutationIntPayload {
  affectedIds: [Int]
  totalCount: Int
}

type PopulatePayload {
  count: Int!
  query: Query
}

input PopulateInput {
  clientMutationId: String
  count: Int!
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """
  Triggered when a IngestDocument is mutated (insert, update or delete). 
  """
  ingestDocumentMutated: IngestDocumentSubscriptionPayload

  """Triggered when a Snapshot is mutated (insert, update or delete). """
  snapshotMutated: SnapshotSubscriptionPayload

  """Triggered when a Collection is mutated (insert, update or delete). """
  collectionMutated: CollectionSubscriptionPayload

  """Triggered when a MovieGenre is mutated (insert, update or delete). """
  movieGenreMutated: MovieGenreSubscriptionPayload

  """Triggered when a Movie is mutated (insert, update or delete). """
  movieMutated: MovieSubscriptionPayload

  """Triggered when a TvshowGenre is mutated (insert, update or delete). """
  tvshowGenreMutated: TvshowGenreSubscriptionPayload

  """Triggered when a Tvshow is mutated (insert, update or delete). """
  tvshowMutated: TvshowSubscriptionPayload

  """Triggered when a Season is mutated (insert, update or delete). """
  seasonMutated: SeasonSubscriptionPayload

  """Triggered when a Episode is mutated (insert, update or delete). """
  episodeMutated: EpisodeSubscriptionPayload
}

type IngestDocumentSubscriptionPayload {
  id: Int!
  ingestDocument: IngestDocument
  event: String
}

type SnapshotSubscriptionPayload {
  id: Int!
  snapshot: Snapshot
  event: String
}

type CollectionSubscriptionPayload {
  id: Int!
  collection: Collection
  event: String
}

type MovieGenreSubscriptionPayload {
  id: Int!
  movieGenre: MovieGenre
  event: String
}

type MovieSubscriptionPayload {
  id: Int!
  movie: Movie
  event: String
}

type TvshowGenreSubscriptionPayload {
  id: Int!
  tvshowGenre: TvshowGenre
  event: String
}

type TvshowSubscriptionPayload {
  id: Int!
  tvshow: Tvshow
  event: String
}

type SeasonSubscriptionPayload {
  id: Int!
  season: Season
  event: String
}

type EpisodeSubscriptionPayload {
  id: Int!
  episode: Episode
  event: String
}
