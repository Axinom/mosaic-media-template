/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.6.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: app_hidden === */

  /* --- enums --- */


  /* --- tables --- */



  /* === schema: app_private === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace messaging_counter {
    export type Table = 'messaging_counter';
    export interface Selectable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter: number | null;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date: Date;
    }
    export interface JSONSelectable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter: number | null;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date: db.DateString;
    }
    export interface Whereable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **messaging_counter.key**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **messaging_counter.counter**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      counter?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messaging_counter.expiration_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, (now() + '1 day'::interval))`
      */
      expiration_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'messaging_counter_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }


  /* === schema: app_public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace collection_image_type {
    export type Table = 'collection_image_type';
    export interface Selectable {
      /**
      * **collection_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **collection_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **collection_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **collection_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **collection_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collection_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **collection_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collection_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **collection_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'collection_image_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace collection_relations {
    export type Table = 'collection_relations';
    export interface Selectable {
      /**
      * **collection_relations.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **collection_relations.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collection_relations.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number;
      /**
      * **collection_relations.movie_id**
      * - `int4` in database
      * - Nullable, no default
      */
      movie_id: number | null;
      /**
      * **collection_relations.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id: number | null;
      /**
      * **collection_relations.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id: number | null;
      /**
      * **collection_relations.episode_id**
      * - `int4` in database
      * - Nullable, no default
      */
      episode_id: number | null;
    }
    export interface JSONSelectable {
      /**
      * **collection_relations.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **collection_relations.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collection_relations.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number;
      /**
      * **collection_relations.movie_id**
      * - `int4` in database
      * - Nullable, no default
      */
      movie_id: number | null;
      /**
      * **collection_relations.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id: number | null;
      /**
      * **collection_relations.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id: number | null;
      /**
      * **collection_relations.episode_id**
      * - `int4` in database
      * - Nullable, no default
      */
      episode_id: number | null;
    }
    export interface Whereable {
      /**
      * **collection_relations.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_relations.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_relations.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_relations.movie_id**
      * - `int4` in database
      * - Nullable, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_relations.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_relations.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_relations.episode_id**
      * - `int4` in database
      * - Nullable, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collection_relations.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **collection_relations.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **collection_relations.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **collection_relations.movie_id**
      * - `int4` in database
      * - Nullable, no default
      */
      movie_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collection_relations.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collection_relations.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collection_relations.episode_id**
      * - `int4` in database
      * - Nullable, no default
      */
      episode_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collection_relations.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **collection_relations.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **collection_relations.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **collection_relations.movie_id**
      * - `int4` in database
      * - Nullable, no default
      */
      movie_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collection_relations.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collection_relations.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collection_relations.episode_id**
      * - `int4` in database
      * - Nullable, no default
      */
      episode_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'collection_relations_pkey' | 'collection_relations_sort_order_is_unique' | 'unique_episode_per_collection' | 'unique_movie_per_collection' | 'unique_season_per_collection' | 'unique_tvshow_per_collection';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace collections {
    export type Table = 'collections';
    export interface Selectable {
      /**
      * **collections.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **collections.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **collections.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **collections.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **collections.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **collections.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **collections.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **collections.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **collections.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **collections.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **collections.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **collections.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface JSONSelectable {
      /**
      * **collections.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **collections.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **collections.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **collections.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **collections.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **collections.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **collections.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **collections.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **collections.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **collections.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **collections.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **collections.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface Whereable {
      /**
      * **collections.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collections.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **collections.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **collections.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collections.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collections.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collections.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collections.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collections.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **collections.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **collections.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **collections.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **collections.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collections.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **collections.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **collections.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'collections_external_id_key' | 'collections_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace collections_images {
    export type Table = 'collections_images';
    export interface Selectable {
      /**
      * **collections_images.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collections_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **collections_images.image_type**
      * - `collection_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.CollectionImageTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **collections_images.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collections_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **collections_images.image_type**
      * - `collection_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.CollectionImageTypeEnum;
    }
    export interface Whereable {
      /**
      * **collections_images.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections_images.image_type**
      * - `collection_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.CollectionImageTypeEnum | db.Parameter<c.CollectionImageTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.CollectionImageTypeEnum | db.Parameter<c.CollectionImageTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collections_images.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **collections_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **collections_images.image_type**
      * - `collection_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.CollectionImageTypeEnum | db.Parameter<c.CollectionImageTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collections_images.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **collections_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **collections_images.image_type**
      * - `collection_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.CollectionImageTypeEnum | db.Parameter<c.CollectionImageTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.CollectionImageTypeEnum | db.Parameter<c.CollectionImageTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'collection_id_image_type_are_unique' | 'collections_images_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace collections_snapshots {
    export type Table = 'collections_snapshots';
    export interface Selectable {
      /**
      * **collections_snapshots.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collections_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface JSONSelectable {
      /**
      * **collections_snapshots.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collections_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface Whereable {
      /**
      * **collections_snapshots.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collections_snapshots.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **collections_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collections_snapshots.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **collections_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'collections_snapshots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace collections_tags {
    export type Table = 'collections_tags';
    export interface Selectable {
      /**
      * **collections_tags.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collections_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **collections_tags.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number;
      /**
      * **collections_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **collections_tags.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collections_tags.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **collections_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collections_tags.collection_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      collection_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **collections_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'collections_tags_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace entity_type {
    export type Table = 'entity_type';
    export interface Selectable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **entity_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **entity_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'entity_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episode_image_type {
    export type Table = 'episode_image_type';
    export interface Selectable {
      /**
      * **episode_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **episode_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **episode_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **episode_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **episode_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episode_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episode_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **episode_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episode_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **episode_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'episode_image_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes {
    export type Table = 'episodes';
    export interface Selectable {
      /**
      * **episodes.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **episodes.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id: number | null;
      /**
      * **episodes.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index: number;
      /**
      * **episodes.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **episodes.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **episodes.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title: string | null;
      /**
      * **episodes.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **episodes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **episodes.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **episodes.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: Date | null;
      /**
      * **episodes.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id: string | null;
      /**
      * **episodes.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **episodes.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **episodes.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **episodes.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **episodes.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **episodes.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **episodes.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface JSONSelectable {
      /**
      * **episodes.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **episodes.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id: number | null;
      /**
      * **episodes.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index: number;
      /**
      * **episodes.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **episodes.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **episodes.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title: string | null;
      /**
      * **episodes.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **episodes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **episodes.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **episodes.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: db.DateString | null;
      /**
      * **episodes.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id: string | null;
      /**
      * **episodes.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **episodes.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **episodes.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **episodes.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **episodes.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **episodes.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **episodes.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface Whereable {
      /**
      * **episodes.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **episodes.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **episodes.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.season_id**
      * - `int4` in database
      * - Nullable, no default
      */
      season_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **episodes.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_external_id_key' | 'episodes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_casts {
    export type Table = 'episodes_casts';
    export interface Selectable {
      /**
      * **episodes_casts.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **episodes_casts.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **episodes_casts.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_casts.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_casts.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_casts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_images {
    export type Table = 'episodes_images';
    export interface Selectable {
      /**
      * **episodes_images.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **episodes_images.image_type**
      * - `episode_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.EpisodeImageTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **episodes_images.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **episodes_images.image_type**
      * - `episode_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.EpisodeImageTypeEnum;
    }
    export interface Whereable {
      /**
      * **episodes_images.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_images.image_type**
      * - `episode_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.EpisodeImageTypeEnum | db.Parameter<c.EpisodeImageTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.EpisodeImageTypeEnum | db.Parameter<c.EpisodeImageTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_images.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **episodes_images.image_type**
      * - `episode_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.EpisodeImageTypeEnum | db.Parameter<c.EpisodeImageTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_images.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **episodes_images.image_type**
      * - `episode_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.EpisodeImageTypeEnum | db.Parameter<c.EpisodeImageTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.EpisodeImageTypeEnum | db.Parameter<c.EpisodeImageTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episode_id_image_type_are_unique' | 'episodes_images_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_licenses {
    export type Table = 'episodes_licenses';
    export interface Selectable {
      /**
      * **episodes_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **episodes_licenses.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: Date | null;
      /**
      * **episodes_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: Date | null;
      /**
      * **episodes_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **episodes_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
    }
    export interface JSONSelectable {
      /**
      * **episodes_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **episodes_licenses.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: db.DateString | null;
      /**
      * **episodes_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: db.DateString | null;
      /**
      * **episodes_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **episodes_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
    }
    export interface Whereable {
      /**
      * **episodes_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_licenses.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **episodes_licenses.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **episodes_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **episodes_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes_licenses.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **episodes_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_licenses_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_licenses_countries {
    export type Table = 'episodes_licenses_countries';
    export interface Selectable {
      /**
      * **episodes_licenses_countries.episodes_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episodes_license_id: number;
      /**
      * **episodes_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface JSONSelectable {
      /**
      * **episodes_licenses_countries.episodes_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episodes_license_id: number;
      /**
      * **episodes_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface Whereable {
      /**
      * **episodes_licenses_countries.episodes_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episodes_license_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_licenses_countries.episodes_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episodes_license_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_licenses_countries.episodes_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episodes_license_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_licenses_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_production_countries {
    export type Table = 'episodes_production_countries';
    export interface Selectable {
      /**
      * **episodes_production_countries.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **episodes_production_countries.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **episodes_production_countries.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_production_countries.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_production_countries.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_production_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_snapshots {
    export type Table = 'episodes_snapshots';
    export interface Selectable {
      /**
      * **episodes_snapshots.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface JSONSelectable {
      /**
      * **episodes_snapshots.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface Whereable {
      /**
      * **episodes_snapshots.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_snapshots.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_snapshots.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_snapshots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_tags {
    export type Table = 'episodes_tags';
    export interface Selectable {
      /**
      * **episodes_tags.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **episodes_tags.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **episodes_tags.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_tags.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_tags.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_tags_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_trailers {
    export type Table = 'episodes_trailers';
    export interface Selectable {
      /**
      * **episodes_trailers.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface JSONSelectable {
      /**
      * **episodes_trailers.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface Whereable {
      /**
      * **episodes_trailers.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_trailers.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_trailers.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_trailers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace episodes_tvshow_genres {
    export type Table = 'episodes_tvshow_genres';
    export interface Selectable {
      /**
      * **episodes_tvshow_genres.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number;
    }
    export interface JSONSelectable {
      /**
      * **episodes_tvshow_genres.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number;
      /**
      * **episodes_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number;
    }
    export interface Whereable {
      /**
      * **episodes_tvshow_genres.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **episodes_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **episodes_tvshow_genres.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **episodes_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **episodes_tvshow_genres.episode_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      episode_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **episodes_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'episodes_tvshow_genres_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_documents {
    export type Table = 'ingest_documents';
    export interface Selectable {
      /**
      * **ingest_documents.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **ingest_documents.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **ingest_documents.document_created**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      document_created: Date | null;
      /**
      * **ingest_documents.document**
      * - `ingest_document_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      document: c.IngestDocumentObject;
      /**
      * **ingest_documents.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **ingest_documents.items_count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      items_count: number;
      /**
      * **ingest_documents.error_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      error_count: number;
      /**
      * **ingest_documents.success_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      success_count: number;
      /**
      * **ingest_documents.in_progress_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      in_progress_count: number;
      /**
      * **ingest_documents.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors: db.JSONValue[];
      /**
      * **ingest_documents.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **ingest_documents.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **ingest_documents.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **ingest_documents.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **ingest_documents.status**
      * - `ingest_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status: c.IngestStatusEnum;
    }
    export interface JSONSelectable {
      /**
      * **ingest_documents.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **ingest_documents.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **ingest_documents.document_created**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      document_created: db.DateString | null;
      /**
      * **ingest_documents.document**
      * - `ingest_document_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      document: c.IngestDocumentObject;
      /**
      * **ingest_documents.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **ingest_documents.items_count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      items_count: number;
      /**
      * **ingest_documents.error_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      error_count: number;
      /**
      * **ingest_documents.success_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      success_count: number;
      /**
      * **ingest_documents.in_progress_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      in_progress_count: number;
      /**
      * **ingest_documents.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors: db.JSONValue[];
      /**
      * **ingest_documents.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **ingest_documents.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **ingest_documents.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **ingest_documents.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **ingest_documents.status**
      * - `ingest_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status: c.IngestStatusEnum;
    }
    export interface Whereable {
      /**
      * **ingest_documents.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.document_created**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      document_created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.document**
      * - `ingest_document_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      document?: c.IngestDocumentObject | db.Parameter<c.IngestDocumentObject> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestDocumentObject | db.Parameter<c.IngestDocumentObject> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.items_count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      items_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.error_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      error_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.success_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      success_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.in_progress_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      in_progress_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors?: db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_documents.status**
      * - `ingest_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestStatusEnum | db.Parameter<c.IngestStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestStatusEnum | db.Parameter<c.IngestStatusEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_documents.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_documents.document_created**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      document_created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.document**
      * - `ingest_document_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      document: c.IngestDocumentObject | db.Parameter<c.IngestDocumentObject> | db.SQLFragment;
      /**
      * **ingest_documents.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_documents.items_count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      items_count: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **ingest_documents.error_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      error_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.success_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      success_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.in_progress_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      in_progress_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors?: db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_documents.status**
      * - `ingest_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestStatusEnum | db.Parameter<c.IngestStatusEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_documents.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_documents.document_created**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      document_created?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.document**
      * - `ingest_document_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      document?: c.IngestDocumentObject | db.Parameter<c.IngestDocumentObject> | db.SQLFragment | db.SQLFragment<any, c.IngestDocumentObject | db.Parameter<c.IngestDocumentObject> | db.SQLFragment>;
      /**
      * **ingest_documents.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_documents.items_count**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      items_count?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **ingest_documents.error_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      error_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.success_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      success_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.in_progress_count**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      in_progress_count?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors?: db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_documents.status**
      * - `ingest_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestStatusEnum | db.Parameter<c.IngestStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.IngestStatusEnum | db.Parameter<c.IngestStatusEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_documents_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_entity_exists_status {
    export type Table = 'ingest_entity_exists_status';
    export interface Selectable {
      /**
      * **ingest_entity_exists_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_entity_exists_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **ingest_entity_exists_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_entity_exists_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **ingest_entity_exists_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_entity_exists_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_entity_exists_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_entity_exists_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_entity_exists_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_entity_exists_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_entity_exists_status_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_item_status {
    export type Table = 'ingest_item_status';
    export interface Selectable {
      /**
      * **ingest_item_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **ingest_item_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **ingest_item_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_item_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_item_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_item_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_item_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_item_status_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_item_step_status {
    export type Table = 'ingest_item_step_status';
    export interface Selectable {
      /**
      * **ingest_item_step_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_step_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **ingest_item_step_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_step_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **ingest_item_step_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_step_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_item_step_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_item_step_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_item_step_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_item_step_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_item_step_status_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_item_step_type {
    export type Table = 'ingest_item_step_type';
    export interface Selectable {
      /**
      * **ingest_item_step_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_step_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **ingest_item_step_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_step_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **ingest_item_step_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_step_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_item_step_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_item_step_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_item_step_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_item_step_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_item_step_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_item_steps {
    export type Table = 'ingest_item_steps';
    export interface Selectable {
      /**
      * **ingest_item_steps.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **ingest_item_steps.ingest_item_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_item_id: number;
      /**
      * **ingest_item_steps.sub_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sub_type: string;
      /**
      * **ingest_item_steps.response_message**
      * - `text` in database
      * - Nullable, no default
      */
      response_message: string | null;
      /**
      * **ingest_item_steps.type**
      * - `ingest_item_step_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.IngestItemStepTypeEnum;
      /**
      * **ingest_item_steps.status**
      * - `ingest_item_step_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status: c.IngestItemStepStatusEnum;
      /**
      * **ingest_item_steps.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **ingest_item_steps.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **ingest_item_steps.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **ingest_item_steps.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **ingest_item_steps.entity_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_id: string | null;
    }
    export interface JSONSelectable {
      /**
      * **ingest_item_steps.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **ingest_item_steps.ingest_item_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_item_id: number;
      /**
      * **ingest_item_steps.sub_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sub_type: string;
      /**
      * **ingest_item_steps.response_message**
      * - `text` in database
      * - Nullable, no default
      */
      response_message: string | null;
      /**
      * **ingest_item_steps.type**
      * - `ingest_item_step_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.IngestItemStepTypeEnum;
      /**
      * **ingest_item_steps.status**
      * - `ingest_item_step_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status: c.IngestItemStepStatusEnum;
      /**
      * **ingest_item_steps.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **ingest_item_steps.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **ingest_item_steps.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **ingest_item_steps.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **ingest_item_steps.entity_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_id: string | null;
    }
    export interface Whereable {
      /**
      * **ingest_item_steps.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.ingest_item_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_item_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.sub_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sub_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.response_message**
      * - `text` in database
      * - Nullable, no default
      */
      response_message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.type**
      * - `ingest_item_step_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type?: c.IngestItemStepTypeEnum | db.Parameter<c.IngestItemStepTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestItemStepTypeEnum | db.Parameter<c.IngestItemStepTypeEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.status**
      * - `ingest_item_step_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestItemStepStatusEnum | db.Parameter<c.IngestItemStepStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestItemStepStatusEnum | db.Parameter<c.IngestItemStepStatusEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_steps.entity_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_item_steps.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_item_steps.ingest_item_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_item_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **ingest_item_steps.sub_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sub_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_item_steps.response_message**
      * - `text` in database
      * - Nullable, no default
      */
      response_message?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_item_steps.type**
      * - `ingest_item_step_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.IngestItemStepTypeEnum | db.Parameter<c.IngestItemStepTypeEnum> | db.SQLFragment;
      /**
      * **ingest_item_steps.status**
      * - `ingest_item_step_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestItemStepStatusEnum | db.Parameter<c.IngestItemStepStatusEnum> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_item_steps.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_item_steps.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_item_steps.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_item_steps.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_item_steps.entity_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_item_steps.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_item_steps.ingest_item_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_item_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **ingest_item_steps.sub_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sub_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_item_steps.response_message**
      * - `text` in database
      * - Nullable, no default
      */
      response_message?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_item_steps.type**
      * - `ingest_item_step_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type?: c.IngestItemStepTypeEnum | db.Parameter<c.IngestItemStepTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.IngestItemStepTypeEnum | db.Parameter<c.IngestItemStepTypeEnum> | db.SQLFragment>;
      /**
      * **ingest_item_steps.status**
      * - `ingest_item_step_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestItemStepStatusEnum | db.Parameter<c.IngestItemStepStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.IngestItemStepStatusEnum | db.Parameter<c.IngestItemStepStatusEnum> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_item_steps.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_item_steps.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_item_steps.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_item_steps.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_item_steps.entity_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_item_steps_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_item_type {
    export type Table = 'ingest_item_type';
    export interface Selectable {
      /**
      * **ingest_item_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **ingest_item_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_item_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **ingest_item_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_item_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_item_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_item_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_item_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_item_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_item_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_items {
    export type Table = 'ingest_items';
    export interface Selectable {
      /**
      * **ingest_items.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **ingest_items.ingest_document_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_document_id: number;
      /**
      * **ingest_items.external_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      external_id: string;
      /**
      * **ingest_items.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id: number;
      /**
      * **ingest_items.item**
      * - `ingest_item_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      item: c.IngestItemObject;
      /**
      * **ingest_items.display_title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_title: string;
      /**
      * **ingest_items.processed_trailer_ids**
      * - `_uuid` in database
      * - `NOT NULL`, default: `'{}'::uuid[]`
      */
      processed_trailer_ids: string[];
      /**
      * **ingest_items.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors: db.JSONValue[];
      /**
      * **ingest_items.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **ingest_items.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **ingest_items.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **ingest_items.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **ingest_items.status**
      * - `ingest_item_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status: c.IngestItemStatusEnum;
      /**
      * **ingest_items.exists_status**
      * - `ingest_entity_exists_status_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      exists_status: c.IngestEntityExistsStatusEnum;
      /**
      * **ingest_items.type**
      * - `ingest_item_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.IngestItemTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **ingest_items.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **ingest_items.ingest_document_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_document_id: number;
      /**
      * **ingest_items.external_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      external_id: string;
      /**
      * **ingest_items.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id: number;
      /**
      * **ingest_items.item**
      * - `ingest_item_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      item: c.IngestItemObject;
      /**
      * **ingest_items.display_title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_title: string;
      /**
      * **ingest_items.processed_trailer_ids**
      * - `_uuid` in database
      * - `NOT NULL`, default: `'{}'::uuid[]`
      */
      processed_trailer_ids: string[];
      /**
      * **ingest_items.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors: db.JSONValue[];
      /**
      * **ingest_items.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **ingest_items.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **ingest_items.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **ingest_items.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **ingest_items.status**
      * - `ingest_item_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status: c.IngestItemStatusEnum;
      /**
      * **ingest_items.exists_status**
      * - `ingest_entity_exists_status_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      exists_status: c.IngestEntityExistsStatusEnum;
      /**
      * **ingest_items.type**
      * - `ingest_item_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.IngestItemTypeEnum;
    }
    export interface Whereable {
      /**
      * **ingest_items.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.ingest_document_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_document_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.external_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      external_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.item**
      * - `ingest_item_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      item?: c.IngestItemObject | db.Parameter<c.IngestItemObject> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestItemObject | db.Parameter<c.IngestItemObject> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.display_title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.processed_trailer_ids**
      * - `_uuid` in database
      * - `NOT NULL`, default: `'{}'::uuid[]`
      */
      processed_trailer_ids?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors?: db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.status**
      * - `ingest_item_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestItemStatusEnum | db.Parameter<c.IngestItemStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestItemStatusEnum | db.Parameter<c.IngestItemStatusEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.exists_status**
      * - `ingest_entity_exists_status_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      exists_status?: c.IngestEntityExistsStatusEnum | db.Parameter<c.IngestEntityExistsStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestEntityExistsStatusEnum | db.Parameter<c.IngestEntityExistsStatusEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_items.type**
      * - `ingest_item_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type?: c.IngestItemTypeEnum | db.Parameter<c.IngestItemTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IngestItemTypeEnum | db.Parameter<c.IngestItemTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_items.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.ingest_document_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_document_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **ingest_items.external_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      external_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_items.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **ingest_items.item**
      * - `ingest_item_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      item: c.IngestItemObject | db.Parameter<c.IngestItemObject> | db.SQLFragment;
      /**
      * **ingest_items.display_title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_items.processed_trailer_ids**
      * - `_uuid` in database
      * - `NOT NULL`, default: `'{}'::uuid[]`
      */
      processed_trailer_ids?: string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors?: db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.status**
      * - `ingest_item_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestItemStatusEnum | db.Parameter<c.IngestItemStatusEnum> | db.DefaultType | db.SQLFragment;
      /**
      * **ingest_items.exists_status**
      * - `ingest_entity_exists_status_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      exists_status: c.IngestEntityExistsStatusEnum | db.Parameter<c.IngestEntityExistsStatusEnum> | db.SQLFragment;
      /**
      * **ingest_items.type**
      * - `ingest_item_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type: c.IngestItemTypeEnum | db.Parameter<c.IngestItemTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_items.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.ingest_document_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      ingest_document_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **ingest_items.external_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      external_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_items.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **ingest_items.item**
      * - `ingest_item_object` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      item?: c.IngestItemObject | db.Parameter<c.IngestItemObject> | db.SQLFragment | db.SQLFragment<any, c.IngestItemObject | db.Parameter<c.IngestItemObject> | db.SQLFragment>;
      /**
      * **ingest_items.display_title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_items.processed_trailer_ids**
      * - `_uuid` in database
      * - `NOT NULL`, default: `'{}'::uuid[]`
      */
      processed_trailer_ids?: string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.errors**
      * - `_jsonb` in database
      * - `NOT NULL`, default: `'{}'::jsonb[]`
      */
      errors?: db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue[] | db.Parameter<db.JSONValue[]> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.status**
      * - `ingest_item_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'IN_PROGRESS'::text`
      */
      status?: c.IngestItemStatusEnum | db.Parameter<c.IngestItemStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.IngestItemStatusEnum | db.Parameter<c.IngestItemStatusEnum> | db.DefaultType | db.SQLFragment>;
      /**
      * **ingest_items.exists_status**
      * - `ingest_entity_exists_status_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      exists_status?: c.IngestEntityExistsStatusEnum | db.Parameter<c.IngestEntityExistsStatusEnum> | db.SQLFragment | db.SQLFragment<any, c.IngestEntityExistsStatusEnum | db.Parameter<c.IngestEntityExistsStatusEnum> | db.SQLFragment>;
      /**
      * **ingest_items.type**
      * - `ingest_item_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      type?: c.IngestItemTypeEnum | db.Parameter<c.IngestItemTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.IngestItemTypeEnum | db.Parameter<c.IngestItemTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_items_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace ingest_status {
    export type Table = 'ingest_status';
    export interface Selectable {
      /**
      * **ingest_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **ingest_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **ingest_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **ingest_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ingest_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ingest_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ingest_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ingest_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ingest_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ingest_status_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace iso_alpha_two_country_codes {
    export type Table = 'iso_alpha_two_country_codes';
    export interface Selectable {
      /**
      * **iso_alpha_two_country_codes.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **iso_alpha_two_country_codes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **iso_alpha_two_country_codes.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **iso_alpha_two_country_codes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **iso_alpha_two_country_codes.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **iso_alpha_two_country_codes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **iso_alpha_two_country_codes.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **iso_alpha_two_country_codes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **iso_alpha_two_country_codes.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **iso_alpha_two_country_codes.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'iso_alpha_two_country_codes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movie_genres {
    export type Table = 'movie_genres';
    export interface Selectable {
      /**
      * **movie_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **movie_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **movie_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number;
      /**
      * **movie_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **movie_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **movie_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **movie_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface JSONSelectable {
      /**
      * **movie_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **movie_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **movie_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number;
      /**
      * **movie_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **movie_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **movie_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **movie_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface Whereable {
      /**
      * **movie_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movie_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movie_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movie_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movie_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movie_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movie_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movie_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **movie_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **movie_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movie_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **movie_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **movie_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **movie_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movie_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **movie_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **movie_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movie_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **movie_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **movie_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **movie_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'idx_movie_genres_title' | 'movie_genres_pkey' | 'movie_genres_sort_order_is_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movie_image_type {
    export type Table = 'movie_image_type';
    export interface Selectable {
      /**
      * **movie_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **movie_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **movie_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **movie_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **movie_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movie_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movie_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **movie_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movie_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **movie_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'movie_image_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies {
    export type Table = 'movies';
    export interface Selectable {
      /**
      * **movies.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **movies.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **movies.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **movies.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title: string | null;
      /**
      * **movies.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **movies.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **movies.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **movies.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: Date | null;
      /**
      * **movies.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id: string | null;
      /**
      * **movies.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **movies.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **movies.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **movies.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **movies.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **movies.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **movies.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface JSONSelectable {
      /**
      * **movies.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **movies.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **movies.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **movies.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title: string | null;
      /**
      * **movies.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **movies.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **movies.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **movies.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: db.DateString | null;
      /**
      * **movies.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id: string | null;
      /**
      * **movies.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **movies.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **movies.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **movies.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **movies.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **movies.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **movies.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface Whereable {
      /**
      * **movies.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **movies.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **movies.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **movies.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **movies.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **movies.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **movies.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **movies.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.main_video_id**
      * - `uuid` in database
      * - Nullable, no default
      */
      main_video_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **movies.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_external_id_key' | 'movies_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_casts {
    export type Table = 'movies_casts';
    export interface Selectable {
      /**
      * **movies_casts.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **movies_casts.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **movies_casts.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_casts.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_casts.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_casts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_images {
    export type Table = 'movies_images';
    export interface Selectable {
      /**
      * **movies_images.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **movies_images.image_type**
      * - `movie_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.MovieImageTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **movies_images.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **movies_images.image_type**
      * - `movie_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.MovieImageTypeEnum;
    }
    export interface Whereable {
      /**
      * **movies_images.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_images.image_type**
      * - `movie_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.MovieImageTypeEnum | db.Parameter<c.MovieImageTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.MovieImageTypeEnum | db.Parameter<c.MovieImageTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_images.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **movies_images.image_type**
      * - `movie_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.MovieImageTypeEnum | db.Parameter<c.MovieImageTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_images.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **movies_images.image_type**
      * - `movie_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.MovieImageTypeEnum | db.Parameter<c.MovieImageTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.MovieImageTypeEnum | db.Parameter<c.MovieImageTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movie_id_image_type_are_unique' | 'movies_images_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_licenses {
    export type Table = 'movies_licenses';
    export interface Selectable {
      /**
      * **movies_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **movies_licenses.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: Date | null;
      /**
      * **movies_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: Date | null;
      /**
      * **movies_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **movies_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
    }
    export interface JSONSelectable {
      /**
      * **movies_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **movies_licenses.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: db.DateString | null;
      /**
      * **movies_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: db.DateString | null;
      /**
      * **movies_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **movies_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
    }
    export interface Whereable {
      /**
      * **movies_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_licenses.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **movies_licenses.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **movies_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **movies_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **movies_licenses.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **movies_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **movies_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_licenses_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_licenses_countries {
    export type Table = 'movies_licenses_countries';
    export interface Selectable {
      /**
      * **movies_licenses_countries.movies_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movies_license_id: number;
      /**
      * **movies_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface JSONSelectable {
      /**
      * **movies_licenses_countries.movies_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movies_license_id: number;
      /**
      * **movies_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface Whereable {
      /**
      * **movies_licenses_countries.movies_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movies_license_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_licenses_countries.movies_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movies_license_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_licenses_countries.movies_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movies_license_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_licenses_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_movie_genres {
    export type Table = 'movies_movie_genres';
    export interface Selectable {
      /**
      * **movies_movie_genres.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_movie_genres.movie_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_genres_id: number;
    }
    export interface JSONSelectable {
      /**
      * **movies_movie_genres.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_movie_genres.movie_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_genres_id: number;
    }
    export interface Whereable {
      /**
      * **movies_movie_genres.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_movie_genres.movie_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_movie_genres.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_movie_genres.movie_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_genres_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_movie_genres.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_movie_genres.movie_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_movie_genres_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_production_countries {
    export type Table = 'movies_production_countries';
    export interface Selectable {
      /**
      * **movies_production_countries.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **movies_production_countries.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **movies_production_countries.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_production_countries.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_production_countries.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_production_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_snapshots {
    export type Table = 'movies_snapshots';
    export interface Selectable {
      /**
      * **movies_snapshots.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface JSONSelectable {
      /**
      * **movies_snapshots.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface Whereable {
      /**
      * **movies_snapshots.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_snapshots.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_snapshots.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_snapshots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_tags {
    export type Table = 'movies_tags';
    export interface Selectable {
      /**
      * **movies_tags.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **movies_tags.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **movies_tags.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_tags.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_tags.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_tags_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace movies_trailers {
    export type Table = 'movies_trailers';
    export interface Selectable {
      /**
      * **movies_trailers.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface JSONSelectable {
      /**
      * **movies_trailers.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number;
      /**
      * **movies_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface Whereable {
      /**
      * **movies_trailers.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **movies_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **movies_trailers.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **movies_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **movies_trailers.movie_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      movie_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **movies_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'movies_trailers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace publish_status {
    export type Table = 'publish_status';
    export interface Selectable {
      /**
      * **publish_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **publish_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **publish_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **publish_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **publish_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **publish_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **publish_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **publish_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **publish_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **publish_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'publish_status_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace reviews {
    export type Table = 'reviews';
    export interface Selectable {
      /**
      * **reviews.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **reviews.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **reviews.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - Nullable, no default
      */
      rating: number | null;
      /**
      * **reviews.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **reviews.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **reviews.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **reviews.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface JSONSelectable {
      /**
      * **reviews.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **reviews.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **reviews.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - Nullable, no default
      */
      rating: number | null;
      /**
      * **reviews.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **reviews.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **reviews.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **reviews.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface Whereable {
      /**
      * **reviews.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - Nullable, no default
      */
      rating?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **reviews.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **reviews.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **reviews.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **reviews.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - Nullable, no default
      */
      rating?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **reviews.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **reviews.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **reviews.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **reviews.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **reviews.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **reviews.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **reviews.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **reviews.rating**
      * - `int4` in database
      * - Nullable, no default
      */
      rating?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **reviews.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **reviews.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **reviews.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **reviews.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'reviews_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace season_image_type {
    export type Table = 'season_image_type';
    export interface Selectable {
      /**
      * **season_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **season_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **season_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **season_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **season_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **season_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **season_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **season_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **season_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **season_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'season_image_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons {
    export type Table = 'seasons';
    export interface Selectable {
      /**
      * **seasons.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **seasons.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id: number | null;
      /**
      * **seasons.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index: number;
      /**
      * **seasons.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **seasons.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **seasons.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **seasons.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **seasons.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: Date | null;
      /**
      * **seasons.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **seasons.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **seasons.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **seasons.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **seasons.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **seasons.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **seasons.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface JSONSelectable {
      /**
      * **seasons.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **seasons.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id: number | null;
      /**
      * **seasons.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index: number;
      /**
      * **seasons.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **seasons.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **seasons.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **seasons.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **seasons.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: db.DateString | null;
      /**
      * **seasons.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **seasons.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **seasons.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **seasons.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **seasons.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **seasons.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **seasons.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface Whereable {
      /**
      * **seasons.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **seasons.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.tvshow_id**
      * - `int4` in database
      * - Nullable, no default
      */
      tvshow_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_external_id_key' | 'seasons_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_casts {
    export type Table = 'seasons_casts';
    export interface Selectable {
      /**
      * **seasons_casts.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **seasons_casts.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **seasons_casts.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_casts.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_casts.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_casts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_images {
    export type Table = 'seasons_images';
    export interface Selectable {
      /**
      * **seasons_images.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **seasons_images.image_type**
      * - `season_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.SeasonImageTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **seasons_images.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **seasons_images.image_type**
      * - `season_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.SeasonImageTypeEnum;
    }
    export interface Whereable {
      /**
      * **seasons_images.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_images.image_type**
      * - `season_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.SeasonImageTypeEnum | db.Parameter<c.SeasonImageTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.SeasonImageTypeEnum | db.Parameter<c.SeasonImageTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_images.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **seasons_images.image_type**
      * - `season_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.SeasonImageTypeEnum | db.Parameter<c.SeasonImageTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_images.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **seasons_images.image_type**
      * - `season_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.SeasonImageTypeEnum | db.Parameter<c.SeasonImageTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.SeasonImageTypeEnum | db.Parameter<c.SeasonImageTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'season_id_image_type_are_unique' | 'seasons_images_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_licenses {
    export type Table = 'seasons_licenses';
    export interface Selectable {
      /**
      * **seasons_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **seasons_licenses.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: Date | null;
      /**
      * **seasons_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: Date | null;
      /**
      * **seasons_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **seasons_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
    }
    export interface JSONSelectable {
      /**
      * **seasons_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **seasons_licenses.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: db.DateString | null;
      /**
      * **seasons_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: db.DateString | null;
      /**
      * **seasons_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **seasons_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
    }
    export interface Whereable {
      /**
      * **seasons_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_licenses.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **seasons_licenses.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **seasons_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **seasons_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons_licenses.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **seasons_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_licenses_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_licenses_countries {
    export type Table = 'seasons_licenses_countries';
    export interface Selectable {
      /**
      * **seasons_licenses_countries.seasons_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      seasons_license_id: number;
      /**
      * **seasons_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface JSONSelectable {
      /**
      * **seasons_licenses_countries.seasons_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      seasons_license_id: number;
      /**
      * **seasons_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface Whereable {
      /**
      * **seasons_licenses_countries.seasons_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      seasons_license_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_licenses_countries.seasons_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      seasons_license_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_licenses_countries.seasons_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      seasons_license_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_licenses_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_production_countries {
    export type Table = 'seasons_production_countries';
    export interface Selectable {
      /**
      * **seasons_production_countries.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **seasons_production_countries.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **seasons_production_countries.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_production_countries.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_production_countries.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_production_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_snapshots {
    export type Table = 'seasons_snapshots';
    export interface Selectable {
      /**
      * **seasons_snapshots.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface JSONSelectable {
      /**
      * **seasons_snapshots.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface Whereable {
      /**
      * **seasons_snapshots.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_snapshots.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_snapshots.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_snapshots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_tags {
    export type Table = 'seasons_tags';
    export interface Selectable {
      /**
      * **seasons_tags.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **seasons_tags.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **seasons_tags.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_tags.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_tags.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_tags_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_trailers {
    export type Table = 'seasons_trailers';
    export interface Selectable {
      /**
      * **seasons_trailers.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface JSONSelectable {
      /**
      * **seasons_trailers.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface Whereable {
      /**
      * **seasons_trailers.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_trailers.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_trailers.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_trailers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace seasons_tvshow_genres {
    export type Table = 'seasons_tvshow_genres';
    export interface Selectable {
      /**
      * **seasons_tvshow_genres.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number;
    }
    export interface JSONSelectable {
      /**
      * **seasons_tvshow_genres.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number;
      /**
      * **seasons_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number;
    }
    export interface Whereable {
      /**
      * **seasons_tvshow_genres.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **seasons_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **seasons_tvshow_genres.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **seasons_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **seasons_tvshow_genres.season_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      season_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **seasons_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'seasons_tvshow_genres_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace snapshot_state {
    export type Table = 'snapshot_state';
    export interface Selectable {
      /**
      * **snapshot_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **snapshot_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **snapshot_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **snapshot_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **snapshot_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **snapshot_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **snapshot_state.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'snapshot_state_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace snapshot_validation_issue_context {
    export type Table = 'snapshot_validation_issue_context';
    export interface Selectable {
      /**
      * **snapshot_validation_issue_context.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_validation_issue_context.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **snapshot_validation_issue_context.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_validation_issue_context.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **snapshot_validation_issue_context.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_issue_context.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **snapshot_validation_issue_context.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **snapshot_validation_issue_context.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **snapshot_validation_issue_context.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **snapshot_validation_issue_context.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'snapshot_validation_issue_context_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace snapshot_validation_issue_severity {
    export type Table = 'snapshot_validation_issue_severity';
    export interface Selectable {
      /**
      * **snapshot_validation_issue_severity.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_validation_issue_severity.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **snapshot_validation_issue_severity.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_validation_issue_severity.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **snapshot_validation_issue_severity.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_issue_severity.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **snapshot_validation_issue_severity.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **snapshot_validation_issue_severity.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **snapshot_validation_issue_severity.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **snapshot_validation_issue_severity.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'snapshot_validation_issue_severity_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace snapshot_validation_results {
    export type Table = 'snapshot_validation_results';
    export interface Selectable {
      /**
      * **snapshot_validation_results.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **snapshot_validation_results.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
      /**
      * **snapshot_validation_results.severity**
      * - `snapshot_validation_issue_severity_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      severity: c.SnapshotValidationIssueSeverityEnum;
      /**
      * **snapshot_validation_results.context**
      * - `snapshot_validation_issue_context_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      context: c.SnapshotValidationIssueContextEnum;
      /**
      * **snapshot_validation_results.message**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      message: string;
      /**
      * **snapshot_validation_results.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **snapshot_validation_results.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **snapshot_validation_results.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
      /**
      * **snapshot_validation_results.severity**
      * - `snapshot_validation_issue_severity_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      severity: c.SnapshotValidationIssueSeverityEnum;
      /**
      * **snapshot_validation_results.context**
      * - `snapshot_validation_issue_context_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      context: c.SnapshotValidationIssueContextEnum;
      /**
      * **snapshot_validation_results.message**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      message: string;
      /**
      * **snapshot_validation_results.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum;
    }
    export interface Whereable {
      /**
      * **snapshot_validation_results.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_results.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_results.severity**
      * - `snapshot_validation_issue_severity_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      severity?: c.SnapshotValidationIssueSeverityEnum | db.Parameter<c.SnapshotValidationIssueSeverityEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.SnapshotValidationIssueSeverityEnum | db.Parameter<c.SnapshotValidationIssueSeverityEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_results.context**
      * - `snapshot_validation_issue_context_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      context?: c.SnapshotValidationIssueContextEnum | db.Parameter<c.SnapshotValidationIssueContextEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.SnapshotValidationIssueContextEnum | db.Parameter<c.SnapshotValidationIssueContextEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_results.message**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_results.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type?: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **snapshot_validation_results.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **snapshot_validation_results.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **snapshot_validation_results.severity**
      * - `snapshot_validation_issue_severity_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      severity: c.SnapshotValidationIssueSeverityEnum | db.Parameter<c.SnapshotValidationIssueSeverityEnum> | db.SQLFragment;
      /**
      * **snapshot_validation_results.context**
      * - `snapshot_validation_issue_context_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      context: c.SnapshotValidationIssueContextEnum | db.Parameter<c.SnapshotValidationIssueContextEnum> | db.SQLFragment;
      /**
      * **snapshot_validation_results.message**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      message: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **snapshot_validation_results.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **snapshot_validation_results.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshot_validation_results.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **snapshot_validation_results.severity**
      * - `snapshot_validation_issue_severity_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      severity?: c.SnapshotValidationIssueSeverityEnum | db.Parameter<c.SnapshotValidationIssueSeverityEnum> | db.SQLFragment | db.SQLFragment<any, c.SnapshotValidationIssueSeverityEnum | db.Parameter<c.SnapshotValidationIssueSeverityEnum> | db.SQLFragment>;
      /**
      * **snapshot_validation_results.context**
      * - `snapshot_validation_issue_context_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      context?: c.SnapshotValidationIssueContextEnum | db.Parameter<c.SnapshotValidationIssueContextEnum> | db.SQLFragment | db.SQLFragment<any, c.SnapshotValidationIssueContextEnum | db.Parameter<c.SnapshotValidationIssueContextEnum> | db.SQLFragment>;
      /**
      * **snapshot_validation_results.message**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      message?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **snapshot_validation_results.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type?: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'snapshot_validation_results_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace snapshot_validation_status {
    export type Table = 'snapshot_validation_status';
    export interface Selectable {
      /**
      * **snapshot_validation_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_validation_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **snapshot_validation_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **snapshot_validation_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **snapshot_validation_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshot_validation_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **snapshot_validation_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **snapshot_validation_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **snapshot_validation_status.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **snapshot_validation_status.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'snapshot_validation_status_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace snapshots {
    export type Table = 'snapshots';
    export interface Selectable {
      /**
      * **snapshots.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **snapshots.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id: number;
      /**
      * **snapshots.publish_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      publish_id: string;
      /**
      * **snapshots.job_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      job_id: string;
      /**
      * **snapshots.snapshot_no**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_no: number;
      /**
      * **snapshots.entity_title**
      * - `text` in database
      * - Nullable, no default
      */
      entity_title: string | null;
      /**
      * **snapshots.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum;
      /**
      * **snapshots.validation_status**
      * - `snapshot_validation_status_enum` (base type: `text`) in database
      * - Nullable, no default
      */
      validation_status: c.SnapshotValidationStatusEnum | null;
      /**
      * **snapshots.snapshot_json**
      * - `json` in database
      * - Nullable, no default
      */
      snapshot_json: db.JSONValue | null;
      /**
      * **snapshots.snapshot_state**
      * - `snapshot_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'INITIALIZATION'::text`
      */
      snapshot_state: c.SnapshotStateEnum;
      /**
      * **snapshots.scheduled_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      scheduled_date: Date | null;
      /**
      * **snapshots.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **snapshots.unpublished_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      unpublished_date: Date | null;
      /**
      * **snapshots.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_date: Date;
      /**
      * **snapshots.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_date: Date;
      /**
      * **snapshots.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **snapshots.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **snapshots.is_list_snapshot**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_list_snapshot: boolean;
    }
    export interface JSONSelectable {
      /**
      * **snapshots.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **snapshots.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id: number;
      /**
      * **snapshots.publish_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      publish_id: string;
      /**
      * **snapshots.job_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      job_id: string;
      /**
      * **snapshots.snapshot_no**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_no: number;
      /**
      * **snapshots.entity_title**
      * - `text` in database
      * - Nullable, no default
      */
      entity_title: string | null;
      /**
      * **snapshots.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum;
      /**
      * **snapshots.validation_status**
      * - `snapshot_validation_status_enum` (base type: `text`) in database
      * - Nullable, no default
      */
      validation_status: c.SnapshotValidationStatusEnum | null;
      /**
      * **snapshots.snapshot_json**
      * - `json` in database
      * - Nullable, no default
      */
      snapshot_json: db.JSONValue | null;
      /**
      * **snapshots.snapshot_state**
      * - `snapshot_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'INITIALIZATION'::text`
      */
      snapshot_state: c.SnapshotStateEnum;
      /**
      * **snapshots.scheduled_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      scheduled_date: db.DateString | null;
      /**
      * **snapshots.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **snapshots.unpublished_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      unpublished_date: db.DateString | null;
      /**
      * **snapshots.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_date: db.DateString;
      /**
      * **snapshots.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_date: db.DateString;
      /**
      * **snapshots.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **snapshots.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **snapshots.is_list_snapshot**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_list_snapshot: boolean;
    }
    export interface Whereable {
      /**
      * **snapshots.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.publish_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      publish_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.job_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      job_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.snapshot_no**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_no?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.entity_title**
      * - `text` in database
      * - Nullable, no default
      */
      entity_title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type?: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.validation_status**
      * - `snapshot_validation_status_enum` (base type: `text`) in database
      * - Nullable, no default
      */
      validation_status?: c.SnapshotValidationStatusEnum | db.Parameter<c.SnapshotValidationStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.SnapshotValidationStatusEnum | db.Parameter<c.SnapshotValidationStatusEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.snapshot_json**
      * - `json` in database
      * - Nullable, no default
      */
      snapshot_json?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.snapshot_state**
      * - `snapshot_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'INITIALIZATION'::text`
      */
      snapshot_state?: c.SnapshotStateEnum | db.Parameter<c.SnapshotStateEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.SnapshotStateEnum | db.Parameter<c.SnapshotStateEnum> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.scheduled_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      scheduled_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.unpublished_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      unpublished_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **snapshots.is_list_snapshot**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_list_snapshot?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **snapshots.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **snapshots.publish_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      publish_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **snapshots.job_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      job_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **snapshots.snapshot_no**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_no: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **snapshots.entity_title**
      * - `text` in database
      * - Nullable, no default
      */
      entity_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment;
      /**
      * **snapshots.validation_status**
      * - `snapshot_validation_status_enum` (base type: `text`) in database
      * - Nullable, no default
      */
      validation_status?: c.SnapshotValidationStatusEnum | db.Parameter<c.SnapshotValidationStatusEnum> | null | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.snapshot_json**
      * - `json` in database
      * - Nullable, no default
      */
      snapshot_json?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.snapshot_state**
      * - `snapshot_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'INITIALIZATION'::text`
      */
      snapshot_state?: c.SnapshotStateEnum | db.Parameter<c.SnapshotStateEnum> | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.scheduled_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      scheduled_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.unpublished_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      unpublished_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **snapshots.is_list_snapshot**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_list_snapshot?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **snapshots.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.entity_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      entity_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **snapshots.publish_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      publish_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **snapshots.job_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      job_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **snapshots.snapshot_no**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_no?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **snapshots.entity_title**
      * - `text` in database
      * - Nullable, no default
      */
      entity_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.entity_type**
      * - `entity_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      entity_type?: c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.EntityTypeEnum | db.Parameter<c.EntityTypeEnum> | db.SQLFragment>;
      /**
      * **snapshots.validation_status**
      * - `snapshot_validation_status_enum` (base type: `text`) in database
      * - Nullable, no default
      */
      validation_status?: c.SnapshotValidationStatusEnum | db.Parameter<c.SnapshotValidationStatusEnum> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.SnapshotValidationStatusEnum | db.Parameter<c.SnapshotValidationStatusEnum> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.snapshot_json**
      * - `json` in database
      * - Nullable, no default
      */
      snapshot_json?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.snapshot_state**
      * - `snapshot_state_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'INITIALIZATION'::text`
      */
      snapshot_state?: c.SnapshotStateEnum | db.Parameter<c.SnapshotStateEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.SnapshotStateEnum | db.Parameter<c.SnapshotStateEnum> | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.scheduled_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      scheduled_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.unpublished_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      unpublished_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **snapshots.is_list_snapshot**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_list_snapshot?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'snapshots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshow_genres {
    export type Table = 'tvshow_genres';
    export interface Selectable {
      /**
      * **tvshow_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **tvshow_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **tvshow_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number;
      /**
      * **tvshow_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **tvshow_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **tvshow_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **tvshow_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface JSONSelectable {
      /**
      * **tvshow_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **tvshow_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **tvshow_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number;
      /**
      * **tvshow_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **tvshow_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **tvshow_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **tvshow_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
    }
    export interface Whereable {
      /**
      * **tvshow_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshow_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshow_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshow_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshow_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshow_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshow_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshow_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshow_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tvshow_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshow_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshow_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshow_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshow_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshow_genres.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshow_genres.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tvshow_genres.sort_order**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sort_order?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshow_genres.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshow_genres.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshow_genres.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshow_genres.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'idx_tvshow_genres_title' | 'tvshow_genres_pkey' | 'tvshow_genres_sort_order_is_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshow_image_type {
    export type Table = 'tvshow_image_type';
    export interface Selectable {
      /**
      * **tvshow_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **tvshow_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface JSONSelectable {
      /**
      * **tvshow_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
      /**
      * **tvshow_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
    }
    export interface Whereable {
      /**
      * **tvshow_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshow_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshow_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tvshow_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshow_image_type.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tvshow_image_type.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshow_image_type_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows {
    export type Table = 'tvshows';
    export interface Selectable {
      /**
      * **tvshows.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **tvshows.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **tvshows.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **tvshows.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title: string | null;
      /**
      * **tvshows.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **tvshows.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **tvshows.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **tvshows.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: Date | null;
      /**
      * **tvshows.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: Date | null;
      /**
      * **tvshows.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **tvshows.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **tvshows.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
      /**
      * **tvshows.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **tvshows.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **tvshows.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface JSONSelectable {
      /**
      * **tvshows.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **tvshows.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **tvshows.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id: string | null;
      /**
      * **tvshows.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title: string | null;
      /**
      * **tvshows.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis: string | null;
      /**
      * **tvshows.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **tvshows.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio: string | null;
      /**
      * **tvshows.released**
      * - `date` in database
      * - Nullable, no default
      */
      released: db.DateString | null;
      /**
      * **tvshows.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date: db.DateString | null;
      /**
      * **tvshows.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user: string | null;
      /**
      * **tvshows.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **tvshows.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
      /**
      * **tvshows.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user: string;
      /**
      * **tvshows.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user: string;
      /**
      * **tvshows.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status: c.PublishStatusEnum;
    }
    export interface Whereable {
      /**
      * **tvshows.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tvshows.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tvshows.external_id**
      * - `text` in database
      * - Nullable, no default
      */
      external_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.original_title**
      * - `text` in database
      * - Nullable, no default
      */
      original_title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.synopsis**
      * - `text` in database
      * - Nullable, no default
      */
      synopsis?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.studio**
      * - `text` in database
      * - Nullable, no default
      */
      studio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.released**
      * - `date` in database
      * - Nullable, no default
      */
      released?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.published_date**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      published_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.published_user**
      * - `text` in database
      * - Nullable, no default
      */
      published_user?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.created_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      created_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.updated_user**
      * - `text` in database
      * - `NOT NULL`, default: `'Unknown'::text`
      */
      updated_user?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows.publish_status**
      * - `publish_status_enum` (base type: `text`) in database
      * - `NOT NULL`, default: `'NOT_PUBLISHED'::text`
      */
      publish_status?: c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PublishStatusEnum | db.Parameter<c.PublishStatusEnum> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_external_id_key' | 'tvshows_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_casts {
    export type Table = 'tvshows_casts';
    export interface Selectable {
      /**
      * **tvshows_casts.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_casts.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **tvshows_casts.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_casts.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_casts.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_casts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_casts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_images {
    export type Table = 'tvshows_images';
    export interface Selectable {
      /**
      * **tvshows_images.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **tvshows_images.image_type**
      * - `tvshow_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.TvshowImageTypeEnum;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_images.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string;
      /**
      * **tvshows_images.image_type**
      * - `tvshow_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.TvshowImageTypeEnum;
    }
    export interface Whereable {
      /**
      * **tvshows_images.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_images.image_type**
      * - `tvshow_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.TvshowImageTypeEnum | db.Parameter<c.TvshowImageTypeEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.TvshowImageTypeEnum | db.Parameter<c.TvshowImageTypeEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_images.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tvshows_images.image_type**
      * - `tvshow_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type: c.TvshowImageTypeEnum | db.Parameter<c.TvshowImageTypeEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_images.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_images.image_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      image_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tvshows_images.image_type**
      * - `tvshow_image_type_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      image_type?: c.TvshowImageTypeEnum | db.Parameter<c.TvshowImageTypeEnum> | db.SQLFragment | db.SQLFragment<any, c.TvshowImageTypeEnum | db.Parameter<c.TvshowImageTypeEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshow_id_image_type_are_unique' | 'tvshows_images_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_licenses {
    export type Table = 'tvshows_licenses';
    export interface Selectable {
      /**
      * **tvshows_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **tvshows_licenses.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: Date | null;
      /**
      * **tvshows_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: Date | null;
      /**
      * **tvshows_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: Date;
      /**
      * **tvshows_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: Date;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id: number;
      /**
      * **tvshows_licenses.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start: db.DateString | null;
      /**
      * **tvshows_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end: db.DateString | null;
      /**
      * **tvshows_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date: db.DateString;
      /**
      * **tvshows_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date: db.DateString;
    }
    export interface Whereable {
      /**
      * **tvshows_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_licenses.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows_licenses.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **tvshows_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_licenses.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows_licenses.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_licenses.license_start**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_start?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows_licenses.license_end**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      license_end?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows_licenses.created_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      created_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tvshows_licenses.updated_date**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `timezone('utc'::text, now())`
      */
      updated_date?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_licenses_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_licenses_countries {
    export type Table = 'tvshows_licenses_countries';
    export interface Selectable {
      /**
      * **tvshows_licenses_countries.tvshows_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshows_license_id: number;
      /**
      * **tvshows_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_licenses_countries.tvshows_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshows_license_id: number;
      /**
      * **tvshows_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum;
    }
    export interface Whereable {
      /**
      * **tvshows_licenses_countries.tvshows_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshows_license_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_licenses_countries.tvshows_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshows_license_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_licenses_countries.tvshows_license_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshows_license_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_licenses_countries.code**
      * - `iso_alpha_two_country_codes_enum` (base type: `text`) in database
      * - `NOT NULL`, no default
      */
      code?: c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment | db.SQLFragment<any, c.IsoAlphaTwoCountryCodesEnum | db.Parameter<c.IsoAlphaTwoCountryCodesEnum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_licenses_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_production_countries {
    export type Table = 'tvshows_production_countries';
    export interface Selectable {
      /**
      * **tvshows_production_countries.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_production_countries.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **tvshows_production_countries.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_production_countries.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_production_countries.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_production_countries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_production_countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_snapshots {
    export type Table = 'tvshows_snapshots';
    export interface Selectable {
      /**
      * **tvshows_snapshots.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_snapshots.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number;
    }
    export interface Whereable {
      /**
      * **tvshows_snapshots.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_snapshots.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_snapshots.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_snapshots.snapshot_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      snapshot_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_snapshots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_tags {
    export type Table = 'tvshows_tags';
    export interface Selectable {
      /**
      * **tvshows_tags.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_tags.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **tvshows_tags.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_tags.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_tags.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_tags_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_trailers {
    export type Table = 'tvshows_trailers';
    export interface Selectable {
      /**
      * **tvshows_trailers.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_trailers.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string;
    }
    export interface Whereable {
      /**
      * **tvshows_trailers.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_trailers.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_trailers.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_trailers.video_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      video_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_trailers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tvshows_tvshow_genres {
    export type Table = 'tvshows_tvshow_genres';
    export interface Selectable {
      /**
      * **tvshows_tvshow_genres.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number;
    }
    export interface JSONSelectable {
      /**
      * **tvshows_tvshow_genres.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number;
      /**
      * **tvshows_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number;
    }
    export interface Whereable {
      /**
      * **tvshows_tvshow_genres.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tvshows_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tvshows_tvshow_genres.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tvshows_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tvshows_tvshow_genres.tvshow_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tvshows_tvshow_genres.tvshow_genres_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tvshow_genres_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tvshows_tvshow_genres_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }


  /* === schema: ax_utils === */

  /* --- enums --- */


  /* --- tables --- */



  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */


  /* === cross-table types === */

  export type Table = collection_image_type.Table | collection_relations.Table | collections.Table | collections_images.Table | collections_snapshots.Table | collections_tags.Table | entity_type.Table | episode_image_type.Table | episodes.Table | episodes_casts.Table | episodes_images.Table | episodes_licenses.Table | episodes_licenses_countries.Table | episodes_production_countries.Table | episodes_snapshots.Table | episodes_tags.Table | episodes_trailers.Table | episodes_tvshow_genres.Table | ingest_documents.Table | ingest_entity_exists_status.Table | ingest_item_status.Table | ingest_item_step_status.Table | ingest_item_step_type.Table | ingest_item_steps.Table | ingest_item_type.Table | ingest_items.Table | ingest_status.Table | iso_alpha_two_country_codes.Table | messaging_counter.Table | movie_genres.Table | movie_image_type.Table | movies.Table | movies_casts.Table | movies_images.Table | movies_licenses.Table | movies_licenses_countries.Table | movies_movie_genres.Table | movies_production_countries.Table | movies_snapshots.Table | movies_tags.Table | movies_trailers.Table | publish_status.Table | reviews.Table | season_image_type.Table | seasons.Table | seasons_casts.Table | seasons_images.Table | seasons_licenses.Table | seasons_licenses_countries.Table | seasons_production_countries.Table | seasons_snapshots.Table | seasons_tags.Table | seasons_trailers.Table | seasons_tvshow_genres.Table | snapshot_state.Table | snapshot_validation_issue_context.Table | snapshot_validation_issue_severity.Table | snapshot_validation_results.Table | snapshot_validation_status.Table | snapshots.Table | tvshow_genres.Table | tvshow_image_type.Table | tvshows.Table | tvshows_casts.Table | tvshows_images.Table | tvshows_licenses.Table | tvshows_licenses_countries.Table | tvshows_production_countries.Table | tvshows_snapshots.Table | tvshows_tags.Table | tvshows_trailers.Table | tvshows_tvshow_genres.Table;
  export type Selectable = collection_image_type.Selectable | collection_relations.Selectable | collections.Selectable | collections_images.Selectable | collections_snapshots.Selectable | collections_tags.Selectable | entity_type.Selectable | episode_image_type.Selectable | episodes.Selectable | episodes_casts.Selectable | episodes_images.Selectable | episodes_licenses.Selectable | episodes_licenses_countries.Selectable | episodes_production_countries.Selectable | episodes_snapshots.Selectable | episodes_tags.Selectable | episodes_trailers.Selectable | episodes_tvshow_genres.Selectable | ingest_documents.Selectable | ingest_entity_exists_status.Selectable | ingest_item_status.Selectable | ingest_item_step_status.Selectable | ingest_item_step_type.Selectable | ingest_item_steps.Selectable | ingest_item_type.Selectable | ingest_items.Selectable | ingest_status.Selectable | iso_alpha_two_country_codes.Selectable | messaging_counter.Selectable | movie_genres.Selectable | movie_image_type.Selectable | movies.Selectable | movies_casts.Selectable | movies_images.Selectable | movies_licenses.Selectable | movies_licenses_countries.Selectable | movies_movie_genres.Selectable | movies_production_countries.Selectable | movies_snapshots.Selectable | movies_tags.Selectable | movies_trailers.Selectable | publish_status.Selectable | reviews.Selectable | season_image_type.Selectable | seasons.Selectable | seasons_casts.Selectable | seasons_images.Selectable | seasons_licenses.Selectable | seasons_licenses_countries.Selectable | seasons_production_countries.Selectable | seasons_snapshots.Selectable | seasons_tags.Selectable | seasons_trailers.Selectable | seasons_tvshow_genres.Selectable | snapshot_state.Selectable | snapshot_validation_issue_context.Selectable | snapshot_validation_issue_severity.Selectable | snapshot_validation_results.Selectable | snapshot_validation_status.Selectable | snapshots.Selectable | tvshow_genres.Selectable | tvshow_image_type.Selectable | tvshows.Selectable | tvshows_casts.Selectable | tvshows_images.Selectable | tvshows_licenses.Selectable | tvshows_licenses_countries.Selectable | tvshows_production_countries.Selectable | tvshows_snapshots.Selectable | tvshows_tags.Selectable | tvshows_trailers.Selectable | tvshows_tvshow_genres.Selectable;
  export type JSONSelectable = collection_image_type.JSONSelectable | collection_relations.JSONSelectable | collections.JSONSelectable | collections_images.JSONSelectable | collections_snapshots.JSONSelectable | collections_tags.JSONSelectable | entity_type.JSONSelectable | episode_image_type.JSONSelectable | episodes.JSONSelectable | episodes_casts.JSONSelectable | episodes_images.JSONSelectable | episodes_licenses.JSONSelectable | episodes_licenses_countries.JSONSelectable | episodes_production_countries.JSONSelectable | episodes_snapshots.JSONSelectable | episodes_tags.JSONSelectable | episodes_trailers.JSONSelectable | episodes_tvshow_genres.JSONSelectable | ingest_documents.JSONSelectable | ingest_entity_exists_status.JSONSelectable | ingest_item_status.JSONSelectable | ingest_item_step_status.JSONSelectable | ingest_item_step_type.JSONSelectable | ingest_item_steps.JSONSelectable | ingest_item_type.JSONSelectable | ingest_items.JSONSelectable | ingest_status.JSONSelectable | iso_alpha_two_country_codes.JSONSelectable | messaging_counter.JSONSelectable | movie_genres.JSONSelectable | movie_image_type.JSONSelectable | movies.JSONSelectable | movies_casts.JSONSelectable | movies_images.JSONSelectable | movies_licenses.JSONSelectable | movies_licenses_countries.JSONSelectable | movies_movie_genres.JSONSelectable | movies_production_countries.JSONSelectable | movies_snapshots.JSONSelectable | movies_tags.JSONSelectable | movies_trailers.JSONSelectable | publish_status.JSONSelectable | reviews.JSONSelectable | season_image_type.JSONSelectable | seasons.JSONSelectable | seasons_casts.JSONSelectable | seasons_images.JSONSelectable | seasons_licenses.JSONSelectable | seasons_licenses_countries.JSONSelectable | seasons_production_countries.JSONSelectable | seasons_snapshots.JSONSelectable | seasons_tags.JSONSelectable | seasons_trailers.JSONSelectable | seasons_tvshow_genres.JSONSelectable | snapshot_state.JSONSelectable | snapshot_validation_issue_context.JSONSelectable | snapshot_validation_issue_severity.JSONSelectable | snapshot_validation_results.JSONSelectable | snapshot_validation_status.JSONSelectable | snapshots.JSONSelectable | tvshow_genres.JSONSelectable | tvshow_image_type.JSONSelectable | tvshows.JSONSelectable | tvshows_casts.JSONSelectable | tvshows_images.JSONSelectable | tvshows_licenses.JSONSelectable | tvshows_licenses_countries.JSONSelectable | tvshows_production_countries.JSONSelectable | tvshows_snapshots.JSONSelectable | tvshows_tags.JSONSelectable | tvshows_trailers.JSONSelectable | tvshows_tvshow_genres.JSONSelectable;
  export type Whereable = collection_image_type.Whereable | collection_relations.Whereable | collections.Whereable | collections_images.Whereable | collections_snapshots.Whereable | collections_tags.Whereable | entity_type.Whereable | episode_image_type.Whereable | episodes.Whereable | episodes_casts.Whereable | episodes_images.Whereable | episodes_licenses.Whereable | episodes_licenses_countries.Whereable | episodes_production_countries.Whereable | episodes_snapshots.Whereable | episodes_tags.Whereable | episodes_trailers.Whereable | episodes_tvshow_genres.Whereable | ingest_documents.Whereable | ingest_entity_exists_status.Whereable | ingest_item_status.Whereable | ingest_item_step_status.Whereable | ingest_item_step_type.Whereable | ingest_item_steps.Whereable | ingest_item_type.Whereable | ingest_items.Whereable | ingest_status.Whereable | iso_alpha_two_country_codes.Whereable | messaging_counter.Whereable | movie_genres.Whereable | movie_image_type.Whereable | movies.Whereable | movies_casts.Whereable | movies_images.Whereable | movies_licenses.Whereable | movies_licenses_countries.Whereable | movies_movie_genres.Whereable | movies_production_countries.Whereable | movies_snapshots.Whereable | movies_tags.Whereable | movies_trailers.Whereable | publish_status.Whereable | reviews.Whereable | season_image_type.Whereable | seasons.Whereable | seasons_casts.Whereable | seasons_images.Whereable | seasons_licenses.Whereable | seasons_licenses_countries.Whereable | seasons_production_countries.Whereable | seasons_snapshots.Whereable | seasons_tags.Whereable | seasons_trailers.Whereable | seasons_tvshow_genres.Whereable | snapshot_state.Whereable | snapshot_validation_issue_context.Whereable | snapshot_validation_issue_severity.Whereable | snapshot_validation_results.Whereable | snapshot_validation_status.Whereable | snapshots.Whereable | tvshow_genres.Whereable | tvshow_image_type.Whereable | tvshows.Whereable | tvshows_casts.Whereable | tvshows_images.Whereable | tvshows_licenses.Whereable | tvshows_licenses_countries.Whereable | tvshows_production_countries.Whereable | tvshows_snapshots.Whereable | tvshows_tags.Whereable | tvshows_trailers.Whereable | tvshows_tvshow_genres.Whereable;
  export type Insertable = collection_image_type.Insertable | collection_relations.Insertable | collections.Insertable | collections_images.Insertable | collections_snapshots.Insertable | collections_tags.Insertable | entity_type.Insertable | episode_image_type.Insertable | episodes.Insertable | episodes_casts.Insertable | episodes_images.Insertable | episodes_licenses.Insertable | episodes_licenses_countries.Insertable | episodes_production_countries.Insertable | episodes_snapshots.Insertable | episodes_tags.Insertable | episodes_trailers.Insertable | episodes_tvshow_genres.Insertable | ingest_documents.Insertable | ingest_entity_exists_status.Insertable | ingest_item_status.Insertable | ingest_item_step_status.Insertable | ingest_item_step_type.Insertable | ingest_item_steps.Insertable | ingest_item_type.Insertable | ingest_items.Insertable | ingest_status.Insertable | iso_alpha_two_country_codes.Insertable | messaging_counter.Insertable | movie_genres.Insertable | movie_image_type.Insertable | movies.Insertable | movies_casts.Insertable | movies_images.Insertable | movies_licenses.Insertable | movies_licenses_countries.Insertable | movies_movie_genres.Insertable | movies_production_countries.Insertable | movies_snapshots.Insertable | movies_tags.Insertable | movies_trailers.Insertable | publish_status.Insertable | reviews.Insertable | season_image_type.Insertable | seasons.Insertable | seasons_casts.Insertable | seasons_images.Insertable | seasons_licenses.Insertable | seasons_licenses_countries.Insertable | seasons_production_countries.Insertable | seasons_snapshots.Insertable | seasons_tags.Insertable | seasons_trailers.Insertable | seasons_tvshow_genres.Insertable | snapshot_state.Insertable | snapshot_validation_issue_context.Insertable | snapshot_validation_issue_severity.Insertable | snapshot_validation_results.Insertable | snapshot_validation_status.Insertable | snapshots.Insertable | tvshow_genres.Insertable | tvshow_image_type.Insertable | tvshows.Insertable | tvshows_casts.Insertable | tvshows_images.Insertable | tvshows_licenses.Insertable | tvshows_licenses_countries.Insertable | tvshows_production_countries.Insertable | tvshows_snapshots.Insertable | tvshows_tags.Insertable | tvshows_trailers.Insertable | tvshows_tvshow_genres.Insertable;
  export type Updatable = collection_image_type.Updatable | collection_relations.Updatable | collections.Updatable | collections_images.Updatable | collections_snapshots.Updatable | collections_tags.Updatable | entity_type.Updatable | episode_image_type.Updatable | episodes.Updatable | episodes_casts.Updatable | episodes_images.Updatable | episodes_licenses.Updatable | episodes_licenses_countries.Updatable | episodes_production_countries.Updatable | episodes_snapshots.Updatable | episodes_tags.Updatable | episodes_trailers.Updatable | episodes_tvshow_genres.Updatable | ingest_documents.Updatable | ingest_entity_exists_status.Updatable | ingest_item_status.Updatable | ingest_item_step_status.Updatable | ingest_item_step_type.Updatable | ingest_item_steps.Updatable | ingest_item_type.Updatable | ingest_items.Updatable | ingest_status.Updatable | iso_alpha_two_country_codes.Updatable | messaging_counter.Updatable | movie_genres.Updatable | movie_image_type.Updatable | movies.Updatable | movies_casts.Updatable | movies_images.Updatable | movies_licenses.Updatable | movies_licenses_countries.Updatable | movies_movie_genres.Updatable | movies_production_countries.Updatable | movies_snapshots.Updatable | movies_tags.Updatable | movies_trailers.Updatable | publish_status.Updatable | reviews.Updatable | season_image_type.Updatable | seasons.Updatable | seasons_casts.Updatable | seasons_images.Updatable | seasons_licenses.Updatable | seasons_licenses_countries.Updatable | seasons_production_countries.Updatable | seasons_snapshots.Updatable | seasons_tags.Updatable | seasons_trailers.Updatable | seasons_tvshow_genres.Updatable | snapshot_state.Updatable | snapshot_validation_issue_context.Updatable | snapshot_validation_issue_severity.Updatable | snapshot_validation_results.Updatable | snapshot_validation_status.Updatable | snapshots.Updatable | tvshow_genres.Updatable | tvshow_image_type.Updatable | tvshows.Updatable | tvshows_casts.Updatable | tvshows_images.Updatable | tvshows_licenses.Updatable | tvshows_licenses_countries.Updatable | tvshows_production_countries.Updatable | tvshows_snapshots.Updatable | tvshows_tags.Updatable | tvshows_trailers.Updatable | tvshows_tvshow_genres.Updatable;
  export type UniqueIndex = collection_image_type.UniqueIndex | collection_relations.UniqueIndex | collections.UniqueIndex | collections_images.UniqueIndex | collections_snapshots.UniqueIndex | collections_tags.UniqueIndex | entity_type.UniqueIndex | episode_image_type.UniqueIndex | episodes.UniqueIndex | episodes_casts.UniqueIndex | episodes_images.UniqueIndex | episodes_licenses.UniqueIndex | episodes_licenses_countries.UniqueIndex | episodes_production_countries.UniqueIndex | episodes_snapshots.UniqueIndex | episodes_tags.UniqueIndex | episodes_trailers.UniqueIndex | episodes_tvshow_genres.UniqueIndex | ingest_documents.UniqueIndex | ingest_entity_exists_status.UniqueIndex | ingest_item_status.UniqueIndex | ingest_item_step_status.UniqueIndex | ingest_item_step_type.UniqueIndex | ingest_item_steps.UniqueIndex | ingest_item_type.UniqueIndex | ingest_items.UniqueIndex | ingest_status.UniqueIndex | iso_alpha_two_country_codes.UniqueIndex | messaging_counter.UniqueIndex | movie_genres.UniqueIndex | movie_image_type.UniqueIndex | movies.UniqueIndex | movies_casts.UniqueIndex | movies_images.UniqueIndex | movies_licenses.UniqueIndex | movies_licenses_countries.UniqueIndex | movies_movie_genres.UniqueIndex | movies_production_countries.UniqueIndex | movies_snapshots.UniqueIndex | movies_tags.UniqueIndex | movies_trailers.UniqueIndex | publish_status.UniqueIndex | reviews.UniqueIndex | season_image_type.UniqueIndex | seasons.UniqueIndex | seasons_casts.UniqueIndex | seasons_images.UniqueIndex | seasons_licenses.UniqueIndex | seasons_licenses_countries.UniqueIndex | seasons_production_countries.UniqueIndex | seasons_snapshots.UniqueIndex | seasons_tags.UniqueIndex | seasons_trailers.UniqueIndex | seasons_tvshow_genres.UniqueIndex | snapshot_state.UniqueIndex | snapshot_validation_issue_context.UniqueIndex | snapshot_validation_issue_severity.UniqueIndex | snapshot_validation_results.UniqueIndex | snapshot_validation_status.UniqueIndex | snapshots.UniqueIndex | tvshow_genres.UniqueIndex | tvshow_image_type.UniqueIndex | tvshows.UniqueIndex | tvshows_casts.UniqueIndex | tvshows_images.UniqueIndex | tvshows_licenses.UniqueIndex | tvshows_licenses_countries.UniqueIndex | tvshows_production_countries.UniqueIndex | tvshows_snapshots.UniqueIndex | tvshows_tags.UniqueIndex | tvshows_trailers.UniqueIndex | tvshows_tvshow_genres.UniqueIndex;
  export type Column = collection_image_type.Column | collection_relations.Column | collections.Column | collections_images.Column | collections_snapshots.Column | collections_tags.Column | entity_type.Column | episode_image_type.Column | episodes.Column | episodes_casts.Column | episodes_images.Column | episodes_licenses.Column | episodes_licenses_countries.Column | episodes_production_countries.Column | episodes_snapshots.Column | episodes_tags.Column | episodes_trailers.Column | episodes_tvshow_genres.Column | ingest_documents.Column | ingest_entity_exists_status.Column | ingest_item_status.Column | ingest_item_step_status.Column | ingest_item_step_type.Column | ingest_item_steps.Column | ingest_item_type.Column | ingest_items.Column | ingest_status.Column | iso_alpha_two_country_codes.Column | messaging_counter.Column | movie_genres.Column | movie_image_type.Column | movies.Column | movies_casts.Column | movies_images.Column | movies_licenses.Column | movies_licenses_countries.Column | movies_movie_genres.Column | movies_production_countries.Column | movies_snapshots.Column | movies_tags.Column | movies_trailers.Column | publish_status.Column | reviews.Column | season_image_type.Column | seasons.Column | seasons_casts.Column | seasons_images.Column | seasons_licenses.Column | seasons_licenses_countries.Column | seasons_production_countries.Column | seasons_snapshots.Column | seasons_tags.Column | seasons_trailers.Column | seasons_tvshow_genres.Column | snapshot_state.Column | snapshot_validation_issue_context.Column | snapshot_validation_issue_severity.Column | snapshot_validation_results.Column | snapshot_validation_status.Column | snapshots.Column | tvshow_genres.Column | tvshow_image_type.Column | tvshows.Column | tvshows_casts.Column | tvshows_images.Column | tvshows_licenses.Column | tvshows_licenses_countries.Column | tvshows_production_countries.Column | tvshows_snapshots.Column | tvshows_tags.Column | tvshows_trailers.Column | tvshows_tvshow_genres.Column;
  export type AllTables = [collection_image_type.Table, collection_relations.Table, collections.Table, collections_images.Table, collections_snapshots.Table, collections_tags.Table, entity_type.Table, episode_image_type.Table, episodes.Table, episodes_casts.Table, episodes_images.Table, episodes_licenses.Table, episodes_licenses_countries.Table, episodes_production_countries.Table, episodes_snapshots.Table, episodes_tags.Table, episodes_trailers.Table, episodes_tvshow_genres.Table, ingest_documents.Table, ingest_entity_exists_status.Table, ingest_item_status.Table, ingest_item_step_status.Table, ingest_item_step_type.Table, ingest_item_steps.Table, ingest_item_type.Table, ingest_items.Table, ingest_status.Table, iso_alpha_two_country_codes.Table, messaging_counter.Table, movie_genres.Table, movie_image_type.Table, movies.Table, movies_casts.Table, movies_images.Table, movies_licenses.Table, movies_licenses_countries.Table, movies_movie_genres.Table, movies_production_countries.Table, movies_snapshots.Table, movies_tags.Table, movies_trailers.Table, publish_status.Table, reviews.Table, season_image_type.Table, seasons.Table, seasons_casts.Table, seasons_images.Table, seasons_licenses.Table, seasons_licenses_countries.Table, seasons_production_countries.Table, seasons_snapshots.Table, seasons_tags.Table, seasons_trailers.Table, seasons_tvshow_genres.Table, snapshot_state.Table, snapshot_validation_issue_context.Table, snapshot_validation_issue_severity.Table, snapshot_validation_results.Table, snapshot_validation_status.Table, snapshots.Table, tvshow_genres.Table, tvshow_image_type.Table, tvshows.Table, tvshows_casts.Table, tvshows_images.Table, tvshows_licenses.Table, tvshows_licenses_countries.Table, tvshows_production_countries.Table, tvshows_snapshots.Table, tvshows_tags.Table, tvshows_trailers.Table, tvshows_tvshow_genres.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    collection_image_type: collection_image_type.Selectable;
    collection_relations: collection_relations.Selectable;
    collections: collections.Selectable;
    collections_images: collections_images.Selectable;
    collections_snapshots: collections_snapshots.Selectable;
    collections_tags: collections_tags.Selectable;
    entity_type: entity_type.Selectable;
    episode_image_type: episode_image_type.Selectable;
    episodes: episodes.Selectable;
    episodes_casts: episodes_casts.Selectable;
    episodes_images: episodes_images.Selectable;
    episodes_licenses: episodes_licenses.Selectable;
    episodes_licenses_countries: episodes_licenses_countries.Selectable;
    episodes_production_countries: episodes_production_countries.Selectable;
    episodes_snapshots: episodes_snapshots.Selectable;
    episodes_tags: episodes_tags.Selectable;
    episodes_trailers: episodes_trailers.Selectable;
    episodes_tvshow_genres: episodes_tvshow_genres.Selectable;
    ingest_documents: ingest_documents.Selectable;
    ingest_entity_exists_status: ingest_entity_exists_status.Selectable;
    ingest_item_status: ingest_item_status.Selectable;
    ingest_item_step_status: ingest_item_step_status.Selectable;
    ingest_item_step_type: ingest_item_step_type.Selectable;
    ingest_item_steps: ingest_item_steps.Selectable;
    ingest_item_type: ingest_item_type.Selectable;
    ingest_items: ingest_items.Selectable;
    ingest_status: ingest_status.Selectable;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.Selectable;
    messaging_counter: messaging_counter.Selectable;
    movie_genres: movie_genres.Selectable;
    movie_image_type: movie_image_type.Selectable;
    movies: movies.Selectable;
    movies_casts: movies_casts.Selectable;
    movies_images: movies_images.Selectable;
    movies_licenses: movies_licenses.Selectable;
    movies_licenses_countries: movies_licenses_countries.Selectable;
    movies_movie_genres: movies_movie_genres.Selectable;
    movies_production_countries: movies_production_countries.Selectable;
    movies_snapshots: movies_snapshots.Selectable;
    movies_tags: movies_tags.Selectable;
    movies_trailers: movies_trailers.Selectable;
    publish_status: publish_status.Selectable;
    reviews: reviews.Selectable;
    season_image_type: season_image_type.Selectable;
    seasons: seasons.Selectable;
    seasons_casts: seasons_casts.Selectable;
    seasons_images: seasons_images.Selectable;
    seasons_licenses: seasons_licenses.Selectable;
    seasons_licenses_countries: seasons_licenses_countries.Selectable;
    seasons_production_countries: seasons_production_countries.Selectable;
    seasons_snapshots: seasons_snapshots.Selectable;
    seasons_tags: seasons_tags.Selectable;
    seasons_trailers: seasons_trailers.Selectable;
    seasons_tvshow_genres: seasons_tvshow_genres.Selectable;
    snapshot_state: snapshot_state.Selectable;
    snapshot_validation_issue_context: snapshot_validation_issue_context.Selectable;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.Selectable;
    snapshot_validation_results: snapshot_validation_results.Selectable;
    snapshot_validation_status: snapshot_validation_status.Selectable;
    snapshots: snapshots.Selectable;
    tvshow_genres: tvshow_genres.Selectable;
    tvshow_image_type: tvshow_image_type.Selectable;
    tvshows: tvshows.Selectable;
    tvshows_casts: tvshows_casts.Selectable;
    tvshows_images: tvshows_images.Selectable;
    tvshows_licenses: tvshows_licenses.Selectable;
    tvshows_licenses_countries: tvshows_licenses_countries.Selectable;
    tvshows_production_countries: tvshows_production_countries.Selectable;
    tvshows_snapshots: tvshows_snapshots.Selectable;
    tvshows_tags: tvshows_tags.Selectable;
    tvshows_trailers: tvshows_trailers.Selectable;
    tvshows_tvshow_genres: tvshows_tvshow_genres.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    collection_image_type: collection_image_type.JSONSelectable;
    collection_relations: collection_relations.JSONSelectable;
    collections: collections.JSONSelectable;
    collections_images: collections_images.JSONSelectable;
    collections_snapshots: collections_snapshots.JSONSelectable;
    collections_tags: collections_tags.JSONSelectable;
    entity_type: entity_type.JSONSelectable;
    episode_image_type: episode_image_type.JSONSelectable;
    episodes: episodes.JSONSelectable;
    episodes_casts: episodes_casts.JSONSelectable;
    episodes_images: episodes_images.JSONSelectable;
    episodes_licenses: episodes_licenses.JSONSelectable;
    episodes_licenses_countries: episodes_licenses_countries.JSONSelectable;
    episodes_production_countries: episodes_production_countries.JSONSelectable;
    episodes_snapshots: episodes_snapshots.JSONSelectable;
    episodes_tags: episodes_tags.JSONSelectable;
    episodes_trailers: episodes_trailers.JSONSelectable;
    episodes_tvshow_genres: episodes_tvshow_genres.JSONSelectable;
    ingest_documents: ingest_documents.JSONSelectable;
    ingest_entity_exists_status: ingest_entity_exists_status.JSONSelectable;
    ingest_item_status: ingest_item_status.JSONSelectable;
    ingest_item_step_status: ingest_item_step_status.JSONSelectable;
    ingest_item_step_type: ingest_item_step_type.JSONSelectable;
    ingest_item_steps: ingest_item_steps.JSONSelectable;
    ingest_item_type: ingest_item_type.JSONSelectable;
    ingest_items: ingest_items.JSONSelectable;
    ingest_status: ingest_status.JSONSelectable;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.JSONSelectable;
    messaging_counter: messaging_counter.JSONSelectable;
    movie_genres: movie_genres.JSONSelectable;
    movie_image_type: movie_image_type.JSONSelectable;
    movies: movies.JSONSelectable;
    movies_casts: movies_casts.JSONSelectable;
    movies_images: movies_images.JSONSelectable;
    movies_licenses: movies_licenses.JSONSelectable;
    movies_licenses_countries: movies_licenses_countries.JSONSelectable;
    movies_movie_genres: movies_movie_genres.JSONSelectable;
    movies_production_countries: movies_production_countries.JSONSelectable;
    movies_snapshots: movies_snapshots.JSONSelectable;
    movies_tags: movies_tags.JSONSelectable;
    movies_trailers: movies_trailers.JSONSelectable;
    publish_status: publish_status.JSONSelectable;
    reviews: reviews.JSONSelectable;
    season_image_type: season_image_type.JSONSelectable;
    seasons: seasons.JSONSelectable;
    seasons_casts: seasons_casts.JSONSelectable;
    seasons_images: seasons_images.JSONSelectable;
    seasons_licenses: seasons_licenses.JSONSelectable;
    seasons_licenses_countries: seasons_licenses_countries.JSONSelectable;
    seasons_production_countries: seasons_production_countries.JSONSelectable;
    seasons_snapshots: seasons_snapshots.JSONSelectable;
    seasons_tags: seasons_tags.JSONSelectable;
    seasons_trailers: seasons_trailers.JSONSelectable;
    seasons_tvshow_genres: seasons_tvshow_genres.JSONSelectable;
    snapshot_state: snapshot_state.JSONSelectable;
    snapshot_validation_issue_context: snapshot_validation_issue_context.JSONSelectable;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.JSONSelectable;
    snapshot_validation_results: snapshot_validation_results.JSONSelectable;
    snapshot_validation_status: snapshot_validation_status.JSONSelectable;
    snapshots: snapshots.JSONSelectable;
    tvshow_genres: tvshow_genres.JSONSelectable;
    tvshow_image_type: tvshow_image_type.JSONSelectable;
    tvshows: tvshows.JSONSelectable;
    tvshows_casts: tvshows_casts.JSONSelectable;
    tvshows_images: tvshows_images.JSONSelectable;
    tvshows_licenses: tvshows_licenses.JSONSelectable;
    tvshows_licenses_countries: tvshows_licenses_countries.JSONSelectable;
    tvshows_production_countries: tvshows_production_countries.JSONSelectable;
    tvshows_snapshots: tvshows_snapshots.JSONSelectable;
    tvshows_tags: tvshows_tags.JSONSelectable;
    tvshows_trailers: tvshows_trailers.JSONSelectable;
    tvshows_tvshow_genres: tvshows_tvshow_genres.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    collection_image_type: collection_image_type.Whereable;
    collection_relations: collection_relations.Whereable;
    collections: collections.Whereable;
    collections_images: collections_images.Whereable;
    collections_snapshots: collections_snapshots.Whereable;
    collections_tags: collections_tags.Whereable;
    entity_type: entity_type.Whereable;
    episode_image_type: episode_image_type.Whereable;
    episodes: episodes.Whereable;
    episodes_casts: episodes_casts.Whereable;
    episodes_images: episodes_images.Whereable;
    episodes_licenses: episodes_licenses.Whereable;
    episodes_licenses_countries: episodes_licenses_countries.Whereable;
    episodes_production_countries: episodes_production_countries.Whereable;
    episodes_snapshots: episodes_snapshots.Whereable;
    episodes_tags: episodes_tags.Whereable;
    episodes_trailers: episodes_trailers.Whereable;
    episodes_tvshow_genres: episodes_tvshow_genres.Whereable;
    ingest_documents: ingest_documents.Whereable;
    ingest_entity_exists_status: ingest_entity_exists_status.Whereable;
    ingest_item_status: ingest_item_status.Whereable;
    ingest_item_step_status: ingest_item_step_status.Whereable;
    ingest_item_step_type: ingest_item_step_type.Whereable;
    ingest_item_steps: ingest_item_steps.Whereable;
    ingest_item_type: ingest_item_type.Whereable;
    ingest_items: ingest_items.Whereable;
    ingest_status: ingest_status.Whereable;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.Whereable;
    messaging_counter: messaging_counter.Whereable;
    movie_genres: movie_genres.Whereable;
    movie_image_type: movie_image_type.Whereable;
    movies: movies.Whereable;
    movies_casts: movies_casts.Whereable;
    movies_images: movies_images.Whereable;
    movies_licenses: movies_licenses.Whereable;
    movies_licenses_countries: movies_licenses_countries.Whereable;
    movies_movie_genres: movies_movie_genres.Whereable;
    movies_production_countries: movies_production_countries.Whereable;
    movies_snapshots: movies_snapshots.Whereable;
    movies_tags: movies_tags.Whereable;
    movies_trailers: movies_trailers.Whereable;
    publish_status: publish_status.Whereable;
    reviews: reviews.Whereable;
    season_image_type: season_image_type.Whereable;
    seasons: seasons.Whereable;
    seasons_casts: seasons_casts.Whereable;
    seasons_images: seasons_images.Whereable;
    seasons_licenses: seasons_licenses.Whereable;
    seasons_licenses_countries: seasons_licenses_countries.Whereable;
    seasons_production_countries: seasons_production_countries.Whereable;
    seasons_snapshots: seasons_snapshots.Whereable;
    seasons_tags: seasons_tags.Whereable;
    seasons_trailers: seasons_trailers.Whereable;
    seasons_tvshow_genres: seasons_tvshow_genres.Whereable;
    snapshot_state: snapshot_state.Whereable;
    snapshot_validation_issue_context: snapshot_validation_issue_context.Whereable;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.Whereable;
    snapshot_validation_results: snapshot_validation_results.Whereable;
    snapshot_validation_status: snapshot_validation_status.Whereable;
    snapshots: snapshots.Whereable;
    tvshow_genres: tvshow_genres.Whereable;
    tvshow_image_type: tvshow_image_type.Whereable;
    tvshows: tvshows.Whereable;
    tvshows_casts: tvshows_casts.Whereable;
    tvshows_images: tvshows_images.Whereable;
    tvshows_licenses: tvshows_licenses.Whereable;
    tvshows_licenses_countries: tvshows_licenses_countries.Whereable;
    tvshows_production_countries: tvshows_production_countries.Whereable;
    tvshows_snapshots: tvshows_snapshots.Whereable;
    tvshows_tags: tvshows_tags.Whereable;
    tvshows_trailers: tvshows_trailers.Whereable;
    tvshows_tvshow_genres: tvshows_tvshow_genres.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    collection_image_type: collection_image_type.Insertable;
    collection_relations: collection_relations.Insertable;
    collections: collections.Insertable;
    collections_images: collections_images.Insertable;
    collections_snapshots: collections_snapshots.Insertable;
    collections_tags: collections_tags.Insertable;
    entity_type: entity_type.Insertable;
    episode_image_type: episode_image_type.Insertable;
    episodes: episodes.Insertable;
    episodes_casts: episodes_casts.Insertable;
    episodes_images: episodes_images.Insertable;
    episodes_licenses: episodes_licenses.Insertable;
    episodes_licenses_countries: episodes_licenses_countries.Insertable;
    episodes_production_countries: episodes_production_countries.Insertable;
    episodes_snapshots: episodes_snapshots.Insertable;
    episodes_tags: episodes_tags.Insertable;
    episodes_trailers: episodes_trailers.Insertable;
    episodes_tvshow_genres: episodes_tvshow_genres.Insertable;
    ingest_documents: ingest_documents.Insertable;
    ingest_entity_exists_status: ingest_entity_exists_status.Insertable;
    ingest_item_status: ingest_item_status.Insertable;
    ingest_item_step_status: ingest_item_step_status.Insertable;
    ingest_item_step_type: ingest_item_step_type.Insertable;
    ingest_item_steps: ingest_item_steps.Insertable;
    ingest_item_type: ingest_item_type.Insertable;
    ingest_items: ingest_items.Insertable;
    ingest_status: ingest_status.Insertable;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.Insertable;
    messaging_counter: messaging_counter.Insertable;
    movie_genres: movie_genres.Insertable;
    movie_image_type: movie_image_type.Insertable;
    movies: movies.Insertable;
    movies_casts: movies_casts.Insertable;
    movies_images: movies_images.Insertable;
    movies_licenses: movies_licenses.Insertable;
    movies_licenses_countries: movies_licenses_countries.Insertable;
    movies_movie_genres: movies_movie_genres.Insertable;
    movies_production_countries: movies_production_countries.Insertable;
    movies_snapshots: movies_snapshots.Insertable;
    movies_tags: movies_tags.Insertable;
    movies_trailers: movies_trailers.Insertable;
    publish_status: publish_status.Insertable;
    reviews: reviews.Insertable;
    season_image_type: season_image_type.Insertable;
    seasons: seasons.Insertable;
    seasons_casts: seasons_casts.Insertable;
    seasons_images: seasons_images.Insertable;
    seasons_licenses: seasons_licenses.Insertable;
    seasons_licenses_countries: seasons_licenses_countries.Insertable;
    seasons_production_countries: seasons_production_countries.Insertable;
    seasons_snapshots: seasons_snapshots.Insertable;
    seasons_tags: seasons_tags.Insertable;
    seasons_trailers: seasons_trailers.Insertable;
    seasons_tvshow_genres: seasons_tvshow_genres.Insertable;
    snapshot_state: snapshot_state.Insertable;
    snapshot_validation_issue_context: snapshot_validation_issue_context.Insertable;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.Insertable;
    snapshot_validation_results: snapshot_validation_results.Insertable;
    snapshot_validation_status: snapshot_validation_status.Insertable;
    snapshots: snapshots.Insertable;
    tvshow_genres: tvshow_genres.Insertable;
    tvshow_image_type: tvshow_image_type.Insertable;
    tvshows: tvshows.Insertable;
    tvshows_casts: tvshows_casts.Insertable;
    tvshows_images: tvshows_images.Insertable;
    tvshows_licenses: tvshows_licenses.Insertable;
    tvshows_licenses_countries: tvshows_licenses_countries.Insertable;
    tvshows_production_countries: tvshows_production_countries.Insertable;
    tvshows_snapshots: tvshows_snapshots.Insertable;
    tvshows_tags: tvshows_tags.Insertable;
    tvshows_trailers: tvshows_trailers.Insertable;
    tvshows_tvshow_genres: tvshows_tvshow_genres.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    collection_image_type: collection_image_type.Updatable;
    collection_relations: collection_relations.Updatable;
    collections: collections.Updatable;
    collections_images: collections_images.Updatable;
    collections_snapshots: collections_snapshots.Updatable;
    collections_tags: collections_tags.Updatable;
    entity_type: entity_type.Updatable;
    episode_image_type: episode_image_type.Updatable;
    episodes: episodes.Updatable;
    episodes_casts: episodes_casts.Updatable;
    episodes_images: episodes_images.Updatable;
    episodes_licenses: episodes_licenses.Updatable;
    episodes_licenses_countries: episodes_licenses_countries.Updatable;
    episodes_production_countries: episodes_production_countries.Updatable;
    episodes_snapshots: episodes_snapshots.Updatable;
    episodes_tags: episodes_tags.Updatable;
    episodes_trailers: episodes_trailers.Updatable;
    episodes_tvshow_genres: episodes_tvshow_genres.Updatable;
    ingest_documents: ingest_documents.Updatable;
    ingest_entity_exists_status: ingest_entity_exists_status.Updatable;
    ingest_item_status: ingest_item_status.Updatable;
    ingest_item_step_status: ingest_item_step_status.Updatable;
    ingest_item_step_type: ingest_item_step_type.Updatable;
    ingest_item_steps: ingest_item_steps.Updatable;
    ingest_item_type: ingest_item_type.Updatable;
    ingest_items: ingest_items.Updatable;
    ingest_status: ingest_status.Updatable;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.Updatable;
    messaging_counter: messaging_counter.Updatable;
    movie_genres: movie_genres.Updatable;
    movie_image_type: movie_image_type.Updatable;
    movies: movies.Updatable;
    movies_casts: movies_casts.Updatable;
    movies_images: movies_images.Updatable;
    movies_licenses: movies_licenses.Updatable;
    movies_licenses_countries: movies_licenses_countries.Updatable;
    movies_movie_genres: movies_movie_genres.Updatable;
    movies_production_countries: movies_production_countries.Updatable;
    movies_snapshots: movies_snapshots.Updatable;
    movies_tags: movies_tags.Updatable;
    movies_trailers: movies_trailers.Updatable;
    publish_status: publish_status.Updatable;
    reviews: reviews.Updatable;
    season_image_type: season_image_type.Updatable;
    seasons: seasons.Updatable;
    seasons_casts: seasons_casts.Updatable;
    seasons_images: seasons_images.Updatable;
    seasons_licenses: seasons_licenses.Updatable;
    seasons_licenses_countries: seasons_licenses_countries.Updatable;
    seasons_production_countries: seasons_production_countries.Updatable;
    seasons_snapshots: seasons_snapshots.Updatable;
    seasons_tags: seasons_tags.Updatable;
    seasons_trailers: seasons_trailers.Updatable;
    seasons_tvshow_genres: seasons_tvshow_genres.Updatable;
    snapshot_state: snapshot_state.Updatable;
    snapshot_validation_issue_context: snapshot_validation_issue_context.Updatable;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.Updatable;
    snapshot_validation_results: snapshot_validation_results.Updatable;
    snapshot_validation_status: snapshot_validation_status.Updatable;
    snapshots: snapshots.Updatable;
    tvshow_genres: tvshow_genres.Updatable;
    tvshow_image_type: tvshow_image_type.Updatable;
    tvshows: tvshows.Updatable;
    tvshows_casts: tvshows_casts.Updatable;
    tvshows_images: tvshows_images.Updatable;
    tvshows_licenses: tvshows_licenses.Updatable;
    tvshows_licenses_countries: tvshows_licenses_countries.Updatable;
    tvshows_production_countries: tvshows_production_countries.Updatable;
    tvshows_snapshots: tvshows_snapshots.Updatable;
    tvshows_tags: tvshows_tags.Updatable;
    tvshows_trailers: tvshows_trailers.Updatable;
    tvshows_tvshow_genres: tvshows_tvshow_genres.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    collection_image_type: collection_image_type.UniqueIndex;
    collection_relations: collection_relations.UniqueIndex;
    collections: collections.UniqueIndex;
    collections_images: collections_images.UniqueIndex;
    collections_snapshots: collections_snapshots.UniqueIndex;
    collections_tags: collections_tags.UniqueIndex;
    entity_type: entity_type.UniqueIndex;
    episode_image_type: episode_image_type.UniqueIndex;
    episodes: episodes.UniqueIndex;
    episodes_casts: episodes_casts.UniqueIndex;
    episodes_images: episodes_images.UniqueIndex;
    episodes_licenses: episodes_licenses.UniqueIndex;
    episodes_licenses_countries: episodes_licenses_countries.UniqueIndex;
    episodes_production_countries: episodes_production_countries.UniqueIndex;
    episodes_snapshots: episodes_snapshots.UniqueIndex;
    episodes_tags: episodes_tags.UniqueIndex;
    episodes_trailers: episodes_trailers.UniqueIndex;
    episodes_tvshow_genres: episodes_tvshow_genres.UniqueIndex;
    ingest_documents: ingest_documents.UniqueIndex;
    ingest_entity_exists_status: ingest_entity_exists_status.UniqueIndex;
    ingest_item_status: ingest_item_status.UniqueIndex;
    ingest_item_step_status: ingest_item_step_status.UniqueIndex;
    ingest_item_step_type: ingest_item_step_type.UniqueIndex;
    ingest_item_steps: ingest_item_steps.UniqueIndex;
    ingest_item_type: ingest_item_type.UniqueIndex;
    ingest_items: ingest_items.UniqueIndex;
    ingest_status: ingest_status.UniqueIndex;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.UniqueIndex;
    messaging_counter: messaging_counter.UniqueIndex;
    movie_genres: movie_genres.UniqueIndex;
    movie_image_type: movie_image_type.UniqueIndex;
    movies: movies.UniqueIndex;
    movies_casts: movies_casts.UniqueIndex;
    movies_images: movies_images.UniqueIndex;
    movies_licenses: movies_licenses.UniqueIndex;
    movies_licenses_countries: movies_licenses_countries.UniqueIndex;
    movies_movie_genres: movies_movie_genres.UniqueIndex;
    movies_production_countries: movies_production_countries.UniqueIndex;
    movies_snapshots: movies_snapshots.UniqueIndex;
    movies_tags: movies_tags.UniqueIndex;
    movies_trailers: movies_trailers.UniqueIndex;
    publish_status: publish_status.UniqueIndex;
    reviews: reviews.UniqueIndex;
    season_image_type: season_image_type.UniqueIndex;
    seasons: seasons.UniqueIndex;
    seasons_casts: seasons_casts.UniqueIndex;
    seasons_images: seasons_images.UniqueIndex;
    seasons_licenses: seasons_licenses.UniqueIndex;
    seasons_licenses_countries: seasons_licenses_countries.UniqueIndex;
    seasons_production_countries: seasons_production_countries.UniqueIndex;
    seasons_snapshots: seasons_snapshots.UniqueIndex;
    seasons_tags: seasons_tags.UniqueIndex;
    seasons_trailers: seasons_trailers.UniqueIndex;
    seasons_tvshow_genres: seasons_tvshow_genres.UniqueIndex;
    snapshot_state: snapshot_state.UniqueIndex;
    snapshot_validation_issue_context: snapshot_validation_issue_context.UniqueIndex;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.UniqueIndex;
    snapshot_validation_results: snapshot_validation_results.UniqueIndex;
    snapshot_validation_status: snapshot_validation_status.UniqueIndex;
    snapshots: snapshots.UniqueIndex;
    tvshow_genres: tvshow_genres.UniqueIndex;
    tvshow_image_type: tvshow_image_type.UniqueIndex;
    tvshows: tvshows.UniqueIndex;
    tvshows_casts: tvshows_casts.UniqueIndex;
    tvshows_images: tvshows_images.UniqueIndex;
    tvshows_licenses: tvshows_licenses.UniqueIndex;
    tvshows_licenses_countries: tvshows_licenses_countries.UniqueIndex;
    tvshows_production_countries: tvshows_production_countries.UniqueIndex;
    tvshows_snapshots: tvshows_snapshots.UniqueIndex;
    tvshows_tags: tvshows_tags.UniqueIndex;
    tvshows_trailers: tvshows_trailers.UniqueIndex;
    tvshows_tvshow_genres: tvshows_tvshow_genres.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    collection_image_type: collection_image_type.Column;
    collection_relations: collection_relations.Column;
    collections: collections.Column;
    collections_images: collections_images.Column;
    collections_snapshots: collections_snapshots.Column;
    collections_tags: collections_tags.Column;
    entity_type: entity_type.Column;
    episode_image_type: episode_image_type.Column;
    episodes: episodes.Column;
    episodes_casts: episodes_casts.Column;
    episodes_images: episodes_images.Column;
    episodes_licenses: episodes_licenses.Column;
    episodes_licenses_countries: episodes_licenses_countries.Column;
    episodes_production_countries: episodes_production_countries.Column;
    episodes_snapshots: episodes_snapshots.Column;
    episodes_tags: episodes_tags.Column;
    episodes_trailers: episodes_trailers.Column;
    episodes_tvshow_genres: episodes_tvshow_genres.Column;
    ingest_documents: ingest_documents.Column;
    ingest_entity_exists_status: ingest_entity_exists_status.Column;
    ingest_item_status: ingest_item_status.Column;
    ingest_item_step_status: ingest_item_step_status.Column;
    ingest_item_step_type: ingest_item_step_type.Column;
    ingest_item_steps: ingest_item_steps.Column;
    ingest_item_type: ingest_item_type.Column;
    ingest_items: ingest_items.Column;
    ingest_status: ingest_status.Column;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.Column;
    messaging_counter: messaging_counter.Column;
    movie_genres: movie_genres.Column;
    movie_image_type: movie_image_type.Column;
    movies: movies.Column;
    movies_casts: movies_casts.Column;
    movies_images: movies_images.Column;
    movies_licenses: movies_licenses.Column;
    movies_licenses_countries: movies_licenses_countries.Column;
    movies_movie_genres: movies_movie_genres.Column;
    movies_production_countries: movies_production_countries.Column;
    movies_snapshots: movies_snapshots.Column;
    movies_tags: movies_tags.Column;
    movies_trailers: movies_trailers.Column;
    publish_status: publish_status.Column;
    reviews: reviews.Column;
    season_image_type: season_image_type.Column;
    seasons: seasons.Column;
    seasons_casts: seasons_casts.Column;
    seasons_images: seasons_images.Column;
    seasons_licenses: seasons_licenses.Column;
    seasons_licenses_countries: seasons_licenses_countries.Column;
    seasons_production_countries: seasons_production_countries.Column;
    seasons_snapshots: seasons_snapshots.Column;
    seasons_tags: seasons_tags.Column;
    seasons_trailers: seasons_trailers.Column;
    seasons_tvshow_genres: seasons_tvshow_genres.Column;
    snapshot_state: snapshot_state.Column;
    snapshot_validation_issue_context: snapshot_validation_issue_context.Column;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.Column;
    snapshot_validation_results: snapshot_validation_results.Column;
    snapshot_validation_status: snapshot_validation_status.Column;
    snapshots: snapshots.Column;
    tvshow_genres: tvshow_genres.Column;
    tvshow_image_type: tvshow_image_type.Column;
    tvshows: tvshows.Column;
    tvshows_casts: tvshows_casts.Column;
    tvshows_images: tvshows_images.Column;
    tvshows_licenses: tvshows_licenses.Column;
    tvshows_licenses_countries: tvshows_licenses_countries.Column;
    tvshows_production_countries: tvshows_production_countries.Column;
    tvshows_snapshots: tvshows_snapshots.Column;
    tvshows_tags: tvshows_tags.Column;
    tvshows_trailers: tvshows_trailers.Column;
    tvshows_tvshow_genres: tvshows_tvshow_genres.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    collection_image_type: collection_image_type.SQL;
    collection_relations: collection_relations.SQL;
    collections: collections.SQL;
    collections_images: collections_images.SQL;
    collections_snapshots: collections_snapshots.SQL;
    collections_tags: collections_tags.SQL;
    entity_type: entity_type.SQL;
    episode_image_type: episode_image_type.SQL;
    episodes: episodes.SQL;
    episodes_casts: episodes_casts.SQL;
    episodes_images: episodes_images.SQL;
    episodes_licenses: episodes_licenses.SQL;
    episodes_licenses_countries: episodes_licenses_countries.SQL;
    episodes_production_countries: episodes_production_countries.SQL;
    episodes_snapshots: episodes_snapshots.SQL;
    episodes_tags: episodes_tags.SQL;
    episodes_trailers: episodes_trailers.SQL;
    episodes_tvshow_genres: episodes_tvshow_genres.SQL;
    ingest_documents: ingest_documents.SQL;
    ingest_entity_exists_status: ingest_entity_exists_status.SQL;
    ingest_item_status: ingest_item_status.SQL;
    ingest_item_step_status: ingest_item_step_status.SQL;
    ingest_item_step_type: ingest_item_step_type.SQL;
    ingest_item_steps: ingest_item_steps.SQL;
    ingest_item_type: ingest_item_type.SQL;
    ingest_items: ingest_items.SQL;
    ingest_status: ingest_status.SQL;
    iso_alpha_two_country_codes: iso_alpha_two_country_codes.SQL;
    messaging_counter: messaging_counter.SQL;
    movie_genres: movie_genres.SQL;
    movie_image_type: movie_image_type.SQL;
    movies: movies.SQL;
    movies_casts: movies_casts.SQL;
    movies_images: movies_images.SQL;
    movies_licenses: movies_licenses.SQL;
    movies_licenses_countries: movies_licenses_countries.SQL;
    movies_movie_genres: movies_movie_genres.SQL;
    movies_production_countries: movies_production_countries.SQL;
    movies_snapshots: movies_snapshots.SQL;
    movies_tags: movies_tags.SQL;
    movies_trailers: movies_trailers.SQL;
    publish_status: publish_status.SQL;
    reviews: reviews.SQL;
    season_image_type: season_image_type.SQL;
    seasons: seasons.SQL;
    seasons_casts: seasons_casts.SQL;
    seasons_images: seasons_images.SQL;
    seasons_licenses: seasons_licenses.SQL;
    seasons_licenses_countries: seasons_licenses_countries.SQL;
    seasons_production_countries: seasons_production_countries.SQL;
    seasons_snapshots: seasons_snapshots.SQL;
    seasons_tags: seasons_tags.SQL;
    seasons_trailers: seasons_trailers.SQL;
    seasons_tvshow_genres: seasons_tvshow_genres.SQL;
    snapshot_state: snapshot_state.SQL;
    snapshot_validation_issue_context: snapshot_validation_issue_context.SQL;
    snapshot_validation_issue_severity: snapshot_validation_issue_severity.SQL;
    snapshot_validation_results: snapshot_validation_results.SQL;
    snapshot_validation_status: snapshot_validation_status.SQL;
    snapshots: snapshots.SQL;
    tvshow_genres: tvshow_genres.SQL;
    tvshow_image_type: tvshow_image_type.SQL;
    tvshows: tvshows.SQL;
    tvshows_casts: tvshows_casts.SQL;
    tvshows_images: tvshows_images.SQL;
    tvshows_licenses: tvshows_licenses.SQL;
    tvshows_licenses_countries: tvshows_licenses_countries.SQL;
    tvshows_production_countries: tvshows_production_countries.SQL;
    tvshows_snapshots: tvshows_snapshots.SQL;
    tvshows_tags: tvshows_tags.SQL;
    tvshows_trailers: tvshows_trailers.SQL;
    tvshows_tvshow_genres: tvshows_tvshow_genres.SQL;
  }[T];

}
