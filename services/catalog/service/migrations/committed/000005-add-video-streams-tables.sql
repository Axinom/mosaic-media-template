--! Previous: sha1:7b5d84ee142b873857e00f11ae30285744527dd5
--! Hash: sha1:dfaef66888758c6069e1046fa16ccf260d3949d7
--! Message: add-video-streams-tables

-- movie_video_streams START
DROP TABLE IF EXISTS app_public.movie_video_streams CASCADE;
CREATE TABLE app_public.movie_video_streams(
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  movie_video_id INTEGER REFERENCES movie_videos ON DELETE CASCADE,
  label TEXT,
  drm_key_id TEXT,
  format TEXT,
  iv TEXT,
  initial_file TEXT,
  language_code TEXT,
  bandwidth_in_bps INTEGER
);
SELECT ax_define.define_index('movie_video_id', 'movie_video_streams', 'app_public');

-- Migrate movie_videos.drm_key_ids column values to movie_video_streams and drop it.
DO $$ 
DECLARE
  get_drm_key_ids_exists CURSOR FOR
    SELECT 1 
    FROM information_schema.columns 
    WHERE table_name='movie_videos' and column_name='drm_key_ids';

	get_videos CURSOR FOR
		SELECT id, drm_key_ids
		FROM   app_public.movie_videos
		WHERE drm_key_ids IS NOT NULL;
	
	video_stream_exists CURSOR(movie_video_id_ INTEGER, key_id_ TEXT) FOR
		SELECT 1
		FROM app_public.movie_video_streams vs 
		WHERE vs.movie_video_id = movie_video_id_
		AND vs.drm_key_id = key_id_;

  drm_key_id_exists_ BOOLEAN;
	drm_key_id_ TEXT;
	video_stream_exists_ BOOLEAN;
BEGIN
  -- Make the script idempotent by first checking the drm_key_ids column exists.
  -- If it doesn't, it means that the migration has already been run.
  OPEN get_drm_key_ids_exists;
  FETCH get_drm_key_ids_exists INTO drm_key_id_exists_;
  CLOSE get_drm_key_ids_exists;

  IF drm_key_id_exists_ IS NOT NULL THEN
    FOR video_rec_ IN get_videos LOOP
      FOREACH drm_key_id_ IN ARRAY video_rec_.drm_key_ids LOOP
        OPEN video_stream_exists(video_rec_.id, drm_key_id_);
        FETCH video_stream_exists INTO video_stream_exists_;
        CLOSE video_stream_exists;
        IF (video_stream_exists_ IS NULL) THEN
          INSERT INTO app_public.movie_video_streams  (movie_video_id, drm_key_id)
            VALUES (video_rec_.id, drm_key_id_);
          END IF;
          video_stream_exists_ := NULL;
      END LOOP;
    END LOOP;
  END IF;
END $$;

ALTER TABLE app_public.movie_videos DROP COLUMN IF EXISTS drm_key_ids;
-- movie_video_streams END

-- episode_video_streams START
DROP TABLE IF EXISTS app_public.episode_video_streams CASCADE;
CREATE TABLE app_public.episode_video_streams(
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  episode_video_id INTEGER REFERENCES episode_videos ON DELETE CASCADE,
  label TEXT,
  drm_key_id TEXT,
  format TEXT,
  iv TEXT,
  initial_file TEXT,
  language_code TEXT,
  bandwidth_in_bps INTEGER
);
SELECT ax_define.define_index('episode_video_id', 'episode_video_streams', 'app_public');

-- Migrate episode_videos.drm_key_ids column values to episode_video_streams and drop it.
DO $$ 
DECLARE
  get_drm_key_ids_exists CURSOR FOR
      SELECT 1 
      FROM information_schema.columns 
      WHERE table_name='episode_videos' and column_name='drm_key_ids';

	get_videos CURSOR FOR
		SELECT id, drm_key_ids
		FROM   app_public.episode_videos
		WHERE drm_key_ids IS NOT NULL;
	
	video_stream_exists CURSOR(episode_video_id_ INTEGER, key_id_ TEXT) FOR
		SELECT 1
		FROM app_public.episode_video_streams vs 
		WHERE vs.episode_video_id = episode_video_id_
		AND vs.drm_key_id = key_id_;
  
  drm_key_id_exists_ BOOLEAN;
	drm_key_id_ TEXT;
	video_stream_exists_ BOOLEAN;
BEGIN
  -- Make the script idempotent by first checking the drm_key_ids column exists.
  -- If it doesn't, it means that the migration has already been run.
  OPEN get_drm_key_ids_exists;
  FETCH get_drm_key_ids_exists INTO drm_key_id_exists_;
  CLOSE get_drm_key_ids_exists;

  IF drm_key_id_exists_ IS NOT NULL THEN
    FOR video_rec_ IN get_videos LOOP
      FOREACH drm_key_id_ IN ARRAY video_rec_.drm_key_ids LOOP
        OPEN video_stream_exists(video_rec_.id, drm_key_id_);
        FETCH video_stream_exists INTO video_stream_exists_;
        CLOSE video_stream_exists;
        IF (video_stream_exists_ IS NULL) THEN
          INSERT INTO app_public.episode_video_streams  (episode_video_id, drm_key_id)
            VALUES (video_rec_.id, drm_key_id_);
          END IF;
          video_stream_exists_ := NULL;
      END LOOP;
    END LOOP;
  END IF;
END $$;

ALTER TABLE app_public.episode_videos DROP COLUMN IF EXISTS drm_key_ids;
-- episode_video_streams END

-- season_video_streams START
DROP TABLE IF EXISTS app_public.season_video_streams CASCADE;
CREATE TABLE app_public.season_video_streams(
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  season_video_id INTEGER REFERENCES season_videos ON DELETE CASCADE,
  label TEXT,
  drm_key_id TEXT,
  format TEXT,
  iv TEXT,
  initial_file TEXT,
  language_code TEXT,
  bandwidth_in_bps INTEGER
);
SELECT ax_define.define_index('season_video_id', 'season_video_streams', 'app_public');

-- Migrate season_videos.drm_key_ids column values to season_video_streams and drop it.
DO $$ 
DECLARE
  get_drm_key_ids_exists CURSOR FOR
      SELECT 1 
      FROM information_schema.columns 
      WHERE table_name='season_videos' and column_name='drm_key_ids';

	get_videos CURSOR FOR
		SELECT id, drm_key_ids
		FROM   app_public.season_videos
		WHERE drm_key_ids IS NOT NULL;
	
	video_stream_exists CURSOR(season_video_id_ INTEGER, key_id_ TEXT) FOR
		SELECT 1
		FROM app_public.season_video_streams vs 
		WHERE vs.season_video_id = season_video_id_
		AND vs.drm_key_id = key_id_;

  drm_key_id_exists_ BOOLEAN;
	drm_key_id_ TEXT;
	video_stream_exists_ BOOLEAN;
BEGIN
  -- Make the script idempotent by first checking the drm_key_ids column exists.
  -- If it doesn't, it means that the migration has already been run.
  OPEN get_drm_key_ids_exists;
  FETCH get_drm_key_ids_exists INTO drm_key_id_exists_;
  CLOSE get_drm_key_ids_exists;

  IF drm_key_id_exists_ IS NOT NULL THEN
    FOR video_rec_ IN get_videos LOOP
      FOREACH drm_key_id_ IN ARRAY video_rec_.drm_key_ids LOOP
        OPEN video_stream_exists(video_rec_.id, drm_key_id_);
        FETCH video_stream_exists INTO video_stream_exists_;
        CLOSE video_stream_exists;
        IF (video_stream_exists_ IS NULL) THEN
          INSERT INTO app_public.season_video_streams  (season_video_id, drm_key_id)
            VALUES (video_rec_.id, drm_key_id_);
          END IF;
          video_stream_exists_ := NULL;
      END LOOP;
    END LOOP;
  END IF;
END $$;

ALTER TABLE app_public.season_videos DROP COLUMN IF EXISTS drm_key_ids;
-- season_video_streams END

-- tvshow_video_streams START
DROP TABLE IF EXISTS app_public.tvshow_video_streams CASCADE;
CREATE TABLE app_public.tvshow_video_streams(
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  tvshow_video_id INTEGER REFERENCES tvshow_videos ON DELETE CASCADE,
  label TEXT,
  drm_key_id TEXT,
  format TEXT,
  iv TEXT,
  initial_file TEXT,
  language_code TEXT,
  bandwidth_in_bps INTEGER
);
SELECT ax_define.define_index('tvshow_video_id', 'tvshow_video_streams', 'app_public');


-- Migrate tvshow_videos.drm_key_ids column values to tvshow_video_streams and drop it.
DO $$ 
DECLARE
  get_drm_key_ids_exists CURSOR FOR
      SELECT 1 
      FROM information_schema.columns 
      WHERE table_name='tvshow_videos' and column_name='drm_key_ids';

	get_videos CURSOR FOR
		SELECT id, drm_key_ids
		FROM   app_public.tvshow_videos
		WHERE drm_key_ids IS NOT NULL;
	
	video_stream_exists CURSOR(tvshow_video_id_ INTEGER, key_id_ TEXT) FOR
		SELECT 1
		FROM app_public.tvshow_video_streams vs 
		WHERE vs.tvshow_video_id = tvshow_video_id_
		AND vs.drm_key_id = key_id_;
  
  drm_key_id_exists_ BOOLEAN;
	drm_key_id_ TEXT;
	video_stream_exists_ BOOLEAN;
BEGIN
  -- Make the script idempotent by first checking the drm_key_ids column exists.
  -- If it doesn't, it means that the migration has already been run.
  OPEN get_drm_key_ids_exists;
  FETCH get_drm_key_ids_exists INTO drm_key_id_exists_;
  CLOSE get_drm_key_ids_exists;

  IF drm_key_id_exists_ IS NOT NULL THEN
    FOR video_rec_ IN get_videos LOOP
      FOREACH drm_key_id_ IN ARRAY video_rec_.drm_key_ids LOOP
        OPEN video_stream_exists(video_rec_.id, drm_key_id_);
        FETCH video_stream_exists INTO video_stream_exists_;
        CLOSE video_stream_exists;
        IF (video_stream_exists_ IS NULL) THEN
          INSERT INTO app_public.tvshow_video_streams  (tvshow_video_id, drm_key_id)
            VALUES (video_rec_.id, drm_key_id_);
          END IF;
          video_stream_exists_ := NULL;
      END LOOP;
    END LOOP;
  END IF;
END $$;

ALTER TABLE app_public.tvshow_videos DROP COLUMN IF EXISTS drm_key_ids;
-- tvshow_video_streams END

GRANT SELECT, INSERT, UPDATE, DELETE ON
  app_public.movie_video_streams,
  app_public.episode_video_streams,
  app_public.season_video_streams,
  app_public.tvshow_video_streams TO ":DATABASE_GQL_ROLE";
